
PROJEKT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab64  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  0800ad38  0800ad38  0000bd38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b220  0800b220  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b220  0800b220  0000c220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b228  0800b228  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b228  0800b228  0000c228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b22c  0800b22c  0000c22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b230  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005004  200001d4  0800b404  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200051d8  0800b404  0000d1d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001031f  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024b3  00000000  00000000  0001d523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  0001f9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bfd  00000000  00000000  00020918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002315b  00000000  00000000  00021515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ebb  00000000  00000000  00044670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d44d8  00000000  00000000  0005552b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00129a03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005220  00000000  00000000  00129a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0012ec68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ad1c 	.word	0x0800ad1c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800ad1c 	.word	0x0800ad1c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <PWM_DMA_AddValue>:
    HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
    htim->hdma[TIM_DMA_ID_CC1]->Init.Mode = DMA_CIRCULAR;
    HAL_DMA_Init(htim->hdma[TIM_DMA_ID_CC1]);
}

HAL_StatusTypeDef PWM_DMA_AddValue(uint16_t angle) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	80fb      	strh	r3, [r7, #6]
    if (angle > 180 || pwm_handler.total_values >= MAX_PWM_VALUES) {
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	2bb4      	cmp	r3, #180	@ 0xb4
 8000ee6:	d803      	bhi.n	8000ef0 <PWM_DMA_AddValue+0x18>
 8000ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f5c <PWM_DMA_AddValue+0x84>)
 8000eea:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000eec:	2b18      	cmp	r3, #24
 8000eee:	d901      	bls.n	8000ef4 <PWM_DMA_AddValue+0x1c>
        return HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e02f      	b.n	8000f54 <PWM_DMA_AddValue+0x7c>
    }

    // zamiana kąta na ticki
    uint32_t pulse_ticks = SERVO_MIN_TICKS +
        ((uint32_t)angle * (SERVO_MAX_TICKS - SERVO_MIN_TICKS) / 180);
 8000ef4:	88fb      	ldrh	r3, [r7, #6]
 8000ef6:	f640 42ce 	movw	r2, #3278	@ 0xcce
 8000efa:	fb02 f303 	mul.w	r3, r2, r3
 8000efe:	089b      	lsrs	r3, r3, #2
 8000f00:	4a17      	ldr	r2, [pc, #92]	@ (8000f60 <PWM_DMA_AddValue+0x88>)
 8000f02:	fba2 2303 	umull	r2, r3, r2, r3
 8000f06:	089b      	lsrs	r3, r3, #2
    uint32_t pulse_ticks = SERVO_MIN_TICKS +
 8000f08:	f603 43ce 	addw	r3, r3, #3278	@ 0xcce
 8000f0c:	60fb      	str	r3, [r7, #12]

    // sprawdzenie czy jest w min max rrange
    if (pulse_ticks < SERVO_MIN_TICKS || pulse_ticks > SERVO_MAX_TICKS) {
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f640 42cd 	movw	r2, #3277	@ 0xccd
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d904      	bls.n	8000f22 <PWM_DMA_AddValue+0x4a>
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f641 129c 	movw	r2, #6556	@ 0x199c
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d901      	bls.n	8000f26 <PWM_DMA_AddValue+0x4e>
        return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e016      	b.n	8000f54 <PWM_DMA_AddValue+0x7c>
    }
    //jest to zabezpieczenie aby uniknąć konfliktu jak DMA chodzi i chcemy dodać wartość
    //stopuje przed dodaniem wartości. Dzięki temu DMA nie będzie jednocześnie odczytywać lub modyfikować bufora, gdy jest dodawana nowa wartość
    if (pwm_handler.is_running = 1){
 8000f26:	4b0d      	ldr	r3, [pc, #52]	@ (8000f5c <PWM_DMA_AddValue+0x84>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    	HAL_NVIC_DisableIRQ(DMA2_Stream1_IRQn);
 8000f2e:	2039      	movs	r0, #57	@ 0x39
 8000f30:	f002 fc43 	bl	80037ba <HAL_NVIC_DisableIRQ>
    	pwm_handler.pwm_values[pwm_handler.total_values++] = (uint16_t)pulse_ticks;
 8000f34:	4b09      	ldr	r3, [pc, #36]	@ (8000f5c <PWM_DMA_AddValue+0x84>)
 8000f36:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000f38:	1c5a      	adds	r2, r3, #1
 8000f3a:	b291      	uxth	r1, r2
 8000f3c:	4a07      	ldr	r2, [pc, #28]	@ (8000f5c <PWM_DMA_AddValue+0x84>)
 8000f3e:	8691      	strh	r1, [r2, #52]	@ 0x34
 8000f40:	461a      	mov	r2, r3
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	b299      	uxth	r1, r3
 8000f46:	4b05      	ldr	r3, [pc, #20]	@ (8000f5c <PWM_DMA_AddValue+0x84>)
 8000f48:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000f4c:	2039      	movs	r0, #57	@ 0x39
 8000f4e:	f002 fc26 	bl	800379e <HAL_NVIC_EnableIRQ>
    }
    else{pwm_handler.pwm_values[pwm_handler.total_values++] = (uint16_t)pulse_ticks;}
    return HAL_OK;
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200032e8 	.word	0x200032e8
 8000f60:	16c16c17 	.word	0x16c16c17

08000f64 <PWM_DMA_Start>:

void PWM_DMA_Start(void) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
    if (pwm_handler.total_values == 0 || pwm_handler.is_running) {
 8000f68:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa0 <PWM_DMA_Start+0x3c>)
 8000f6a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d014      	beq.n	8000f9a <PWM_DMA_Start+0x36>
 8000f70:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa0 <PWM_DMA_Start+0x3c>)
 8000f72:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10f      	bne.n	8000f9a <PWM_DMA_Start+0x36>
        return;
    }

    // Resetuje index i ustawia flagę że chodzi DMA
    pwm_handler.current_index = 0;
 8000f7a:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <PWM_DMA_Start+0x3c>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pwm_handler.is_running = 1;
 8000f80:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <PWM_DMA_Start+0x3c>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

    // Start PWM z DMA
    HAL_TIM_PWM_Start_DMA(pwm_handler.htim, TIM_CHANNEL_1, (uint32_t*)pwm_handler.pwm_values, pwm_handler.total_values);
 8000f88:	4b05      	ldr	r3, [pc, #20]	@ (8000fa0 <PWM_DMA_Start+0x3c>)
 8000f8a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8000f8c:	4b04      	ldr	r3, [pc, #16]	@ (8000fa0 <PWM_DMA_Start+0x3c>)
 8000f8e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8000f90:	4a03      	ldr	r2, [pc, #12]	@ (8000fa0 <PWM_DMA_Start+0x3c>)
 8000f92:	2100      	movs	r1, #0
 8000f94:	f004 fa24 	bl	80053e0 <HAL_TIM_PWM_Start_DMA>
 8000f98:	e000      	b.n	8000f9c <PWM_DMA_Start+0x38>
        return;
 8000f9a:	bf00      	nop
}
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200032e8 	.word	0x200032e8

08000fa4 <PWM_DMA_Stop>:

void PWM_DMA_Stop(void) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
    if (!pwm_handler.is_running) {
 8000fa8:	4b08      	ldr	r3, [pc, #32]	@ (8000fcc <PWM_DMA_Stop+0x28>)
 8000faa:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d00a      	beq.n	8000fc8 <PWM_DMA_Stop+0x24>
        return;
    }

    HAL_TIM_PWM_Stop_DMA(pwm_handler.htim, TIM_CHANNEL_1);
 8000fb2:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <PWM_DMA_Stop+0x28>)
 8000fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f004 fbd9 	bl	8005770 <HAL_TIM_PWM_Stop_DMA>
    pwm_handler.is_running = 0;
 8000fbe:	4b03      	ldr	r3, [pc, #12]	@ (8000fcc <PWM_DMA_Stop+0x28>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
 8000fc6:	e000      	b.n	8000fca <PWM_DMA_Stop+0x26>
        return;
 8000fc8:	bf00      	nop
}
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	200032e8 	.word	0x200032e8

08000fd0 <HAL_TIM_PWM_PulseFinishedCallback>:

// DMA callback pokazuje który indeks czyli jaka wartość jest teraz używana
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    if (htim != pwm_handler.htim || !pwm_handler.is_running) {
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8000fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d112      	bne.n	8001008 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8000fe4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d00d      	beq.n	8001008 <HAL_TIM_PWM_PulseFinishedCallback+0x38>
        return;
    }

    pwm_handler.current_index = (pwm_handler.current_index + 1) % pwm_handler.total_values;
 8000fec:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8000fee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	4a08      	ldr	r2, [pc, #32]	@ (8001014 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8000ff4:	8e92      	ldrh	r2, [r2, #52]	@ 0x34
 8000ff6:	fb93 f1f2 	sdiv	r1, r3, r2
 8000ffa:	fb01 f202 	mul.w	r2, r1, r2
 8000ffe:	1a9b      	subs	r3, r3, r2
 8001000:	b29a      	uxth	r2, r3
 8001002:	4b04      	ldr	r3, [pc, #16]	@ (8001014 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8001004:	865a      	strh	r2, [r3, #50]	@ 0x32
 8001006:	e000      	b.n	800100a <HAL_TIM_PWM_PulseFinishedCallback+0x3a>
        return;
 8001008:	bf00      	nop
}
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	200032e8 	.word	0x200032e8

08001018 <CircularBuffer_Put>:
    cb->tail = 0;
    cb->count = 0;
}

// Dodanie elementu do bufora
bool CircularBuffer_Put(CircularBuffer* cb, float data) {
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	ed87 0a02 	vstr	s0, [r7, #8]
    if (cb->count >= BUFFER_SIZE) {
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f8b3 31f8 	ldrh.w	r3, [r3, #504]	@ 0x1f8
 800102a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800102e:	d327      	bcc.n	8001080 <CircularBuffer_Put+0x68>
        // full, zacznij od początku
        cb->buffer[cb->head] = data;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f8b3 31f4 	ldrh.w	r3, [r3, #500]	@ 0x1f4
 8001036:	461a      	mov	r2, r3
 8001038:	edd7 7a02 	vldr	s15, [r7, #8]
 800103c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001040:	edc7 7a01 	vstr	s15, [r7, #4]
 8001044:	793b      	ldrb	r3, [r7, #4]
 8001046:	b2d9      	uxtb	r1, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	5499      	strb	r1, [r3, r2]
        cb->head = (cb->head + 1) % BUFFER_SIZE;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f8b3 31f4 	ldrh.w	r3, [r3, #500]	@ 0x1f4
 8001052:	3301      	adds	r3, #1
 8001054:	4a22      	ldr	r2, [pc, #136]	@ (80010e0 <CircularBuffer_Put+0xc8>)
 8001056:	fb82 1203 	smull	r1, r2, r2, r3
 800105a:	1151      	asrs	r1, r2, #5
 800105c:	17da      	asrs	r2, r3, #31
 800105e:	1a8a      	subs	r2, r1, r2
 8001060:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001064:	fb01 f202 	mul.w	r2, r1, r2
 8001068:	1a9a      	subs	r2, r3, r2
 800106a:	b292      	uxth	r2, r2
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f8a3 21f4 	strh.w	r2, [r3, #500]	@ 0x1f4
        cb->tail = cb->head; // zawijam tail zeby był za głową
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f8b3 21f4 	ldrh.w	r2, [r3, #500]	@ 0x1f4
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f8a3 21f6 	strh.w	r2, [r3, #502]	@ 0x1f6
 800107e:	e028      	b.n	80010d2 <CircularBuffer_Put+0xba>
    } else {
        cb->buffer[cb->head] = data;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f8b3 31f4 	ldrh.w	r3, [r3, #500]	@ 0x1f4
 8001086:	461a      	mov	r2, r3
 8001088:	edd7 7a02 	vldr	s15, [r7, #8]
 800108c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001090:	edc7 7a01 	vstr	s15, [r7, #4]
 8001094:	793b      	ldrb	r3, [r7, #4]
 8001096:	b2d9      	uxtb	r1, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	5499      	strb	r1, [r3, r2]
        cb->head = (cb->head + 1) % BUFFER_SIZE;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f8b3 31f4 	ldrh.w	r3, [r3, #500]	@ 0x1f4
 80010a2:	3301      	adds	r3, #1
 80010a4:	4a0e      	ldr	r2, [pc, #56]	@ (80010e0 <CircularBuffer_Put+0xc8>)
 80010a6:	fb82 1203 	smull	r1, r2, r2, r3
 80010aa:	1151      	asrs	r1, r2, #5
 80010ac:	17da      	asrs	r2, r3, #31
 80010ae:	1a8a      	subs	r2, r1, r2
 80010b0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80010b4:	fb01 f202 	mul.w	r2, r1, r2
 80010b8:	1a9a      	subs	r2, r3, r2
 80010ba:	b292      	uxth	r2, r2
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f8a3 21f4 	strh.w	r2, [r3, #500]	@ 0x1f4
        cb->count++;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f8b3 31f8 	ldrh.w	r3, [r3, #504]	@ 0x1f8
 80010c8:	3301      	adds	r3, #1
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f8a3 21f8 	strh.w	r2, [r3, #504]	@ 0x1f8
    }
    return true;
 80010d2:	2301      	movs	r3, #1
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	10624dd3 	.word	0x10624dd3

080010e4 <CircularBuffer_Get>:

// Odczytanie elementu z bufora
bool CircularBuffer_Get(CircularBuffer* cb, float* data) {
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
    if (cb->count == 0) {
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f8b3 31f8 	ldrh.w	r3, [r3, #504]	@ 0x1f8
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d101      	bne.n	80010fc <CircularBuffer_Get+0x18>
        // Bufor jest pusty
        return false;
 80010f8:	2300      	movs	r3, #0
 80010fa:	e028      	b.n	800114e <CircularBuffer_Get+0x6a>
    }
    *data = cb->buffer[cb->tail];
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f8b3 31f6 	ldrh.w	r3, [r3, #502]	@ 0x1f6
 8001102:	461a      	mov	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	5c9b      	ldrb	r3, [r3, r2]
 8001108:	ee07 3a90 	vmov	s15, r3
 800110c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	edc3 7a00 	vstr	s15, [r3]
    cb->tail = (cb->tail + 1) % BUFFER_SIZE;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	f8b3 31f6 	ldrh.w	r3, [r3, #502]	@ 0x1f6
 800111c:	3301      	adds	r3, #1
 800111e:	4a0f      	ldr	r2, [pc, #60]	@ (800115c <CircularBuffer_Get+0x78>)
 8001120:	fb82 1203 	smull	r1, r2, r2, r3
 8001124:	1151      	asrs	r1, r2, #5
 8001126:	17da      	asrs	r2, r3, #31
 8001128:	1a8a      	subs	r2, r1, r2
 800112a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800112e:	fb01 f202 	mul.w	r2, r1, r2
 8001132:	1a9a      	subs	r2, r3, r2
 8001134:	b292      	uxth	r2, r2
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f8a3 21f6 	strh.w	r2, [r3, #502]	@ 0x1f6
    cb->count--;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f8b3 31f8 	ldrh.w	r3, [r3, #504]	@ 0x1f8
 8001142:	3b01      	subs	r3, #1
 8001144:	b29a      	uxth	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f8a3 21f8 	strh.w	r2, [r3, #504]	@ 0x1f8
    return true;
 800114c:	2301      	movs	r3, #1
}
 800114e:	4618      	mov	r0, r3
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	10624dd3 	.word	0x10624dd3

08001160 <CircularBuffer_IsEmpty>:

// Sprawdzenie, czy bufor jest pusty
uint8_t CircularBuffer_IsEmpty(CircularBuffer* cb) {
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
    return (cb->count == 0) ? 1 : 0;  // 1 gdy pusty 0 gdy nie
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f8b3 31f8 	ldrh.w	r3, [r3, #504]	@ 0x1f8
 800116e:	2b00      	cmp	r3, #0
 8001170:	bf0c      	ite	eq
 8001172:	2301      	moveq	r3, #1
 8001174:	2300      	movne	r3, #0
 8001176:	b2db      	uxtb	r3, r3
}
 8001178:	4618      	mov	r0, r3
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <CircularBuffer_Size>:

// Zwrócenie liczby elementów w buforze
uint16_t CircularBuffer_Size(CircularBuffer* cb) {
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
    return cb->count;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f8b3 31f8 	ldrh.w	r3, [r3, #504]	@ 0x1f8
}
 8001192:	4618      	mov	r0, r3
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
	...

080011a0 <CircularBuffer_Peek>:

bool CircularBuffer_Peek(const CircularBuffer* cb, uint16_t pos, float* value) {
 80011a0:	b480      	push	{r7}
 80011a2:	b087      	sub	sp, #28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	460b      	mov	r3, r1
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	817b      	strh	r3, [r7, #10]
    if (pos >= cb->count) return false;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f8b3 31f8 	ldrh.w	r3, [r3, #504]	@ 0x1f8
 80011b4:	897a      	ldrh	r2, [r7, #10]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d301      	bcc.n	80011be <CircularBuffer_Peek+0x1e>
 80011ba:	2300      	movs	r3, #0
 80011bc:	e01d      	b.n	80011fa <CircularBuffer_Peek+0x5a>

    uint16_t actual_pos = (cb->tail + pos) % BUFFER_SIZE;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f8b3 31f6 	ldrh.w	r3, [r3, #502]	@ 0x1f6
 80011c4:	461a      	mov	r2, r3
 80011c6:	897b      	ldrh	r3, [r7, #10]
 80011c8:	4413      	add	r3, r2
 80011ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001208 <CircularBuffer_Peek+0x68>)
 80011cc:	fb82 1203 	smull	r1, r2, r2, r3
 80011d0:	1151      	asrs	r1, r2, #5
 80011d2:	17da      	asrs	r2, r3, #31
 80011d4:	1a8a      	subs	r2, r1, r2
 80011d6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80011da:	fb01 f202 	mul.w	r2, r1, r2
 80011de:	1a9a      	subs	r2, r3, r2
 80011e0:	4613      	mov	r3, r2
 80011e2:	82fb      	strh	r3, [r7, #22]
    *value = cb->buffer[actual_pos];
 80011e4:	8afb      	ldrh	r3, [r7, #22]
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	5cd3      	ldrb	r3, [r2, r3]
 80011ea:	ee07 3a90 	vmov	s15, r3
 80011ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	edc3 7a00 	vstr	s15, [r3]
    return true;
 80011f8:	2301      	movs	r3, #1
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	371c      	adds	r7, #28
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	10624dd3 	.word	0x10624dd3

0800120c <escapeByte>:


void escapeByte(uint8_t byte, uint8_t *outBuf, uint16_t *outLen, uint16_t outMax)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	461a      	mov	r2, r3
 8001218:	4603      	mov	r3, r0
 800121a:	73fb      	strb	r3, [r7, #15]
 800121c:	4613      	mov	r3, r2
 800121e:	81bb      	strh	r3, [r7, #12]
if (*outLen >= outMax) return; // zabezpieczenie
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	89ba      	ldrh	r2, [r7, #12]
 8001226:	429a      	cmp	r2, r3
 8001228:	d94b      	bls.n	80012c2 <escapeByte+0xb6>

if (byte == HDLC_FLAG) //sprawdzam czy bajt to 7E
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	2b7e      	cmp	r3, #126	@ 0x7e
 800122e:	d11c      	bne.n	800126a <escapeByte+0x5e>
{
    // 0x7E -> 0x7D 0x5E
    if (*outLen + 2 <= outMax) // jak tak to dodaj 2 bajty dla escapeów
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	1c5a      	adds	r2, r3, #1
 8001236:	89bb      	ldrh	r3, [r7, #12]
 8001238:	429a      	cmp	r2, r3
 800123a:	da43      	bge.n	80012c4 <escapeByte+0xb8>
    {
        outBuf[(*outLen)++] = HDLC_ESCAPE;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	1c5a      	adds	r2, r3, #1
 8001242:	b291      	uxth	r1, r2
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	8011      	strh	r1, [r2, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	4413      	add	r3, r2
 800124e:	227d      	movs	r2, #125	@ 0x7d
 8001250:	701a      	strb	r2, [r3, #0]
        outBuf[(*outLen)++] = HDLC_ESCAPE_7E;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	881b      	ldrh	r3, [r3, #0]
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	b291      	uxth	r1, r2
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	8011      	strh	r1, [r2, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	4413      	add	r3, r2
 8001264:	225e      	movs	r2, #94	@ 0x5e
 8001266:	701a      	strb	r2, [r3, #0]
 8001268:	e02c      	b.n	80012c4 <escapeByte+0xb8>
    }
}
else if (byte == HDLC_ESCAPE) //7D jest używany do oznaczani ze następny bajt w danych jest zakodowany
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	2b7d      	cmp	r3, #125	@ 0x7d
 800126e:	d11c      	bne.n	80012aa <escapeByte+0x9e>
{
    // 0x7D -> 0x7D 0x5D
    if (*outLen + 2 <= outMax) //tez dodaje 2 bajty
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	1c5a      	adds	r2, r3, #1
 8001276:	89bb      	ldrh	r3, [r7, #12]
 8001278:	429a      	cmp	r2, r3
 800127a:	da23      	bge.n	80012c4 <escapeByte+0xb8>
    {
        outBuf[(*outLen)++] = HDLC_ESCAPE;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	1c5a      	adds	r2, r3, #1
 8001282:	b291      	uxth	r1, r2
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	8011      	strh	r1, [r2, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	4413      	add	r3, r2
 800128e:	227d      	movs	r2, #125	@ 0x7d
 8001290:	701a      	strb	r2, [r3, #0]
        outBuf[(*outLen)++] = HDLC_ESCAPE_7D;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	b291      	uxth	r1, r2
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	8011      	strh	r1, [r2, #0]
 800129e:	461a      	mov	r2, r3
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	4413      	add	r3, r2
 80012a4:	225d      	movs	r2, #93	@ 0x5d
 80012a6:	701a      	strb	r2, [r3, #0]
 80012a8:	e00c      	b.n	80012c4 <escapeByte+0xb8>
    }
}
else
{
    // normalny bajt
    outBuf[(*outLen)++] = byte;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	b291      	uxth	r1, r2
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	8011      	strh	r1, [r2, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	4413      	add	r3, r2
 80012bc:	7bfa      	ldrb	r2, [r7, #15]
 80012be:	701a      	strb	r2, [r3, #0]
 80012c0:	e000      	b.n	80012c4 <escapeByte+0xb8>
if (*outLen >= outMax) return; // zabezpieczenie
 80012c2:	bf00      	nop
}
}
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <computeCRC8>:





uint8_t computeCRC8(const uint8_t *data, uint16_t length) {
 80012ce:	b480      	push	{r7}
 80012d0:	b085      	sub	sp, #20
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	460b      	mov	r3, r1
 80012d8:	807b      	strh	r3, [r7, #2]
    uint8_t crc = 0x00; // zaczynaj od 0x00
 80012da:	2300      	movs	r3, #0
 80012dc:	73fb      	strb	r3, [r7, #15]

    for (uint16_t i = 0; i < length; i++) {
 80012de:	2300      	movs	r3, #0
 80012e0:	81bb      	strh	r3, [r7, #12]
 80012e2:	e021      	b.n	8001328 <computeCRC8+0x5a>
        crc ^= data[i]; // xor obecny bit
 80012e4:	89bb      	ldrh	r3, [r7, #12]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	781a      	ldrb	r2, [r3, #0]
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	4053      	eors	r3, r2
 80012f0:	73fb      	strb	r3, [r7, #15]

        for (uint8_t j = 0; j < 8; j++) {
 80012f2:	2300      	movs	r3, #0
 80012f4:	72fb      	strb	r3, [r7, #11]
 80012f6:	e011      	b.n	800131c <computeCRC8+0x4e>
            if (crc & 0x80) { // sprawdz najważniejszy bit, używamy maski 0x80 (binarnie: 10000000)
 80012f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	da07      	bge.n	8001310 <computeCRC8+0x42>
                crc = (crc << 1) ^ 0x07; //Przesuń w lewo i xor z polinomial(0x07)
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	b25b      	sxtb	r3, r3
 8001306:	f083 0307 	eor.w	r3, r3, #7
 800130a:	b25b      	sxtb	r3, r3
 800130c:	73fb      	strb	r3, [r7, #15]
 800130e:	e002      	b.n	8001316 <computeCRC8+0x48>
            } else {
                crc <<= 1; // Przesuń w lewo
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {
 8001316:	7afb      	ldrb	r3, [r7, #11]
 8001318:	3301      	adds	r3, #1
 800131a:	72fb      	strb	r3, [r7, #11]
 800131c:	7afb      	ldrb	r3, [r7, #11]
 800131e:	2b07      	cmp	r3, #7
 8001320:	d9ea      	bls.n	80012f8 <computeCRC8+0x2a>
    for (uint16_t i = 0; i < length; i++) {
 8001322:	89bb      	ldrh	r3, [r7, #12]
 8001324:	3301      	adds	r3, #1
 8001326:	81bb      	strh	r3, [r7, #12]
 8001328:	89ba      	ldrh	r2, [r7, #12]
 800132a:	887b      	ldrh	r3, [r7, #2]
 800132c:	429a      	cmp	r2, r3
 800132e:	d3d9      	bcc.n	80012e4 <computeCRC8+0x16>
            }
        }
    }

    return crc;
 8001330:	7bfb      	ldrb	r3, [r7, #15]
}
 8001332:	4618      	mov	r0, r3
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <USART_kbhit>:



uint8_t USART_kbhit(){
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
		if(USART_RX_Empty==USART_RX_Busy){
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <USART_kbhit+0x20>)
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <USART_kbhit+0x24>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	429a      	cmp	r2, r3
 800134e:	d101      	bne.n	8001354 <USART_kbhit+0x14>
			return 0;
 8001350:	2300      	movs	r3, #0
 8001352:	e000      	b.n	8001356 <USART_kbhit+0x16>
		}else{
			return 1;
 8001354:	2301      	movs	r3, #1
		}
	} //Jeśli są równe, oznacza to, że bufor odbiorczy jest pusty i funkcja zwraca 0
 8001356:	4618      	mov	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	20002528 	.word	0x20002528
 8001364:	2000252c 	.word	0x2000252c

08001368 <USART_getchar>:
	 //Jeśli są różne, oznacza to, że w buforze są dane i funkcja zwraca 1

	int16_t USART_getchar(){
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
	int16_t tmp;

		if(USART_RX_Empty!=USART_RX_Busy){ //sprawdza czy są dane do odczytu
 800136e:	4b12      	ldr	r3, [pc, #72]	@ (80013b8 <USART_getchar+0x50>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <USART_getchar+0x54>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	429a      	cmp	r2, r3
 8001378:	d015      	beq.n	80013a6 <USART_getchar+0x3e>
			 tmp=USART_RxBuf[USART_RX_Busy]; // jeżeli tak to przechowaj bajt w zmiennej tmp
 800137a:	4b10      	ldr	r3, [pc, #64]	@ (80013bc <USART_getchar+0x54>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a10      	ldr	r2, [pc, #64]	@ (80013c0 <USART_getchar+0x58>)
 8001380:	5cd3      	ldrb	r3, [r2, r3]
 8001382:	80fb      	strh	r3, [r7, #6]
			 USART_RX_Busy++; // przejdź dalej
 8001384:	4b0d      	ldr	r3, [pc, #52]	@ (80013bc <USART_getchar+0x54>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	3301      	adds	r3, #1
 800138a:	4a0c      	ldr	r2, [pc, #48]	@ (80013bc <USART_getchar+0x54>)
 800138c:	6013      	str	r3, [r2, #0]
			 if(USART_RX_Busy >= USART_RXBUF_LEN)USART_RX_Busy=0; //zresetuj, jeżeli osiągnie max rozmiar USART_RXBUF_LEN(bufor do odczytu) czyli nastąpi zapętlenie
 800138e:	4b0b      	ldr	r3, [pc, #44]	@ (80013bc <USART_getchar+0x54>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f240 5293 	movw	r2, #1427	@ 0x593
 8001396:	4293      	cmp	r3, r2
 8001398:	dd02      	ble.n	80013a0 <USART_getchar+0x38>
 800139a:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <USART_getchar+0x54>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
			 return tmp;
 80013a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a4:	e001      	b.n	80013aa <USART_getchar+0x42>
		}else return -1; //zwraca -1 jeżeli bufor jest pusty
 80013a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
	}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20002528 	.word	0x20002528
 80013bc:	2000252c 	.word	0x2000252c
 80013c0:	20001f8c 	.word	0x20001f8c

080013c4 <HAL_UART_TxCpltCallback>:
	    //HAL_UART_Transmit_IT(&huart2, &tmp, 1); wywołuje funkcję HAL do rozpoczęcia transmisji pierwszego bajtu w trybie przerwań.
	  	  //Jeśli warunek nie jest spełniony, USART_TX_Empty jest aktualizowany do nowego idx.
	  __enable_irq(); //włącza przerwania po zakończeniu krytycznej sekcji
	}//fsend

	void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	   if(huart==&huart2){
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4a13      	ldr	r2, [pc, #76]	@ (800141c <HAL_UART_TxCpltCallback+0x58>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d11f      	bne.n	8001414 <HAL_UART_TxCpltCallback+0x50>
		   if(USART_TX_Empty!=USART_TX_Busy){ // Sprawdza, czy są jeszcze dane w buforze do wysłania. Jeśli wskaźnik USART_TX_Empty różni się od USART_TX_Busy, oznacza to, że bufor nadawczy nie jest pusty.
 80013d4:	4b12      	ldr	r3, [pc, #72]	@ (8001420 <HAL_UART_TxCpltCallback+0x5c>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <HAL_UART_TxCpltCallback+0x60>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d019      	beq.n	8001414 <HAL_UART_TxCpltCallback+0x50>
			   uint8_t tmp=USART_TxBuf[USART_TX_Busy]; // Pobiera kolejny bajt danych do wysłania z bufora USART_TxBuf w pozycji USART_TX_Busy
 80013e0:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <HAL_UART_TxCpltCallback+0x60>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a10      	ldr	r2, [pc, #64]	@ (8001428 <HAL_UART_TxCpltCallback+0x64>)
 80013e6:	5cd3      	ldrb	r3, [r2, r3]
 80013e8:	73fb      	strb	r3, [r7, #15]
			   USART_TX_Busy++; //Przeskok do kolejnego bajtu
 80013ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <HAL_UART_TxCpltCallback+0x60>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	3301      	adds	r3, #1
 80013f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001424 <HAL_UART_TxCpltCallback+0x60>)
 80013f2:	6013      	str	r3, [r2, #0]
			   if(USART_TX_Busy >= USART_TXBUF_LEN)USART_TX_Busy=0; // Jeżeli dojdzie do końca resetuj do pozycji początkowej (powrót do 0)
 80013f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001424 <HAL_UART_TxCpltCallback+0x60>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f641 3265 	movw	r2, #7013	@ 0x1b65
 80013fc:	4293      	cmp	r3, r2
 80013fe:	dd02      	ble.n	8001406 <HAL_UART_TxCpltCallback+0x42>
 8001400:	4b08      	ldr	r3, [pc, #32]	@ (8001424 <HAL_UART_TxCpltCallback+0x60>)
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
			   HAL_UART_Transmit_IT(&huart2, &tmp, 1); //Rozpoczyna transmisję kolejnego bajtu danych w trybie przerwań
 8001406:	f107 030f 	add.w	r3, r7, #15
 800140a:	2201      	movs	r2, #1
 800140c:	4619      	mov	r1, r3
 800140e:	4803      	ldr	r0, [pc, #12]	@ (800141c <HAL_UART_TxCpltCallback+0x58>)
 8001410:	f005 fe4f 	bl	80070b2 <HAL_UART_Transmit_IT>
		   }
	   }
	}
 8001414:	bf00      	nop
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200003dc 	.word	0x200003dc
 8001420:	20002520 	.word	0x20002520
 8001424:	20002524 	.word	0x20002524
 8001428:	20000424 	.word	0x20000424

0800142c <HAL_UART_RxCpltCallback>:
	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
		 if(huart==&huart2){ //Sprawdza, czy przerwanie dotyczy danego interfejsu UART huart2
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a0f      	ldr	r2, [pc, #60]	@ (8001474 <HAL_UART_RxCpltCallback+0x48>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d116      	bne.n	800146a <HAL_UART_RxCpltCallback+0x3e>
			 USART_RX_Empty++; //Przesuwa wskaźnik wskazując na następne miejsce w buforze odbiorczym
 800143c:	4b0e      	ldr	r3, [pc, #56]	@ (8001478 <HAL_UART_RxCpltCallback+0x4c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	3301      	adds	r3, #1
 8001442:	4a0d      	ldr	r2, [pc, #52]	@ (8001478 <HAL_UART_RxCpltCallback+0x4c>)
 8001444:	6013      	str	r3, [r2, #0]
			 if(USART_RX_Empty>=USART_RXBUF_LEN)USART_RX_Empty=0;// Jeżeli dojdzie do końca resetuj do pozycji początkowej (powrót do 0)
 8001446:	4b0c      	ldr	r3, [pc, #48]	@ (8001478 <HAL_UART_RxCpltCallback+0x4c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f240 5293 	movw	r2, #1427	@ 0x593
 800144e:	4293      	cmp	r3, r2
 8001450:	dd02      	ble.n	8001458 <HAL_UART_RxCpltCallback+0x2c>
 8001452:	4b09      	ldr	r3, [pc, #36]	@ (8001478 <HAL_UART_RxCpltCallback+0x4c>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
			 HAL_UART_Receive_IT(&huart2,&USART_RxBuf[USART_RX_Empty],1); //Ustawia przerwanie odbioru kolejnego bajtu do bufora USART_RxBuf w pozycji USART_RX_Empty
 8001458:	4b07      	ldr	r3, [pc, #28]	@ (8001478 <HAL_UART_RxCpltCallback+0x4c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a07      	ldr	r2, [pc, #28]	@ (800147c <HAL_UART_RxCpltCallback+0x50>)
 800145e:	4413      	add	r3, r2
 8001460:	2201      	movs	r2, #1
 8001462:	4619      	mov	r1, r3
 8001464:	4803      	ldr	r0, [pc, #12]	@ (8001474 <HAL_UART_RxCpltCallback+0x48>)
 8001466:	f005 fe5a 	bl	800711e <HAL_UART_Receive_IT>

		 }
	}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200003dc 	.word	0x200003dc
 8001478:	20002528 	.word	0x20002528
 800147c:	20001f8c 	.word	0x20001f8c

08001480 <addToResponse>:
//tymczasowy bufor na odp komend później do przesłania HDLC_SendFrame tak jest
uint8_t tempbufanswer[MAX_DATA_LEN];
size_t bufIndex = 0;

// Funkcja do dodawania odpowiedzi do bufora
void addToResponse(uint8_t* data, uint8_t len) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	70fb      	strb	r3, [r7, #3]
    if (bufIndex + len <= MAX_DATA_LEN) {
 800148c:	78fa      	ldrb	r2, [r7, #3]
 800148e:	4b0d      	ldr	r3, [pc, #52]	@ (80014c4 <addToResponse+0x44>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4413      	add	r3, r2
 8001494:	f640 52ac 	movw	r2, #3500	@ 0xdac
 8001498:	4293      	cmp	r3, r2
 800149a:	d80e      	bhi.n	80014ba <addToResponse+0x3a>
        memcpy(&tempbufanswer[bufIndex], data, len);
 800149c:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <addToResponse+0x44>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a09      	ldr	r2, [pc, #36]	@ (80014c8 <addToResponse+0x48>)
 80014a2:	4413      	add	r3, r2
 80014a4:	78fa      	ldrb	r2, [r7, #3]
 80014a6:	6879      	ldr	r1, [r7, #4]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f007 fbca 	bl	8008c42 <memcpy>
        bufIndex += len;
 80014ae:	78fa      	ldrb	r2, [r7, #3]
 80014b0:	4b04      	ldr	r3, [pc, #16]	@ (80014c4 <addToResponse+0x44>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4413      	add	r3, r2
 80014b6:	4a03      	ldr	r2, [pc, #12]	@ (80014c4 <addToResponse+0x44>)
 80014b8:	6013      	str	r3, [r2, #0]
    }
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200042d0 	.word	0x200042d0
 80014c8:	20003524 	.word	0x20003524

080014cc <allResponsesAreError>:
// funkcja sprawdzająca, czy bufor odpowiedzi zawiera wyłącznie komunikaty "ERROR "
uint8_t allResponsesAreError(void) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
    if (bufIndex == 0) return 0; // Bufor pusty - nie traktujemy jako same błędy
 80014d2:	4b1e      	ldr	r3, [pc, #120]	@ (800154c <allResponsesAreError+0x80>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <allResponsesAreError+0x12>
 80014da:	2300      	movs	r3, #0
 80014dc:	e032      	b.n	8001544 <allResponsesAreError+0x78>

    // długość nie jest wielokrotnością 6, nie są same bloki "ERROR "
    if (bufIndex % 6 != 0) return 0;
 80014de:	4b1b      	ldr	r3, [pc, #108]	@ (800154c <allResponsesAreError+0x80>)
 80014e0:	6819      	ldr	r1, [r3, #0]
 80014e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001550 <allResponsesAreError+0x84>)
 80014e4:	fba3 2301 	umull	r2, r3, r3, r1
 80014e8:	089a      	lsrs	r2, r3, #2
 80014ea:	4613      	mov	r3, r2
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4413      	add	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	1aca      	subs	r2, r1, r3
 80014f4:	2a00      	cmp	r2, #0
 80014f6:	d001      	beq.n	80014fc <allResponsesAreError+0x30>
 80014f8:	2300      	movs	r3, #0
 80014fa:	e023      	b.n	8001544 <allResponsesAreError+0x78>

    uint16_t numBlocks = bufIndex / 6;
 80014fc:	4b13      	ldr	r3, [pc, #76]	@ (800154c <allResponsesAreError+0x80>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a13      	ldr	r2, [pc, #76]	@ (8001550 <allResponsesAreError+0x84>)
 8001502:	fba2 2303 	umull	r2, r3, r2, r3
 8001506:	089b      	lsrs	r3, r3, #2
 8001508:	80bb      	strh	r3, [r7, #4]

    for (uint16_t i = 0; i < numBlocks; i++) {
 800150a:	2300      	movs	r3, #0
 800150c:	80fb      	strh	r3, [r7, #6]
 800150e:	e014      	b.n	800153a <allResponsesAreError+0x6e>
        //ERROR plus spacja
        if (memcmp(&tempbufanswer[i * 6], "ERROR ", 6) != 0)
 8001510:	88fa      	ldrh	r2, [r7, #6]
 8001512:	4613      	mov	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	4413      	add	r3, r2
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	461a      	mov	r2, r3
 800151c:	4b0d      	ldr	r3, [pc, #52]	@ (8001554 <allResponsesAreError+0x88>)
 800151e:	4413      	add	r3, r2
 8001520:	2206      	movs	r2, #6
 8001522:	490d      	ldr	r1, [pc, #52]	@ (8001558 <allResponsesAreError+0x8c>)
 8001524:	4618      	mov	r0, r3
 8001526:	f007 fafc 	bl	8008b22 <memcmp>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <allResponsesAreError+0x68>
            return 0; // Znaleziono blok inny niż "ERROR "
 8001530:	2300      	movs	r3, #0
 8001532:	e007      	b.n	8001544 <allResponsesAreError+0x78>
    for (uint16_t i = 0; i < numBlocks; i++) {
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	3301      	adds	r3, #1
 8001538:	80fb      	strh	r3, [r7, #6]
 800153a:	88fa      	ldrh	r2, [r7, #6]
 800153c:	88bb      	ldrh	r3, [r7, #4]
 800153e:	429a      	cmp	r2, r3
 8001540:	d3e6      	bcc.n	8001510 <allResponsesAreError+0x44>
    }

    return 1; // Wszystkie bloki to "ERROR "
 8001542:	2301      	movs	r3, #1
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	200042d0 	.word	0x200042d0
 8001550:	aaaaaaab 	.word	0xaaaaaaab
 8001554:	20003524 	.word	0x20003524
 8001558:	0800ad38 	.word	0x0800ad38

0800155c <SET1or2>:

// ---------------- Handler dla SET1 i SET2 ----------------
  static void SET1or2(uint8_t *cmdData, uint16_t length) {
 800155c:	b5b0      	push	{r4, r5, r7, lr}
 800155e:	b09e      	sub	sp, #120	@ 0x78
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	807b      	strh	r3, [r7, #2]
       if (length != 9 || cmdData[length - 1] != ']') {
 8001568:	887b      	ldrh	r3, [r7, #2]
 800156a:	2b09      	cmp	r3, #9
 800156c:	d106      	bne.n	800157c <SET1or2+0x20>
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	3b01      	subs	r3, #1
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b5d      	cmp	r3, #93	@ 0x5d
 800157a:	d00e      	beq.n	800159a <SET1or2+0x3e>
           uint8_t resp[] = "ERROR";
 800157c:	4a6b      	ldr	r2, [pc, #428]	@ (800172c <SET1or2+0x1d0>)
 800157e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001582:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001586:	6018      	str	r0, [r3, #0]
 8001588:	3304      	adds	r3, #4
 800158a:	8019      	strh	r1, [r3, #0]
           addToResponse(resp, sizeof(resp) - 1);
 800158c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001590:	2105      	movs	r1, #5
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff ff74 	bl	8001480 <addToResponse>
 8001598:	e0c4      	b.n	8001724 <SET1or2+0x1c8>
           return;
       }
       uint16_t value = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
       for (uint16_t i = 5; i < 8; i++) {
 80015a0:	2305      	movs	r3, #5
 80015a2:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 80015a6:	e04e      	b.n	8001646 <SET1or2+0xea>
           if (cmdData[i] < '0' || cmdData[i] > '9') {
 80015a8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	4413      	add	r3, r2
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b2f      	cmp	r3, #47	@ 0x2f
 80015b4:	d906      	bls.n	80015c4 <SET1or2+0x68>
 80015b6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b39      	cmp	r3, #57	@ 0x39
 80015c2:	d92a      	bls.n	800161a <SET1or2+0xbe>
               if (cmdData[3] == '1') {
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3303      	adds	r3, #3
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b31      	cmp	r3, #49	@ 0x31
 80015cc:	d112      	bne.n	80015f4 <SET1or2+0x98>
                   uint8_t resp[] = "S1 INVALID FORMAT ";
 80015ce:	4b58      	ldr	r3, [pc, #352]	@ (8001730 <SET1or2+0x1d4>)
 80015d0:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 80015d4:	461d      	mov	r5, r3
 80015d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015da:	682b      	ldr	r3, [r5, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	8022      	strh	r2, [r4, #0]
 80015e0:	3402      	adds	r4, #2
 80015e2:	0c1b      	lsrs	r3, r3, #16
 80015e4:	7023      	strb	r3, [r4, #0]
                   addToResponse(resp, sizeof(resp) - 1);
 80015e6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80015ea:	2112      	movs	r1, #18
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff ff47 	bl	8001480 <addToResponse>
               } else {
                   uint8_t resp[] = "S2 INVALID FORMAT ";
                   addToResponse(resp, sizeof(resp) - 1);
               }
               return;
 80015f2:	e097      	b.n	8001724 <SET1or2+0x1c8>
                   uint8_t resp[] = "S2 INVALID FORMAT ";
 80015f4:	4b4f      	ldr	r3, [pc, #316]	@ (8001734 <SET1or2+0x1d8>)
 80015f6:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 80015fa:	461d      	mov	r5, r3
 80015fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001600:	682b      	ldr	r3, [r5, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	8022      	strh	r2, [r4, #0]
 8001606:	3402      	adds	r4, #2
 8001608:	0c1b      	lsrs	r3, r3, #16
 800160a:	7023      	strb	r3, [r4, #0]
                   addToResponse(resp, sizeof(resp) - 1);
 800160c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001610:	2112      	movs	r1, #18
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff34 	bl	8001480 <addToResponse>
               return;
 8001618:	e084      	b.n	8001724 <SET1or2+0x1c8>
           }
           value = value * 10 + (cmdData[i] - '0');
 800161a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800161e:	461a      	mov	r2, r3
 8001620:	0092      	lsls	r2, r2, #2
 8001622:	4413      	add	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	b29b      	uxth	r3, r3
 8001628:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	440a      	add	r2, r1
 8001630:	7812      	ldrb	r2, [r2, #0]
 8001632:	4413      	add	r3, r2
 8001634:	b29b      	uxth	r3, r3
 8001636:	3b30      	subs	r3, #48	@ 0x30
 8001638:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
       for (uint16_t i = 5; i < 8; i++) {
 800163c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8001640:	3301      	adds	r3, #1
 8001642:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 8001646:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 800164a:	2b07      	cmp	r3, #7
 800164c:	d9ac      	bls.n	80015a8 <SET1or2+0x4c>
       }
       if (value > 180) {
 800164e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 8001652:	2bb4      	cmp	r3, #180	@ 0xb4
 8001654:	d92a      	bls.n	80016ac <SET1or2+0x150>
           if (cmdData[3] == '1') {
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3303      	adds	r3, #3
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b31      	cmp	r3, #49	@ 0x31
 800165e:	d112      	bne.n	8001686 <SET1or2+0x12a>
               uint8_t resp[] = "S1 INVALID FORMAT ";
 8001660:	4b33      	ldr	r3, [pc, #204]	@ (8001730 <SET1or2+0x1d4>)
 8001662:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8001666:	461d      	mov	r5, r3
 8001668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800166a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800166c:	682b      	ldr	r3, [r5, #0]
 800166e:	461a      	mov	r2, r3
 8001670:	8022      	strh	r2, [r4, #0]
 8001672:	3402      	adds	r4, #2
 8001674:	0c1b      	lsrs	r3, r3, #16
 8001676:	7023      	strb	r3, [r4, #0]
               addToResponse(resp, sizeof(resp) - 1);
 8001678:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800167c:	2112      	movs	r1, #18
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff fefe 	bl	8001480 <addToResponse>
           } else {
               uint8_t resp[] = "S2 INVALID FORMAT ";
               addToResponse(resp, sizeof(resp) - 1);
           }
           return;
 8001684:	e04e      	b.n	8001724 <SET1or2+0x1c8>
               uint8_t resp[] = "S2 INVALID FORMAT ";
 8001686:	4b2b      	ldr	r3, [pc, #172]	@ (8001734 <SET1or2+0x1d8>)
 8001688:	f107 041c 	add.w	r4, r7, #28
 800168c:	461d      	mov	r5, r3
 800168e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001692:	682b      	ldr	r3, [r5, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	8022      	strh	r2, [r4, #0]
 8001698:	3402      	adds	r4, #2
 800169a:	0c1b      	lsrs	r3, r3, #16
 800169c:	7023      	strb	r3, [r4, #0]
               addToResponse(resp, sizeof(resp) - 1);
 800169e:	f107 031c 	add.w	r3, r7, #28
 80016a2:	2112      	movs	r1, #18
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff feeb 	bl	8001480 <addToResponse>
           return;
 80016aa:	e03b      	b.n	8001724 <SET1or2+0x1c8>
       }
       uint16_t pulse_ticks = SERVO_MIN_TICKS + (value * (SERVO_MAX_TICKS - SERVO_MIN_TICKS) / 180);
 80016ac:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 80016b0:	f640 42ce 	movw	r2, #3278	@ 0xcce
 80016b4:	fb02 f303 	mul.w	r3, r2, r3
 80016b8:	4a1f      	ldr	r2, [pc, #124]	@ (8001738 <SET1or2+0x1dc>)
 80016ba:	fb82 1203 	smull	r1, r2, r2, r3
 80016be:	441a      	add	r2, r3
 80016c0:	11d2      	asrs	r2, r2, #7
 80016c2:	17db      	asrs	r3, r3, #31
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	f603 43ce 	addw	r3, r3, #3278	@ 0xcce
 80016cc:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
       if (cmdData[3] == '1') {
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3303      	adds	r3, #3
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b31      	cmp	r3, #49	@ 0x31
 80016d8:	d112      	bne.n	8001700 <SET1or2+0x1a4>
           __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse_ticks);
 80016da:	4b18      	ldr	r3, [pc, #96]	@ (800173c <SET1or2+0x1e0>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 80016e2:	635a      	str	r2, [r3, #52]	@ 0x34
           uint8_t resp[] = "S1 SET ";
 80016e4:	4a16      	ldr	r2, [pc, #88]	@ (8001740 <SET1or2+0x1e4>)
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016ee:	e883 0003 	stmia.w	r3, {r0, r1}
           addToResponse(resp, sizeof(resp) - 1);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	2107      	movs	r1, #7
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fec1 	bl	8001480 <addToResponse>
 80016fe:	e011      	b.n	8001724 <SET1or2+0x1c8>
       } else {
           __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pulse_ticks);
 8001700:	4b0e      	ldr	r3, [pc, #56]	@ (800173c <SET1or2+0x1e0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 8001708:	639a      	str	r2, [r3, #56]	@ 0x38
           uint8_t resp[] = "S2 SET ";
 800170a:	4a0e      	ldr	r2, [pc, #56]	@ (8001744 <SET1or2+0x1e8>)
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001714:	e883 0003 	stmia.w	r3, {r0, r1}
           addToResponse(resp, sizeof(resp) - 1);
 8001718:	f107 030c 	add.w	r3, r7, #12
 800171c:	2107      	movs	r1, #7
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff feae 	bl	8001480 <addToResponse>
       }
   }
 8001724:	3778      	adds	r7, #120	@ 0x78
 8001726:	46bd      	mov	sp, r7
 8001728:	bdb0      	pop	{r4, r5, r7, pc}
 800172a:	bf00      	nop
 800172c:	0800ad40 	.word	0x0800ad40
 8001730:	0800ad48 	.word	0x0800ad48
 8001734:	0800ad5c 	.word	0x0800ad5c
 8001738:	b60b60b7 	.word	0xb60b60b7
 800173c:	200001fc 	.word	0x200001fc
 8001740:	0800ad70 	.word	0x0800ad70
 8001744:	0800ad78 	.word	0x0800ad78

08001748 <ADDDMA>:

   // ---------------- Handler dla ADDDMA ----------------
  static void ADDDMA(uint8_t* cmdData, uint16_t length) {
 8001748:	b5b0      	push	{r4, r5, r7, lr}
 800174a:	b09a      	sub	sp, #104	@ 0x68
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	807b      	strh	r3, [r7, #2]
       if (length != 11 || cmdData[length - 1] != ']') {
 8001754:	887b      	ldrh	r3, [r7, #2]
 8001756:	2b0b      	cmp	r3, #11
 8001758:	d106      	bne.n	8001768 <ADDDMA+0x20>
 800175a:	887b      	ldrh	r3, [r7, #2]
 800175c:	3b01      	subs	r3, #1
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b5d      	cmp	r3, #93	@ 0x5d
 8001766:	d012      	beq.n	800178e <ADDDMA+0x46>
           uint8_t resp[] = "DMA INVALID FORMAT";
 8001768:	4b4c      	ldr	r3, [pc, #304]	@ (800189c <ADDDMA+0x154>)
 800176a:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 800176e:	461d      	mov	r5, r3
 8001770:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001772:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001774:	682b      	ldr	r3, [r5, #0]
 8001776:	461a      	mov	r2, r3
 8001778:	8022      	strh	r2, [r4, #0]
 800177a:	3402      	adds	r4, #2
 800177c:	0c1b      	lsrs	r3, r3, #16
 800177e:	7023      	strb	r3, [r4, #0]
           addToResponse(resp, sizeof(resp) - 1);
 8001780:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001784:	2112      	movs	r1, #18
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fe7a 	bl	8001480 <addToResponse>
 800178c:	e083      	b.n	8001896 <ADDDMA+0x14e>
           return;
       }
       uint16_t value = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
       for (uint16_t i = 7; i < 10; i++) {
 8001794:	2307      	movs	r3, #7
 8001796:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800179a:	e036      	b.n	800180a <ADDDMA+0xc2>
           if (cmdData[i] < '0' || cmdData[i] > '9') {
 800179c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	4413      	add	r3, r2
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b2f      	cmp	r3, #47	@ 0x2f
 80017a8:	d906      	bls.n	80017b8 <ADDDMA+0x70>
 80017aa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b39      	cmp	r3, #57	@ 0x39
 80017b6:	d912      	bls.n	80017de <ADDDMA+0x96>
               uint8_t resp[] = "DMA INVALID FORMAT";
 80017b8:	4b38      	ldr	r3, [pc, #224]	@ (800189c <ADDDMA+0x154>)
 80017ba:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80017be:	461d      	mov	r5, r3
 80017c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c4:	682b      	ldr	r3, [r5, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	8022      	strh	r2, [r4, #0]
 80017ca:	3402      	adds	r4, #2
 80017cc:	0c1b      	lsrs	r3, r3, #16
 80017ce:	7023      	strb	r3, [r4, #0]
               addToResponse(resp, sizeof(resp) - 1);
 80017d0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80017d4:	2112      	movs	r1, #18
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fe52 	bl	8001480 <addToResponse>
 80017dc:	e05b      	b.n	8001896 <ADDDMA+0x14e>
               return;
           }
           value = value * 10 + (cmdData[i] - '0');
 80017de:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80017e2:	461a      	mov	r2, r3
 80017e4:	0092      	lsls	r2, r2, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	440a      	add	r2, r1
 80017f4:	7812      	ldrb	r2, [r2, #0]
 80017f6:	4413      	add	r3, r2
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	3b30      	subs	r3, #48	@ 0x30
 80017fc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
       for (uint16_t i = 7; i < 10; i++) {
 8001800:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8001804:	3301      	adds	r3, #1
 8001806:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800180a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800180e:	2b09      	cmp	r3, #9
 8001810:	d9c4      	bls.n	800179c <ADDDMA+0x54>
       }
       if (value > 180) {
 8001812:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001816:	2bb4      	cmp	r3, #180	@ 0xb4
 8001818:	d912      	bls.n	8001840 <ADDDMA+0xf8>
           uint8_t resp[] = "DMA INVALID FORMAT";
 800181a:	4b20      	ldr	r3, [pc, #128]	@ (800189c <ADDDMA+0x154>)
 800181c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8001820:	461d      	mov	r5, r3
 8001822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001826:	682b      	ldr	r3, [r5, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	8022      	strh	r2, [r4, #0]
 800182c:	3402      	adds	r4, #2
 800182e:	0c1b      	lsrs	r3, r3, #16
 8001830:	7023      	strb	r3, [r4, #0]
           addToResponse(resp, sizeof(resp) - 1);
 8001832:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001836:	2112      	movs	r1, #18
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fe21 	bl	8001480 <addToResponse>
 800183e:	e02a      	b.n	8001896 <ADDDMA+0x14e>
           return;
       }
       HAL_StatusTypeDef status = PWM_DMA_AddValue(value);
 8001840:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff fb47 	bl	8000ed8 <PWM_DMA_AddValue>
 800184a:	4603      	mov	r3, r0
 800184c:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
       if (status == HAL_OK) {
 8001850:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8001854:	2b00      	cmp	r3, #0
 8001856:	d10c      	bne.n	8001872 <ADDDMA+0x12a>
           uint8_t resp[] = "DMA ADDED";
 8001858:	4a11      	ldr	r2, [pc, #68]	@ (80018a0 <ADDDMA+0x158>)
 800185a:	f107 031c 	add.w	r3, r7, #28
 800185e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001860:	c303      	stmia	r3!, {r0, r1}
 8001862:	801a      	strh	r2, [r3, #0]
           addToResponse(resp, sizeof(resp) - 1);
 8001864:	f107 031c 	add.w	r3, r7, #28
 8001868:	2109      	movs	r1, #9
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fe08 	bl	8001480 <addToResponse>
 8001870:	e011      	b.n	8001896 <ADDDMA+0x14e>
       } else {
           uint8_t resp[] = "DMA INVALID FORMAT";
 8001872:	4b0a      	ldr	r3, [pc, #40]	@ (800189c <ADDDMA+0x154>)
 8001874:	f107 0408 	add.w	r4, r7, #8
 8001878:	461d      	mov	r5, r3
 800187a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800187c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800187e:	682b      	ldr	r3, [r5, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	8022      	strh	r2, [r4, #0]
 8001884:	3402      	adds	r4, #2
 8001886:	0c1b      	lsrs	r3, r3, #16
 8001888:	7023      	strb	r3, [r4, #0]
           addToResponse(resp, sizeof(resp) - 1);
 800188a:	f107 0308 	add.w	r3, r7, #8
 800188e:	2112      	movs	r1, #18
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fdf5 	bl	8001480 <addToResponse>
       }
   }
 8001896:	3768      	adds	r7, #104	@ 0x68
 8001898:	46bd      	mov	sp, r7
 800189a:	bdb0      	pop	{r4, r5, r7, pc}
 800189c:	0800ad80 	.word	0x0800ad80
 80018a0:	0800ad94 	.word	0x0800ad94

080018a4 <SAUTO>:

   // ---------------- Handler dla SAUTO ----------------
  static void SAUTO(uint8_t *cmdData, uint16_t length) {
 80018a4:	b5b0      	push	{r4, r5, r7, lr}
 80018a6:	b08e      	sub	sp, #56	@ 0x38
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	807b      	strh	r3, [r7, #2]
       if (length != 8 || cmdData[length - 1] != ']') {
 80018b0:	887b      	ldrh	r3, [r7, #2]
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d106      	bne.n	80018c4 <SAUTO+0x20>
 80018b6:	887b      	ldrh	r3, [r7, #2]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b5d      	cmp	r3, #93	@ 0x5d
 80018c2:	d011      	beq.n	80018e8 <SAUTO+0x44>
           uint8_t resp[] = "SAUTO INVALID FORMAT";
 80018c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001940 <SAUTO+0x9c>)
 80018c6:	f107 0420 	add.w	r4, r7, #32
 80018ca:	461d      	mov	r5, r3
 80018cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80018d4:	6020      	str	r0, [r4, #0]
 80018d6:	3404      	adds	r4, #4
 80018d8:	7021      	strb	r1, [r4, #0]
           addToResponse(resp, sizeof(resp) - 1);
 80018da:	f107 0320 	add.w	r3, r7, #32
 80018de:	2114      	movs	r1, #20
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff fdcd 	bl	8001480 <addToResponse>
 80018e6:	e028      	b.n	800193a <SAUTO+0x96>
           return;
       }
       uint8_t param = cmdData[6];
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	799b      	ldrb	r3, [r3, #6]
 80018ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
       if (param == '1') {
 80018f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80018f4:	2b31      	cmp	r3, #49	@ 0x31
 80018f6:	d10e      	bne.n	8001916 <SAUTO+0x72>
           PWM_DMA_Start();
 80018f8:	f7ff fb34 	bl	8000f64 <PWM_DMA_Start>
           uint8_t resp[] = "SAUTO ON";
 80018fc:	4a11      	ldr	r2, [pc, #68]	@ (8001944 <SAUTO+0xa0>)
 80018fe:	f107 0314 	add.w	r3, r7, #20
 8001902:	ca07      	ldmia	r2, {r0, r1, r2}
 8001904:	c303      	stmia	r3!, {r0, r1}
 8001906:	701a      	strb	r2, [r3, #0]
           addToResponse(resp, sizeof(resp) - 1);
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	2108      	movs	r1, #8
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff fdb6 	bl	8001480 <addToResponse>
 8001914:	e011      	b.n	800193a <SAUTO+0x96>
       } else if (param == '0') {
 8001916:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800191a:	2b30      	cmp	r3, #48	@ 0x30
 800191c:	d10d      	bne.n	800193a <SAUTO+0x96>
           PWM_DMA_Stop();
 800191e:	f7ff fb41 	bl	8000fa4 <PWM_DMA_Stop>
           uint8_t resp[] = "SAUTO OFF";
 8001922:	4a09      	ldr	r2, [pc, #36]	@ (8001948 <SAUTO+0xa4>)
 8001924:	f107 0308 	add.w	r3, r7, #8
 8001928:	ca07      	ldmia	r2, {r0, r1, r2}
 800192a:	c303      	stmia	r3!, {r0, r1}
 800192c:	801a      	strh	r2, [r3, #0]
           addToResponse(resp, sizeof(resp) - 1);
 800192e:	f107 0308 	add.w	r3, r7, #8
 8001932:	2109      	movs	r1, #9
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fda3 	bl	8001480 <addToResponse>
       }
   }
 800193a:	3738      	adds	r7, #56	@ 0x38
 800193c:	46bd      	mov	sp, r7
 800193e:	bdb0      	pop	{r4, r5, r7, pc}
 8001940:	0800ada0 	.word	0x0800ada0
 8001944:	0800adb8 	.word	0x0800adb8
 8001948:	0800adc4 	.word	0x0800adc4

0800194c <UA>:

   // ---------------- Handler dla UA? ----------------
  static void UA(uint8_t* cmdData, uint16_t length) {
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	807b      	strh	r3, [r7, #2]
       uint16_t ms = htim6.Init.Period + 1;
 8001958:	4b2a      	ldr	r3, [pc, #168]	@ (8001a04 <UA+0xb8>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	b29b      	uxth	r3, r3
 800195e:	3301      	adds	r3, #1
 8001960:	82fb      	strh	r3, [r7, #22]
       // Format: "UA " + 4-cyfrowa liczba, bez znaku '\0'
       uint8_t resp[7];
       resp[0] = 'U';
 8001962:	2355      	movs	r3, #85	@ 0x55
 8001964:	733b      	strb	r3, [r7, #12]
       resp[1] = 'A';
 8001966:	2341      	movs	r3, #65	@ 0x41
 8001968:	737b      	strb	r3, [r7, #13]
       resp[2] = ' ';
 800196a:	2320      	movs	r3, #32
 800196c:	73bb      	strb	r3, [r7, #14]
       resp[3] = '0' + (ms / 1000);         // tysiące
 800196e:	8afb      	ldrh	r3, [r7, #22]
 8001970:	4a25      	ldr	r2, [pc, #148]	@ (8001a08 <UA+0xbc>)
 8001972:	fba2 2303 	umull	r2, r3, r2, r3
 8001976:	099b      	lsrs	r3, r3, #6
 8001978:	b29b      	uxth	r3, r3
 800197a:	b2db      	uxtb	r3, r3
 800197c:	3330      	adds	r3, #48	@ 0x30
 800197e:	b2db      	uxtb	r3, r3
 8001980:	73fb      	strb	r3, [r7, #15]
       resp[4] = '0' + ((ms % 1000) / 100);   // setki
 8001982:	8afb      	ldrh	r3, [r7, #22]
 8001984:	4a20      	ldr	r2, [pc, #128]	@ (8001a08 <UA+0xbc>)
 8001986:	fba2 1203 	umull	r1, r2, r2, r3
 800198a:	0992      	lsrs	r2, r2, #6
 800198c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001990:	fb01 f202 	mul.w	r2, r1, r2
 8001994:	1a9b      	subs	r3, r3, r2
 8001996:	b29b      	uxth	r3, r3
 8001998:	4a1c      	ldr	r2, [pc, #112]	@ (8001a0c <UA+0xc0>)
 800199a:	fba2 2303 	umull	r2, r3, r2, r3
 800199e:	095b      	lsrs	r3, r3, #5
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	3330      	adds	r3, #48	@ 0x30
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	743b      	strb	r3, [r7, #16]
       resp[5] = '0' + ((ms % 100) / 10);     // dziesiątki
 80019aa:	8afb      	ldrh	r3, [r7, #22]
 80019ac:	4a17      	ldr	r2, [pc, #92]	@ (8001a0c <UA+0xc0>)
 80019ae:	fba2 1203 	umull	r1, r2, r2, r3
 80019b2:	0952      	lsrs	r2, r2, #5
 80019b4:	2164      	movs	r1, #100	@ 0x64
 80019b6:	fb01 f202 	mul.w	r2, r1, r2
 80019ba:	1a9b      	subs	r3, r3, r2
 80019bc:	b29b      	uxth	r3, r3
 80019be:	4a14      	ldr	r2, [pc, #80]	@ (8001a10 <UA+0xc4>)
 80019c0:	fba2 2303 	umull	r2, r3, r2, r3
 80019c4:	08db      	lsrs	r3, r3, #3
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	3330      	adds	r3, #48	@ 0x30
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	747b      	strb	r3, [r7, #17]
       resp[6] = '0' + (ms % 10);             // jedności
 80019d0:	8afa      	ldrh	r2, [r7, #22]
 80019d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a10 <UA+0xc4>)
 80019d4:	fba3 1302 	umull	r1, r3, r3, r2
 80019d8:	08d9      	lsrs	r1, r3, #3
 80019da:	460b      	mov	r3, r1
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	440b      	add	r3, r1
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	3330      	adds	r3, #48	@ 0x30
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	74bb      	strb	r3, [r7, #18]
       addToResponse(resp, 7);
 80019ee:	f107 030c 	add.w	r3, r7, #12
 80019f2:	2107      	movs	r1, #7
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fd43 	bl	8001480 <addToResponse>
   }
 80019fa:	bf00      	nop
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	2000028c 	.word	0x2000028c
 8001a08:	10624dd3 	.word	0x10624dd3
 8001a0c:	51eb851f 	.word	0x51eb851f
 8001a10:	cccccccd 	.word	0xcccccccd

08001a14 <UAxxx>:

   // ---------------- Handler dla UA[xxx] ----------------
  static void UAxxx(uint8_t *cmdData, uint16_t length) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	@ 0x28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]
       if (length != 8 || cmdData[length - 1] != ']') {
 8001a20:	887b      	ldrh	r3, [r7, #2]
 8001a22:	2b08      	cmp	r3, #8
 8001a24:	d106      	bne.n	8001a34 <UAxxx+0x20>
 8001a26:	887b      	ldrh	r3, [r7, #2]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b5d      	cmp	r3, #93	@ 0x5d
 8001a32:	d00e      	beq.n	8001a52 <UAxxx+0x3e>
           uint8_t resp[] = "ERROR";
 8001a34:	4a30      	ldr	r2, [pc, #192]	@ (8001af8 <UAxxx+0xe4>)
 8001a36:	f107 031c 	add.w	r3, r7, #28
 8001a3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a3e:	6018      	str	r0, [r3, #0]
 8001a40:	3304      	adds	r3, #4
 8001a42:	8019      	strh	r1, [r3, #0]
           addToResponse(resp, sizeof(resp) - 1);
 8001a44:	f107 031c 	add.w	r3, r7, #28
 8001a48:	2105      	movs	r1, #5
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fd18 	bl	8001480 <addToResponse>
 8001a50:	e04f      	b.n	8001af2 <UAxxx+0xde>
           return;
       }
       uint16_t value = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	84fb      	strh	r3, [r7, #38]	@ 0x26
       for (uint16_t i = 3; i < 7; i++) {
 8001a56:	2303      	movs	r3, #3
 8001a58:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001a5a:	e02b      	b.n	8001ab4 <UAxxx+0xa0>
           if (cmdData[i] < '0' || cmdData[i] > '9') {
 8001a5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b2f      	cmp	r3, #47	@ 0x2f
 8001a66:	d905      	bls.n	8001a74 <UAxxx+0x60>
 8001a68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b39      	cmp	r3, #57	@ 0x39
 8001a72:	d90e      	bls.n	8001a92 <UAxxx+0x7e>
               uint8_t resp[] = "ERROR";
 8001a74:	4a20      	ldr	r2, [pc, #128]	@ (8001af8 <UAxxx+0xe4>)
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a7e:	6018      	str	r0, [r3, #0]
 8001a80:	3304      	adds	r3, #4
 8001a82:	8019      	strh	r1, [r3, #0]
               addToResponse(resp, sizeof(resp) - 1);
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	2105      	movs	r1, #5
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fcf8 	bl	8001480 <addToResponse>
 8001a90:	e02f      	b.n	8001af2 <UAxxx+0xde>
               return;
           }
           value = value * 10 + (cmdData[i] - '0');
 8001a92:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001a94:	461a      	mov	r2, r3
 8001a96:	0092      	lsls	r2, r2, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001aa0:	6879      	ldr	r1, [r7, #4]
 8001aa2:	440a      	add	r2, r1
 8001aa4:	7812      	ldrb	r2, [r2, #0]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	3b30      	subs	r3, #48	@ 0x30
 8001aac:	84fb      	strh	r3, [r7, #38]	@ 0x26
       for (uint16_t i = 3; i < 7; i++) {
 8001aae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001ab4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ab6:	2b06      	cmp	r3, #6
 8001ab8:	d9d0      	bls.n	8001a5c <UAxxx+0x48>
       }
       if (value >= 10 && value <= 1000) {
 8001aba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001abc:	2b09      	cmp	r3, #9
 8001abe:	d918      	bls.n	8001af2 <UAxxx+0xde>
 8001ac0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001ac2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ac6:	d814      	bhi.n	8001af2 <UAxxx+0xde>
           SetUltrasonicInterval(value);
 8001ac8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001aca:	4618      	mov	r0, r3
 8001acc:	f000 fe7e 	bl	80027cc <SetUltrasonicInterval>
           uint8_t resp[] = "UA SET";
 8001ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8001afc <UAxxx+0xe8>)
 8001ad2:	f107 030c 	add.w	r3, r7, #12
 8001ad6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ada:	6018      	str	r0, [r3, #0]
 8001adc:	3304      	adds	r3, #4
 8001ade:	8019      	strh	r1, [r3, #0]
 8001ae0:	3302      	adds	r3, #2
 8001ae2:	0c0a      	lsrs	r2, r1, #16
 8001ae4:	701a      	strb	r2, [r3, #0]
           addToResponse(resp, sizeof(resp) - 1);
 8001ae6:	f107 030c 	add.w	r3, r7, #12
 8001aea:	2106      	movs	r1, #6
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fcc7 	bl	8001480 <addToResponse>
       }
   }
 8001af2:	3728      	adds	r7, #40	@ 0x28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	0800ad40 	.word	0x0800ad40
 8001afc:	0800add0 	.word	0x0800add0

08001b00 <BUF>:

   // ---------------- Handler dla BUF ----------------
  static void BUF(uint8_t *cmdData, uint16_t length) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b090      	sub	sp, #64	@ 0x40
 8001b04:	af02      	add	r7, sp, #8
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	460b      	mov	r3, r1
 8001b0a:	807b      	strh	r3, [r7, #2]
       if (length != 3) {
 8001b0c:	887b      	ldrh	r3, [r7, #2]
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d00e      	beq.n	8001b30 <BUF+0x30>
           uint8_t resp[] = "ERROR";
 8001b12:	4a27      	ldr	r2, [pc, #156]	@ (8001bb0 <BUF+0xb0>)
 8001b14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b1c:	6018      	str	r0, [r3, #0]
 8001b1e:	3304      	adds	r3, #4
 8001b20:	8019      	strh	r1, [r3, #0]
           addToResponse(resp, sizeof(resp) - 1);
 8001b22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b26:	2105      	movs	r1, #5
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fca9 	bl	8001480 <addToResponse>
 8001b2e:	e03c      	b.n	8001baa <BUF+0xaa>
           return;
       }
       if (CircularBuffer_IsEmpty(&cb)) {
 8001b30:	4820      	ldr	r0, [pc, #128]	@ (8001bb4 <BUF+0xb4>)
 8001b32:	f7ff fb15 	bl	8001160 <CircularBuffer_IsEmpty>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d00d      	beq.n	8001b58 <BUF+0x58>
           uint8_t resp[] = "NO DATA";
 8001b3c:	4a1e      	ldr	r2, [pc, #120]	@ (8001bb8 <BUF+0xb8>)
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b46:	e883 0003 	stmia.w	r3, {r0, r1}
           addToResponse(resp, sizeof(resp) - 1);
 8001b4a:	f107 031c 	add.w	r3, r7, #28
 8001b4e:	2107      	movs	r1, #7
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fc95 	bl	8001480 <addToResponse>
 8001b56:	e028      	b.n	8001baa <BUF+0xaa>
           return;
       }
       float value;
       for (int i = 0; i < 20; i++) {
 8001b58:	2300      	movs	r3, #0
 8001b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b5c:	e022      	b.n	8001ba4 <BUF+0xa4>
           if (CircularBuffer_Get(&cb, &value)) {
 8001b5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b62:	4619      	mov	r1, r3
 8001b64:	4813      	ldr	r0, [pc, #76]	@ (8001bb4 <BUF+0xb4>)
 8001b66:	f7ff fabd 	bl	80010e4 <CircularBuffer_Get>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d016      	beq.n	8001b9e <BUF+0x9e>
               char temp[16];
               int len = snprintf(temp, sizeof(temp), "%.2f ", value);
 8001b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fd08 	bl	8000588 <__aeabi_f2d>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	f107 000c 	add.w	r0, r7, #12
 8001b80:	e9cd 2300 	strd	r2, r3, [sp]
 8001b84:	4a0d      	ldr	r2, [pc, #52]	@ (8001bbc <BUF+0xbc>)
 8001b86:	2110      	movs	r1, #16
 8001b88:	f006 ff54 	bl	8008a34 <sniprintf>
 8001b8c:	6338      	str	r0, [r7, #48]	@ 0x30
               addToResponse((uint8_t*)temp, (uint8_t)len);
 8001b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	f107 030c 	add.w	r3, r7, #12
 8001b96:	4611      	mov	r1, r2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff fc71 	bl	8001480 <addToResponse>
       for (int i = 0; i < 20; i++) {
 8001b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ba6:	2b13      	cmp	r3, #19
 8001ba8:	ddd9      	ble.n	8001b5e <BUF+0x5e>
           }
       }
   }
 8001baa:	3738      	adds	r7, #56	@ 0x38
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	0800ad40 	.word	0x0800ad40
 8001bb4:	20003328 	.word	0x20003328
 8001bb8:	0800ade0 	.word	0x0800ade0
 8001bbc:	0800add8 	.word	0x0800add8

08001bc0 <BUFALL>:

   // ---------------- Handler dla BUFALL ----------------
  static void BUFALL(uint8_t *cmdData, uint16_t length) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08e      	sub	sp, #56	@ 0x38
 8001bc4:	af02      	add	r7, sp, #8
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	807b      	strh	r3, [r7, #2]
       if (length != 6) {
 8001bcc:	887b      	ldrh	r3, [r7, #2]
 8001bce:	2b06      	cmp	r3, #6
 8001bd0:	d00e      	beq.n	8001bf0 <BUFALL+0x30>
           uint8_t resp[] = "ERROR";
 8001bd2:	4a23      	ldr	r2, [pc, #140]	@ (8001c60 <BUFALL+0xa0>)
 8001bd4:	f107 0320 	add.w	r3, r7, #32
 8001bd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bdc:	6018      	str	r0, [r3, #0]
 8001bde:	3304      	adds	r3, #4
 8001be0:	8019      	strh	r1, [r3, #0]
           addToResponse(resp, sizeof(resp) - 1);
 8001be2:	f107 0320 	add.w	r3, r7, #32
 8001be6:	2105      	movs	r1, #5
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fc49 	bl	8001480 <addToResponse>
 8001bee:	e033      	b.n	8001c58 <BUFALL+0x98>
           return;
       }
       if (CircularBuffer_IsEmpty(&cb)) {
 8001bf0:	481c      	ldr	r0, [pc, #112]	@ (8001c64 <BUFALL+0xa4>)
 8001bf2:	f7ff fab5 	bl	8001160 <CircularBuffer_IsEmpty>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d024      	beq.n	8001c46 <BUFALL+0x86>
           uint8_t resp[] = "NO DATA";
 8001bfc:	4a1a      	ldr	r2, [pc, #104]	@ (8001c68 <BUFALL+0xa8>)
 8001bfe:	f107 0318 	add.w	r3, r7, #24
 8001c02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c06:	e883 0003 	stmia.w	r3, {r0, r1}
           addToResponse(resp, sizeof(resp) - 1);
 8001c0a:	f107 0318 	add.w	r3, r7, #24
 8001c0e:	2107      	movs	r1, #7
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fc35 	bl	8001480 <addToResponse>
 8001c16:	e01f      	b.n	8001c58 <BUFALL+0x98>
           return;
       }
       float value;
       while (CircularBuffer_Get(&cb, &value)) {
           char temp[16];
           int len = snprintf(temp, sizeof(temp), "%.2f ", value);
 8001c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe fcb4 	bl	8000588 <__aeabi_f2d>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	f107 0008 	add.w	r0, r7, #8
 8001c28:	e9cd 2300 	strd	r2, r3, [sp]
 8001c2c:	4a0f      	ldr	r2, [pc, #60]	@ (8001c6c <BUFALL+0xac>)
 8001c2e:	2110      	movs	r1, #16
 8001c30:	f006 ff00 	bl	8008a34 <sniprintf>
 8001c34:	62f8      	str	r0, [r7, #44]	@ 0x2c
           addToResponse((uint8_t*)temp, (uint8_t)len);
 8001c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	f107 0308 	add.w	r3, r7, #8
 8001c3e:	4611      	mov	r1, r2
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fc1d 	bl	8001480 <addToResponse>
       while (CircularBuffer_Get(&cb, &value)) {
 8001c46:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4805      	ldr	r0, [pc, #20]	@ (8001c64 <BUFALL+0xa4>)
 8001c4e:	f7ff fa49 	bl	80010e4 <CircularBuffer_Get>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1df      	bne.n	8001c18 <BUFALL+0x58>
       }
   }
 8001c58:	3730      	adds	r7, #48	@ 0x30
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	0800ad40 	.word	0x0800ad40
 8001c64:	20003328 	.word	0x20003328
 8001c68:	0800ade0 	.word	0x0800ade0
 8001c6c:	0800add8 	.word	0x0800add8

08001c70 <BUFN>:

   // ---------------- Handler dla BUFN[xxx,xxx] ----------------
  static void BUFN(uint8_t *cmdData, uint16_t length) {
 8001c70:	b5b0      	push	{r4, r5, r7, lr}
 8001c72:	b0b0      	sub	sp, #192	@ 0xc0
 8001c74:	af02      	add	r7, sp, #8
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	807b      	strh	r3, [r7, #2]
       // Oczekujemy dokładnie 13 bajtów: "BUFN[xxx,xxx]"
       if (length != 13 || cmdData[length - 1] != ']') {
 8001c7c:	887b      	ldrh	r3, [r7, #2]
 8001c7e:	2b0d      	cmp	r3, #13
 8001c80:	d106      	bne.n	8001c90 <BUFN+0x20>
 8001c82:	887b      	ldrh	r3, [r7, #2]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b5d      	cmp	r3, #93	@ 0x5d
 8001c8e:	d00e      	beq.n	8001cae <BUFN+0x3e>
           uint8_t resp[] = "BUFN INVALID FORMAT";
 8001c90:	4b8f      	ldr	r3, [pc, #572]	@ (8001ed0 <BUFN+0x260>)
 8001c92:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8001c96:	461d      	mov	r5, r3
 8001c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c9c:	682b      	ldr	r3, [r5, #0]
 8001c9e:	6023      	str	r3, [r4, #0]
           addToResponse(resp, sizeof(resp) - 1);
 8001ca0:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001ca4:	2113      	movs	r1, #19
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff fbea 	bl	8001480 <addToResponse>
 8001cac:	e10d      	b.n	8001eca <BUFN+0x25a>
           return;
       }
       if (cmdData[8] != ',') {
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3308      	adds	r3, #8
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b2c      	cmp	r3, #44	@ 0x2c
 8001cb6:	d00e      	beq.n	8001cd6 <BUFN+0x66>
           uint8_t resp[] = "BUFN INVALID FORMAT";
 8001cb8:	4b85      	ldr	r3, [pc, #532]	@ (8001ed0 <BUFN+0x260>)
 8001cba:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8001cbe:	461d      	mov	r5, r3
 8001cc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cc4:	682b      	ldr	r3, [r5, #0]
 8001cc6:	6023      	str	r3, [r4, #0]
           addToResponse(resp, sizeof(resp) - 1);
 8001cc8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001ccc:	2113      	movs	r1, #19
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff fbd6 	bl	8001480 <addToResponse>
 8001cd4:	e0f9      	b.n	8001eca <BUFN+0x25a>
           return;
       }
       uint16_t start = 0, end = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
       for (uint8_t i = 5; i < 8; i++) {
 8001ce2:	2305      	movs	r3, #5
 8001ce4:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8001ce8:	e035      	b.n	8001d56 <BUFN+0xe6>
           if (!isdigit(cmdData[i])) {
 8001cea:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	4a77      	ldr	r2, [pc, #476]	@ (8001ed4 <BUFN+0x264>)
 8001cf8:	4413      	add	r3, r2
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d112      	bne.n	8001d2a <BUFN+0xba>
               uint8_t resp[] = "BUFN INVALID START";
 8001d04:	4b74      	ldr	r3, [pc, #464]	@ (8001ed8 <BUFN+0x268>)
 8001d06:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8001d0a:	461d      	mov	r5, r3
 8001d0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d10:	682b      	ldr	r3, [r5, #0]
 8001d12:	461a      	mov	r2, r3
 8001d14:	8022      	strh	r2, [r4, #0]
 8001d16:	3402      	adds	r4, #2
 8001d18:	0c1b      	lsrs	r3, r3, #16
 8001d1a:	7023      	strb	r3, [r4, #0]
               addToResponse(resp, sizeof(resp) - 1);
 8001d1c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001d20:	2112      	movs	r1, #18
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fbac 	bl	8001480 <addToResponse>
 8001d28:	e0cf      	b.n	8001eca <BUFN+0x25a>
               return;
           }
           start = start * 10 + (cmdData[i] - '0');
 8001d2a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 8001d2e:	461a      	mov	r2, r3
 8001d30:	0092      	lsls	r2, r2, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	f897 20b3 	ldrb.w	r2, [r7, #179]	@ 0xb3
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	440a      	add	r2, r1
 8001d40:	7812      	ldrb	r2, [r2, #0]
 8001d42:	4413      	add	r3, r2
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	3b30      	subs	r3, #48	@ 0x30
 8001d48:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
       for (uint8_t i = 5; i < 8; i++) {
 8001d4c:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001d50:	3301      	adds	r3, #1
 8001d52:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8001d56:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8001d5a:	2b07      	cmp	r3, #7
 8001d5c:	d9c5      	bls.n	8001cea <BUFN+0x7a>
       }
       for (uint8_t i = 9; i < 12; i++) {
 8001d5e:	2309      	movs	r3, #9
 8001d60:	f887 30b2 	strb.w	r3, [r7, #178]	@ 0xb2
 8001d64:	e031      	b.n	8001dca <BUFN+0x15a>
           if (!isdigit(cmdData[i])) {
 8001d66:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	3301      	adds	r3, #1
 8001d72:	4a58      	ldr	r2, [pc, #352]	@ (8001ed4 <BUFN+0x264>)
 8001d74:	4413      	add	r3, r2
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10e      	bne.n	8001d9e <BUFN+0x12e>
               uint8_t resp[] = "BUFN INVALID END";
 8001d80:	4b56      	ldr	r3, [pc, #344]	@ (8001edc <BUFN+0x26c>)
 8001d82:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8001d86:	461d      	mov	r5, r3
 8001d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d8c:	682b      	ldr	r3, [r5, #0]
 8001d8e:	7023      	strb	r3, [r4, #0]
               addToResponse(resp, sizeof(resp) - 1);
 8001d90:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d94:	2110      	movs	r1, #16
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fb72 	bl	8001480 <addToResponse>
 8001d9c:	e095      	b.n	8001eca <BUFN+0x25a>
               return;
           }
           end = end * 10 + (cmdData[i] - '0');
 8001d9e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 8001da2:	461a      	mov	r2, r3
 8001da4:	0092      	lsls	r2, r2, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	f897 20b2 	ldrb.w	r2, [r7, #178]	@ 0xb2
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	440a      	add	r2, r1
 8001db4:	7812      	ldrb	r2, [r2, #0]
 8001db6:	4413      	add	r3, r2
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	3b30      	subs	r3, #48	@ 0x30
 8001dbc:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
       for (uint8_t i = 9; i < 12; i++) {
 8001dc0:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	f887 30b2 	strb.w	r3, [r7, #178]	@ 0xb2
 8001dca:	f897 30b2 	ldrb.w	r3, [r7, #178]	@ 0xb2
 8001dce:	2b0b      	cmp	r3, #11
 8001dd0:	d9c9      	bls.n	8001d66 <BUFN+0xf6>
       }
       if (start > 500 || end > 500 || start > end) {
 8001dd2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 8001dd6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001dda:	d80a      	bhi.n	8001df2 <BUFN+0x182>
 8001ddc:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 8001de0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001de4:	d805      	bhi.n	8001df2 <BUFN+0x182>
 8001de6:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	@ 0xb6
 8001dea:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d912      	bls.n	8001e18 <BUFN+0x1a8>
           uint8_t resp[] = "BUFN INVALID RANGE";
 8001df2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee0 <BUFN+0x270>)
 8001df4:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001df8:	461d      	mov	r5, r3
 8001dfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dfe:	682b      	ldr	r3, [r5, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	8022      	strh	r2, [r4, #0]
 8001e04:	3402      	adds	r4, #2
 8001e06:	0c1b      	lsrs	r3, r3, #16
 8001e08:	7023      	strb	r3, [r4, #0]
           addToResponse(resp, sizeof(resp) - 1);
 8001e0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e0e:	2112      	movs	r1, #18
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fb35 	bl	8001480 <addToResponse>
 8001e16:	e058      	b.n	8001eca <BUFN+0x25a>
           return;
       }
       uint16_t total = CircularBuffer_Size(&cb);
 8001e18:	4832      	ldr	r0, [pc, #200]	@ (8001ee4 <BUFN+0x274>)
 8001e1a:	f7ff f9b3 	bl	8001184 <CircularBuffer_Size>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	f8a7 30ae 	strh.w	r3, [r7, #174]	@ 0xae
       if (start >= total || end >= total) {
 8001e24:	f8b7 20b6 	ldrh.w	r2, [r7, #182]	@ 0xb6
 8001e28:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d205      	bcs.n	8001e3c <BUFN+0x1cc>
 8001e30:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	@ 0xb4
 8001e34:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	@ 0xae
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d312      	bcc.n	8001e62 <BUFN+0x1f2>
           uint8_t resp[] = "BUFN INVALID RANGE";
 8001e3c:	4b28      	ldr	r3, [pc, #160]	@ (8001ee0 <BUFN+0x270>)
 8001e3e:	f107 0410 	add.w	r4, r7, #16
 8001e42:	461d      	mov	r5, r3
 8001e44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e48:	682b      	ldr	r3, [r5, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	8022      	strh	r2, [r4, #0]
 8001e4e:	3402      	adds	r4, #2
 8001e50:	0c1b      	lsrs	r3, r3, #16
 8001e52:	7023      	strb	r3, [r4, #0]
           addToResponse(resp, sizeof(resp) - 1);
 8001e54:	f107 0310 	add.w	r3, r7, #16
 8001e58:	2112      	movs	r1, #18
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fb10 	bl	8001480 <addToResponse>
 8001e60:	e033      	b.n	8001eca <BUFN+0x25a>
           return;
       }
       char outStr[32];
       for (uint16_t i = start; i <= end; i++) {
 8001e62:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	@ 0xb6
 8001e66:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
 8001e6a:	e028      	b.n	8001ebe <BUFN+0x24e>
           float value;
           if (CircularBuffer_Peek(&cb, i, &value)) {
 8001e6c:	f107 020c 	add.w	r2, r7, #12
 8001e70:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8001e74:	4619      	mov	r1, r3
 8001e76:	481b      	ldr	r0, [pc, #108]	@ (8001ee4 <BUFN+0x274>)
 8001e78:	f7ff f992 	bl	80011a0 <CircularBuffer_Peek>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d018      	beq.n	8001eb4 <BUFN+0x244>
               int len = snprintf(outStr, sizeof(outStr), "%.2f ", value);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7fe fb7f 	bl	8000588 <__aeabi_f2d>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001e92:	e9cd 2300 	strd	r2, r3, [sp]
 8001e96:	4a14      	ldr	r2, [pc, #80]	@ (8001ee8 <BUFN+0x278>)
 8001e98:	2120      	movs	r1, #32
 8001e9a:	f006 fdcb 	bl	8008a34 <sniprintf>
 8001e9e:	f8c7 00a8 	str.w	r0, [r7, #168]	@ 0xa8
               addToResponse((uint8_t*)outStr, (uint8_t)len);
 8001ea2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001eac:	4611      	mov	r1, r2
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fae6 	bl	8001480 <addToResponse>
       for (uint16_t i = start; i <= end; i++) {
 8001eb4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8001eb8:	3301      	adds	r3, #1
 8001eba:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0
 8001ebe:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	@ 0xb0
 8001ec2:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d9d0      	bls.n	8001e6c <BUFN+0x1fc>
           }
       }
   }
 8001eca:	37b8      	adds	r7, #184	@ 0xb8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bdb0      	pop	{r4, r5, r7, pc}
 8001ed0:	0800ade8 	.word	0x0800ade8
 8001ed4:	0800aeb0 	.word	0x0800aeb0
 8001ed8:	0800adfc 	.word	0x0800adfc
 8001edc:	0800ae10 	.word	0x0800ae10
 8001ee0:	0800ae24 	.word	0x0800ae24
 8001ee4:	20003328 	.word	0x20003328
 8001ee8:	0800add8 	.word	0x0800add8

08001eec <processCommand>:

void processCommand(uint8_t *cmdData, uint16_t length) {
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	807b      	strh	r3, [r7, #2]

    if (length >= 5 && ((memcmp(cmdData, "SET1[", 5) == 0) || (memcmp(cmdData, "SET2[", 5) == 0))) {
 8001ef8:	887b      	ldrh	r3, [r7, #2]
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d915      	bls.n	8001f2a <processCommand+0x3e>
 8001efe:	2205      	movs	r2, #5
 8001f00:	4950      	ldr	r1, [pc, #320]	@ (8002044 <processCommand+0x158>)
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f006 fe0d 	bl	8008b22 <memcmp>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d007      	beq.n	8001f1e <processCommand+0x32>
 8001f0e:	2205      	movs	r2, #5
 8001f10:	494d      	ldr	r1, [pc, #308]	@ (8002048 <processCommand+0x15c>)
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f006 fe05 	bl	8008b22 <memcmp>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d105      	bne.n	8001f2a <processCommand+0x3e>
        SET1or2(cmdData, length);
 8001f1e:	887b      	ldrh	r3, [r7, #2]
 8001f20:	4619      	mov	r1, r3
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff fb1a 	bl	800155c <SET1or2>
 8001f28:	e088      	b.n	800203c <processCommand+0x150>
    } else if (length >= 7 && (memcmp(cmdData, "ADDDMA[", 7) == 0)) {
 8001f2a:	887b      	ldrh	r3, [r7, #2]
 8001f2c:	2b06      	cmp	r3, #6
 8001f2e:	d90d      	bls.n	8001f4c <processCommand+0x60>
 8001f30:	2207      	movs	r2, #7
 8001f32:	4946      	ldr	r1, [pc, #280]	@ (800204c <processCommand+0x160>)
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f006 fdf4 	bl	8008b22 <memcmp>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d105      	bne.n	8001f4c <processCommand+0x60>
        ADDDMA(cmdData, length);
 8001f40:	887b      	ldrh	r3, [r7, #2]
 8001f42:	4619      	mov	r1, r3
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff fbff 	bl	8001748 <ADDDMA>
 8001f4a:	e077      	b.n	800203c <processCommand+0x150>
    } else if (length >= 6 && (memcmp(cmdData, "SAUTO[", 6) == 0)) {
 8001f4c:	887b      	ldrh	r3, [r7, #2]
 8001f4e:	2b05      	cmp	r3, #5
 8001f50:	d90d      	bls.n	8001f6e <processCommand+0x82>
 8001f52:	2206      	movs	r2, #6
 8001f54:	493e      	ldr	r1, [pc, #248]	@ (8002050 <processCommand+0x164>)
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f006 fde3 	bl	8008b22 <memcmp>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d105      	bne.n	8001f6e <processCommand+0x82>
        SAUTO(cmdData, length);
 8001f62:	887b      	ldrh	r3, [r7, #2]
 8001f64:	4619      	mov	r1, r3
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff fc9c 	bl	80018a4 <SAUTO>
 8001f6c:	e066      	b.n	800203c <processCommand+0x150>
    } else if (length >= 3 && (memcmp(cmdData, "UA?", 3) == 0)) {
 8001f6e:	887b      	ldrh	r3, [r7, #2]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d90d      	bls.n	8001f90 <processCommand+0xa4>
 8001f74:	2203      	movs	r2, #3
 8001f76:	4937      	ldr	r1, [pc, #220]	@ (8002054 <processCommand+0x168>)
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f006 fdd2 	bl	8008b22 <memcmp>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d105      	bne.n	8001f90 <processCommand+0xa4>
        UA(cmdData, length);
 8001f84:	887b      	ldrh	r3, [r7, #2]
 8001f86:	4619      	mov	r1, r3
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff fcdf 	bl	800194c <UA>
 8001f8e:	e055      	b.n	800203c <processCommand+0x150>
    } else if (length >= 3 && (memcmp(cmdData, "UA[", 3) == 0)) {
 8001f90:	887b      	ldrh	r3, [r7, #2]
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d90d      	bls.n	8001fb2 <processCommand+0xc6>
 8001f96:	2203      	movs	r2, #3
 8001f98:	492f      	ldr	r1, [pc, #188]	@ (8002058 <processCommand+0x16c>)
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f006 fdc1 	bl	8008b22 <memcmp>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d105      	bne.n	8001fb2 <processCommand+0xc6>
        UAxxx(cmdData, length);
 8001fa6:	887b      	ldrh	r3, [r7, #2]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff fd32 	bl	8001a14 <UAxxx>
 8001fb0:	e044      	b.n	800203c <processCommand+0x150>
    } else if (length >= 6 && (memcmp(cmdData, "BUFALL", 6) == 0)) {
 8001fb2:	887b      	ldrh	r3, [r7, #2]
 8001fb4:	2b05      	cmp	r3, #5
 8001fb6:	d90d      	bls.n	8001fd4 <processCommand+0xe8>
 8001fb8:	2206      	movs	r2, #6
 8001fba:	4928      	ldr	r1, [pc, #160]	@ (800205c <processCommand+0x170>)
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f006 fdb0 	bl	8008b22 <memcmp>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d105      	bne.n	8001fd4 <processCommand+0xe8>
        BUFALL(cmdData, length);
 8001fc8:	887b      	ldrh	r3, [r7, #2]
 8001fca:	4619      	mov	r1, r3
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff fdf7 	bl	8001bc0 <BUFALL>
 8001fd2:	e033      	b.n	800203c <processCommand+0x150>
    } else if (length >= 5 && (memcmp(cmdData, "BUFN[", 5) == 0)) {
 8001fd4:	887b      	ldrh	r3, [r7, #2]
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	d90d      	bls.n	8001ff6 <processCommand+0x10a>
 8001fda:	2205      	movs	r2, #5
 8001fdc:	4920      	ldr	r1, [pc, #128]	@ (8002060 <processCommand+0x174>)
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f006 fd9f 	bl	8008b22 <memcmp>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d105      	bne.n	8001ff6 <processCommand+0x10a>
        BUFN(cmdData, length);
 8001fea:	887b      	ldrh	r3, [r7, #2]
 8001fec:	4619      	mov	r1, r3
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff fe3e 	bl	8001c70 <BUFN>
 8001ff4:	e022      	b.n	800203c <processCommand+0x150>
    } else if (length >= 3 && (memcmp(cmdData, "BUF", 3) == 0)) {
 8001ff6:	887b      	ldrh	r3, [r7, #2]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d90d      	bls.n	8002018 <processCommand+0x12c>
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	4919      	ldr	r1, [pc, #100]	@ (8002064 <processCommand+0x178>)
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f006 fd8e 	bl	8008b22 <memcmp>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d105      	bne.n	8002018 <processCommand+0x12c>
        BUF(cmdData, length);
 800200c:	887b      	ldrh	r3, [r7, #2]
 800200e:	4619      	mov	r1, r3
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff fd75 	bl	8001b00 <BUF>
 8002016:	e011      	b.n	800203c <processCommand+0x150>
    } else {
        uint8_t resp[] = "ERROR ";
 8002018:	4a13      	ldr	r2, [pc, #76]	@ (8002068 <processCommand+0x17c>)
 800201a:	f107 0308 	add.w	r3, r7, #8
 800201e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002022:	6018      	str	r0, [r3, #0]
 8002024:	3304      	adds	r3, #4
 8002026:	8019      	strh	r1, [r3, #0]
 8002028:	3302      	adds	r3, #2
 800202a:	0c0a      	lsrs	r2, r1, #16
 800202c:	701a      	strb	r2, [r3, #0]
        addToResponse(resp, sizeof(resp) - 1);
 800202e:	f107 0308 	add.w	r3, r7, #8
 8002032:	2106      	movs	r1, #6
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fa23 	bl	8001480 <addToResponse>
    }
}
 800203a:	bf00      	nop
 800203c:	bf00      	nop
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	0800ae38 	.word	0x0800ae38
 8002048:	0800ae40 	.word	0x0800ae40
 800204c:	0800ae48 	.word	0x0800ae48
 8002050:	0800ae50 	.word	0x0800ae50
 8002054:	0800ae58 	.word	0x0800ae58
 8002058:	0800ae5c 	.word	0x0800ae5c
 800205c:	0800ae60 	.word	0x0800ae60
 8002060:	0800ae68 	.word	0x0800ae68
 8002064:	0800ae70 	.word	0x0800ae70
 8002068:	0800ad38 	.word	0x0800ad38

0800206c <processMultipleCommands>:
void processMultipleCommands(uint8_t *cmdData, uint16_t totalLength) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]
    uint16_t pos = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	81fb      	strh	r3, [r7, #14]
    while (pos < totalLength) {
 800207c:	e02f      	b.n	80020de <processMultipleCommands+0x72>
        // Pomijam bajty separatora (0x3B to ';' w ASCII)
        while (pos < totalLength && cmdData[pos] == 0x3B) {
            pos++;
 800207e:	89fb      	ldrh	r3, [r7, #14]
 8002080:	3301      	adds	r3, #1
 8002082:	81fb      	strh	r3, [r7, #14]
        while (pos < totalLength && cmdData[pos] == 0x3B) {
 8002084:	89fa      	ldrh	r2, [r7, #14]
 8002086:	887b      	ldrh	r3, [r7, #2]
 8002088:	429a      	cmp	r2, r3
 800208a:	d205      	bcs.n	8002098 <processMultipleCommands+0x2c>
 800208c:	89fb      	ldrh	r3, [r7, #14]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	4413      	add	r3, r2
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b3b      	cmp	r3, #59	@ 0x3b
 8002096:	d0f2      	beq.n	800207e <processMultipleCommands+0x12>
        }
        if (pos >= totalLength)
 8002098:	89fa      	ldrh	r2, [r7, #14]
 800209a:	887b      	ldrh	r3, [r7, #2]
 800209c:	429a      	cmp	r2, r3
 800209e:	d223      	bcs.n	80020e8 <processMultipleCommands+0x7c>
            break;

        uint16_t start = pos;
 80020a0:	89fb      	ldrh	r3, [r7, #14]
 80020a2:	81bb      	strh	r3, [r7, #12]
        // Szuka separatora lub końca bufora
        while (pos < totalLength && cmdData[pos] != 0x3B) {
 80020a4:	e002      	b.n	80020ac <processMultipleCommands+0x40>
            pos++;
 80020a6:	89fb      	ldrh	r3, [r7, #14]
 80020a8:	3301      	adds	r3, #1
 80020aa:	81fb      	strh	r3, [r7, #14]
        while (pos < totalLength && cmdData[pos] != 0x3B) {
 80020ac:	89fa      	ldrh	r2, [r7, #14]
 80020ae:	887b      	ldrh	r3, [r7, #2]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d205      	bcs.n	80020c0 <processMultipleCommands+0x54>
 80020b4:	89fb      	ldrh	r3, [r7, #14]
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b3b      	cmp	r3, #59	@ 0x3b
 80020be:	d1f2      	bne.n	80020a6 <processMultipleCommands+0x3a>
        }
        uint16_t cmdLength = pos - start;
 80020c0:	89fa      	ldrh	r2, [r7, #14]
 80020c2:	89bb      	ldrh	r3, [r7, #12]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	817b      	strh	r3, [r7, #10]
        if (cmdLength > 0) {
 80020c8:	897b      	ldrh	r3, [r7, #10]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d007      	beq.n	80020de <processMultipleCommands+0x72>
            processCommand(&cmdData[start], cmdLength);  // Przekazuje surowe bajty
 80020ce:	89bb      	ldrh	r3, [r7, #12]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	4413      	add	r3, r2
 80020d4:	897a      	ldrh	r2, [r7, #10]
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff ff07 	bl	8001eec <processCommand>
    while (pos < totalLength) {
 80020de:	89fa      	ldrh	r2, [r7, #14]
 80020e0:	887b      	ldrh	r3, [r7, #2]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d3ce      	bcc.n	8002084 <processMultipleCommands+0x18>
        }
    }
}
 80020e6:	e000      	b.n	80020ea <processMultipleCommands+0x7e>
            break;
 80020e8:	bf00      	nop
}
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <HDLC_ParseFrame>:

void HDLC_ParseFrame(const uint8_t* frame, uint16_t length) {
 80020f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80020f8:	b091      	sub	sp, #68	@ 0x44
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	460b      	mov	r3, r1
 8002100:	807b      	strh	r3, [r7, #2]
 8002102:	466b      	mov	r3, sp
 8002104:	461e      	mov	r6, r3
    if (length < HDLC_MIN_FRAME_SIZE)
 8002106:	887b      	ldrh	r3, [r7, #2]
 8002108:	2b05      	cmp	r3, #5
 800210a:	f240 80c2 	bls.w	8002292 <HDLC_ParseFrame+0x19e>
        return;

    uint8_t addrSrc = frame[0];
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    uint8_t addrDst = frame[1];
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3301      	adds	r3, #1
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    uint16_t dataLen = (frame[2] << 8) | frame[3];
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3302      	adds	r3, #2
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	021b      	lsls	r3, r3, #8
 8002128:	b21a      	sxth	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3303      	adds	r3, #3
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	b21b      	sxth	r3, r3
 8002132:	4313      	orrs	r3, r2
 8002134:	b21b      	sxth	r3, r3
 8002136:	87bb      	strh	r3, [r7, #60]	@ 0x3c

    if (dataLen + 5 > length) {
 8002138:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800213a:	1d1a      	adds	r2, r3, #4
 800213c:	887b      	ldrh	r3, [r7, #2]
 800213e:	429a      	cmp	r2, r3
 8002140:	db0f      	blt.n	8002162 <HDLC_ParseFrame+0x6e>
        uint8_t message[] = "LEN NOT MATCH";
 8002142:	4b56      	ldr	r3, [pc, #344]	@ (800229c <HDLC_ParseFrame+0x1a8>)
 8002144:	f107 0418 	add.w	r4, r7, #24
 8002148:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800214a:	c407      	stmia	r4!, {r0, r1, r2}
 800214c:	8023      	strh	r3, [r4, #0]
        HDLC_SendFrame(addrSrc, addrDst, message, sizeof(message) - 1);
 800214e:	f107 0218 	add.w	r2, r7, #24
 8002152:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 8002156:	f897 003f 	ldrb.w	r0, [r7, #63]	@ 0x3f
 800215a:	230d      	movs	r3, #13
 800215c:	f000 f932 	bl	80023c4 <HDLC_SendFrame>
 8002160:	e097      	b.n	8002292 <HDLC_ParseFrame+0x19e>
        return;
    }

    const uint8_t* dataPtr = &frame[4];
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3304      	adds	r3, #4
 8002166:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint8_t crcRecv = frame[4 + dataLen];
 8002168:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800216a:	3304      	adds	r3, #4
 800216c:	461a      	mov	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4413      	add	r3, r2
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    // Przygotowanie bufora do obliczenia CRC
    uint8_t tempBuf[4 + dataLen];
 8002178:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800217a:	1d19      	adds	r1, r3, #4
 800217c:	1e4b      	subs	r3, r1, #1
 800217e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002180:	460a      	mov	r2, r1
 8002182:	2300      	movs	r3, #0
 8002184:	4690      	mov	r8, r2
 8002186:	4699      	mov	r9, r3
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002194:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002198:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800219c:	460a      	mov	r2, r1
 800219e:	2300      	movs	r3, #0
 80021a0:	4614      	mov	r4, r2
 80021a2:	461d      	mov	r5, r3
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	00eb      	lsls	r3, r5, #3
 80021ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021b2:	00e2      	lsls	r2, r4, #3
 80021b4:	460b      	mov	r3, r1
 80021b6:	3307      	adds	r3, #7
 80021b8:	08db      	lsrs	r3, r3, #3
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	ebad 0d03 	sub.w	sp, sp, r3
 80021c0:	466b      	mov	r3, sp
 80021c2:	3300      	adds	r3, #0
 80021c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tempBuf[0] = addrSrc;
 80021c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021c8:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80021cc:	701a      	strb	r2, [r3, #0]
    tempBuf[1] = addrDst;
 80021ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021d0:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 80021d4:	705a      	strb	r2, [r3, #1]
    tempBuf[2] = frame[2];
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3302      	adds	r3, #2
 80021da:	781a      	ldrb	r2, [r3, #0]
 80021dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021de:	709a      	strb	r2, [r3, #2]
    tempBuf[3] = frame[3];
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3303      	adds	r3, #3
 80021e4:	781a      	ldrb	r2, [r3, #0]
 80021e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021e8:	70da      	strb	r2, [r3, #3]
    memcpy(&tempBuf[4], dataPtr, dataLen);
 80021ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ec:	3304      	adds	r3, #4
 80021ee:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80021f0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80021f2:	4618      	mov	r0, r3
 80021f4:	f006 fd25 	bl	8008c42 <memcpy>

    // Oblicz CRC
    uint8_t crcCalc = computeCRC8(tempBuf, 4 + dataLen);
 80021f8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80021fa:	3304      	adds	r3, #4
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	4619      	mov	r1, r3
 8002200:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002202:	f7ff f864 	bl	80012ce <computeCRC8>
 8002206:	4603      	mov	r3, r0
 8002208:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (crcCalc != crcRecv) {
 800220c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8002210:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002214:	429a      	cmp	r2, r3
 8002216:	d00f      	beq.n	8002238 <HDLC_ParseFrame+0x144>
        uint8_t message[] = "INVALID CRC";
 8002218:	4a21      	ldr	r2, [pc, #132]	@ (80022a0 <HDLC_ParseFrame+0x1ac>)
 800221a:	f107 030c 	add.w	r3, r7, #12
 800221e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002220:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        HDLC_SendFrame(addrSrc, addrDst, message, sizeof(message) - 1);
 8002224:	f107 020c 	add.w	r2, r7, #12
 8002228:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 800222c:	f897 003f 	ldrb.w	r0, [r7, #63]	@ 0x3f
 8002230:	230b      	movs	r3, #11
 8002232:	f000 f8c7 	bl	80023c4 <HDLC_SendFrame>
 8002236:	e02c      	b.n	8002292 <HDLC_ParseFrame+0x19e>
        return;
    }

    static uint8_t cmdBuff[MAX_DATA_LEN];
    if (dataLen >= MAX_DATA_LEN)  // Zabezpieczenie przed przepełnieniem
 8002238:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800223a:	f640 52ab 	movw	r2, #3499	@ 0xdab
 800223e:	4293      	cmp	r3, r2
 8002240:	d826      	bhi.n	8002290 <HDLC_ParseFrame+0x19c>
        return;

    uint16_t cmdLen = dataLen;
 8002242:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8002244:	853b      	strh	r3, [r7, #40]	@ 0x28
    memcpy(cmdBuff, dataPtr, cmdLen);
 8002246:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002248:	461a      	mov	r2, r3
 800224a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800224c:	4815      	ldr	r0, [pc, #84]	@ (80022a4 <HDLC_ParseFrame+0x1b0>)
 800224e:	f006 fcf8 	bl	8008c42 <memcpy>

    // Przetwarzam wiele komend oddzielonych średnikiem
    processMultipleCommands(cmdBuff, cmdLen);
 8002252:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002254:	4619      	mov	r1, r3
 8002256:	4813      	ldr	r0, [pc, #76]	@ (80022a4 <HDLC_ParseFrame+0x1b0>)
 8002258:	f7ff ff08 	bl	800206c <processMultipleCommands>

    // Jeśli bufor odpowiedzi zawiera same "ERROR", ramka jest odrzucana
    if (!allResponsesAreError()) {
 800225c:	f7ff f936 	bl	80014cc <allResponsesAreError>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d112      	bne.n	800228c <HDLC_ParseFrame+0x198>
        HDLC_SendFrame(addrSrc, addrDst, tempbufanswer, (uint16_t)bufIndex);
 8002266:	4b10      	ldr	r3, [pc, #64]	@ (80022a8 <HDLC_ParseFrame+0x1b4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	b29b      	uxth	r3, r3
 800226c:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 8002270:	f897 003f 	ldrb.w	r0, [r7, #63]	@ 0x3f
 8002274:	4a0d      	ldr	r2, [pc, #52]	@ (80022ac <HDLC_ParseFrame+0x1b8>)
 8002276:	f000 f8a5 	bl	80023c4 <HDLC_SendFrame>

        // Reset bufora
        memset(tempbufanswer, 0, sizeof(tempbufanswer));
 800227a:	f640 52ac 	movw	r2, #3500	@ 0xdac
 800227e:	2100      	movs	r1, #0
 8002280:	480a      	ldr	r0, [pc, #40]	@ (80022ac <HDLC_ParseFrame+0x1b8>)
 8002282:	f006 fc5e 	bl	8008b42 <memset>
        bufIndex = 0;
 8002286:	4b08      	ldr	r3, [pc, #32]	@ (80022a8 <HDLC_ParseFrame+0x1b4>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	46b5      	mov	sp, r6
 800228e:	e001      	b.n	8002294 <HDLC_ParseFrame+0x1a0>
        return;
 8002290:	bf00      	nop
        return;
 8002292:	46b5      	mov	sp, r6
    }
}
 8002294:	3744      	adds	r7, #68	@ 0x44
 8002296:	46bd      	mov	sp, r7
 8002298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800229c:	0800ae74 	.word	0x0800ae74
 80022a0:	0800ae84 	.word	0x0800ae84
 80022a4:	200042d8 	.word	0x200042d8
 80022a8:	200042d0 	.word	0x200042d0
 80022ac:	20003524 	.word	0x20003524

080022b0 <HDLC_ProcessInput>:




	int8_t HDLC_ProcessInput(void)
	{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
	    while (USART_kbhit())
 80022b6:	e074      	b.n	80023a2 <HDLC_ProcessInput+0xf2>
	    {
	        uint8_t rxByte = (uint8_t)USART_getchar();
 80022b8:	f7ff f856 	bl	8001368 <USART_getchar>
 80022bc:	4603      	mov	r3, r0
 80022be:	71bb      	strb	r3, [r7, #6]

	        // sprawdzenie czy bufor jest pełny
	        if (hdlcInPos >= HDLC_MAX_FRAME_SIZE)
 80022c0:	4b3d      	ldr	r3, [pc, #244]	@ (80023b8 <HDLC_ProcessInput+0x108>)
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	f640 52b1 	movw	r2, #3505	@ 0xdb1
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d906      	bls.n	80022da <HDLC_ProcessInput+0x2a>
	           {
	               hdlcRxState = WAITING_FOR_FLAG;
 80022cc:	4b3b      	ldr	r3, [pc, #236]	@ (80023bc <HDLC_ProcessInput+0x10c>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]
	               hdlcInPos = 0;
 80022d2:	4b39      	ldr	r3, [pc, #228]	@ (80023b8 <HDLC_ProcessInput+0x108>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	801a      	strh	r2, [r3, #0]
	               continue;
 80022d8:	e063      	b.n	80023a2 <HDLC_ProcessInput+0xf2>
	           }

	           switch (hdlcRxState)
 80022da:	4b38      	ldr	r3, [pc, #224]	@ (80023bc <HDLC_ProcessInput+0x10c>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d036      	beq.n	8002350 <HDLC_ProcessInput+0xa0>
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	dc55      	bgt.n	8002392 <HDLC_ProcessInput+0xe2>
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d002      	beq.n	80022f0 <HDLC_ProcessInput+0x40>
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d00a      	beq.n	8002304 <HDLC_ProcessInput+0x54>
 80022ee:	e050      	b.n	8002392 <HDLC_ProcessInput+0xe2>
	           {
	               case WAITING_FOR_FLAG:
	                   if (rxByte == HDLC_FLAG)
 80022f0:	79bb      	ldrb	r3, [r7, #6]
 80022f2:	2b7e      	cmp	r3, #126	@ 0x7e
 80022f4:	d154      	bne.n	80023a0 <HDLC_ProcessInput+0xf0>
	                   {
	                       // Flaga oznacza początek ramki
	                       hdlcInPos = 0;
 80022f6:	4b30      	ldr	r3, [pc, #192]	@ (80023b8 <HDLC_ProcessInput+0x108>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	801a      	strh	r2, [r3, #0]
	                       hdlcRxState = READING_FRAME;
 80022fc:	4b2f      	ldr	r3, [pc, #188]	@ (80023bc <HDLC_ProcessInput+0x10c>)
 80022fe:	2201      	movs	r2, #1
 8002300:	701a      	strb	r2, [r3, #0]
	                   }
	                   break;
 8002302:	e04d      	b.n	80023a0 <HDLC_ProcessInput+0xf0>

	               case READING_FRAME:
	                   if (rxByte == HDLC_FLAG)
 8002304:	79bb      	ldrb	r3, [r7, #6]
 8002306:	2b7e      	cmp	r3, #126	@ 0x7e
 8002308:	d110      	bne.n	800232c <HDLC_ProcessInput+0x7c>
	                   {
	                       // Otrzymano flagę - traktujemy ją jako koniec bieżącej ramki
	                       if (hdlcInPos > 0)
 800230a:	4b2b      	ldr	r3, [pc, #172]	@ (80023b8 <HDLC_ProcessInput+0x108>)
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d005      	beq.n	800231e <HDLC_ProcessInput+0x6e>
	                       {
	                           HDLC_ParseFrame(hdlcInBuf, hdlcInPos);
 8002312:	4b29      	ldr	r3, [pc, #164]	@ (80023b8 <HDLC_ProcessInput+0x108>)
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	4619      	mov	r1, r3
 8002318:	4829      	ldr	r0, [pc, #164]	@ (80023c0 <HDLC_ProcessInput+0x110>)
 800231a:	f7ff feeb 	bl	80020f4 <HDLC_ParseFrame>
	                       }
	                       // Resetuj bufor, ale ustaw stan na READING_FRAME,
	                       // bo ten sam bajt 0x7E ma być traktowany jako początek nowej ramki
	                       hdlcInPos = 0;
 800231e:	4b26      	ldr	r3, [pc, #152]	@ (80023b8 <HDLC_ProcessInput+0x108>)
 8002320:	2200      	movs	r2, #0
 8002322:	801a      	strh	r2, [r3, #0]
	                       hdlcRxState = READING_FRAME;
 8002324:	4b25      	ldr	r3, [pc, #148]	@ (80023bc <HDLC_ProcessInput+0x10c>)
 8002326:	2201      	movs	r2, #1
 8002328:	701a      	strb	r2, [r3, #0]
	                   }
	                   else
	                   {
	                       hdlcInBuf[hdlcInPos++] = rxByte;
	                   }
	                   break;
 800232a:	e03a      	b.n	80023a2 <HDLC_ProcessInput+0xf2>
	                   else if (rxByte == HDLC_ESCAPE)
 800232c:	79bb      	ldrb	r3, [r7, #6]
 800232e:	2b7d      	cmp	r3, #125	@ 0x7d
 8002330:	d103      	bne.n	800233a <HDLC_ProcessInput+0x8a>
	                       hdlcRxState = ESCAPING_BYTE;
 8002332:	4b22      	ldr	r3, [pc, #136]	@ (80023bc <HDLC_ProcessInput+0x10c>)
 8002334:	2202      	movs	r2, #2
 8002336:	701a      	strb	r2, [r3, #0]
	                   break;
 8002338:	e033      	b.n	80023a2 <HDLC_ProcessInput+0xf2>
	                       hdlcInBuf[hdlcInPos++] = rxByte;
 800233a:	4b1f      	ldr	r3, [pc, #124]	@ (80023b8 <HDLC_ProcessInput+0x108>)
 800233c:	881b      	ldrh	r3, [r3, #0]
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	b291      	uxth	r1, r2
 8002342:	4a1d      	ldr	r2, [pc, #116]	@ (80023b8 <HDLC_ProcessInput+0x108>)
 8002344:	8011      	strh	r1, [r2, #0]
 8002346:	4619      	mov	r1, r3
 8002348:	4a1d      	ldr	r2, [pc, #116]	@ (80023c0 <HDLC_ProcessInput+0x110>)
 800234a:	79bb      	ldrb	r3, [r7, #6]
 800234c:	5453      	strb	r3, [r2, r1]
	                   break;
 800234e:	e028      	b.n	80023a2 <HDLC_ProcessInput+0xf2>

	               case ESCAPING_BYTE:
	               {
	                   uint8_t decodedByte;
	                   if (rxByte == HDLC_ESCAPE_7E)
 8002350:	79bb      	ldrb	r3, [r7, #6]
 8002352:	2b5e      	cmp	r3, #94	@ 0x5e
 8002354:	d102      	bne.n	800235c <HDLC_ProcessInput+0xac>
	                       decodedByte = HDLC_FLAG;
 8002356:	237e      	movs	r3, #126	@ 0x7e
 8002358:	71fb      	strb	r3, [r7, #7]
 800235a:	e00c      	b.n	8002376 <HDLC_ProcessInput+0xc6>
	                   else if (rxByte == HDLC_ESCAPE_7D)
 800235c:	79bb      	ldrb	r3, [r7, #6]
 800235e:	2b5d      	cmp	r3, #93	@ 0x5d
 8002360:	d102      	bne.n	8002368 <HDLC_ProcessInput+0xb8>
	                       decodedByte = HDLC_ESCAPE;
 8002362:	237d      	movs	r3, #125	@ 0x7d
 8002364:	71fb      	strb	r3, [r7, #7]
 8002366:	e006      	b.n	8002376 <HDLC_ProcessInput+0xc6>
	                   else
	                   {
	                       // Błędna sekwencja escape – odrzucamy ramkę
	                       hdlcRxState = WAITING_FOR_FLAG;
 8002368:	4b14      	ldr	r3, [pc, #80]	@ (80023bc <HDLC_ProcessInput+0x10c>)
 800236a:	2200      	movs	r2, #0
 800236c:	701a      	strb	r2, [r3, #0]
	                       hdlcInPos = 0;
 800236e:	4b12      	ldr	r3, [pc, #72]	@ (80023b8 <HDLC_ProcessInput+0x108>)
 8002370:	2200      	movs	r2, #0
 8002372:	801a      	strh	r2, [r3, #0]
	                       break;
 8002374:	e015      	b.n	80023a2 <HDLC_ProcessInput+0xf2>
	                   }
	                   hdlcInBuf[hdlcInPos++] = decodedByte;
 8002376:	4b10      	ldr	r3, [pc, #64]	@ (80023b8 <HDLC_ProcessInput+0x108>)
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	b291      	uxth	r1, r2
 800237e:	4a0e      	ldr	r2, [pc, #56]	@ (80023b8 <HDLC_ProcessInput+0x108>)
 8002380:	8011      	strh	r1, [r2, #0]
 8002382:	4619      	mov	r1, r3
 8002384:	4a0e      	ldr	r2, [pc, #56]	@ (80023c0 <HDLC_ProcessInput+0x110>)
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	5453      	strb	r3, [r2, r1]
	                   //powracamy do stanu odbioru ramki
	                   hdlcRxState = READING_FRAME;
 800238a:	4b0c      	ldr	r3, [pc, #48]	@ (80023bc <HDLC_ProcessInput+0x10c>)
 800238c:	2201      	movs	r2, #1
 800238e:	701a      	strb	r2, [r3, #0]
	               }
	               break;
 8002390:	e007      	b.n	80023a2 <HDLC_ProcessInput+0xf2>

	               default:
	                   hdlcRxState = WAITING_FOR_FLAG;
 8002392:	4b0a      	ldr	r3, [pc, #40]	@ (80023bc <HDLC_ProcessInput+0x10c>)
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]
	                   hdlcInPos = 0;
 8002398:	4b07      	ldr	r3, [pc, #28]	@ (80023b8 <HDLC_ProcessInput+0x108>)
 800239a:	2200      	movs	r2, #0
 800239c:	801a      	strh	r2, [r3, #0]
	                   break;
 800239e:	e000      	b.n	80023a2 <HDLC_ProcessInput+0xf2>
	                   break;
 80023a0:	bf00      	nop
	    while (USART_kbhit())
 80023a2:	f7fe ffcd 	bl	8001340 <USART_kbhit>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d185      	bne.n	80022b8 <HDLC_ProcessInput+0x8>
	           }
	       }
	       return 0;
 80023ac:	2300      	movs	r3, #0
	}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	200032e6 	.word	0x200032e6
 80023bc:	20002530 	.word	0x20002530
 80023c0:	20002534 	.word	0x20002534

080023c4 <HDLC_SendFrame>:


	void HDLC_SendFrame(uint8_t addrSrc, uint8_t addrDst,
	                    const uint8_t* data, uint16_t dataLen)
	{
 80023c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80023c8:	f6ad 5dd4 	subw	sp, sp, #3540	@ 0xdd4
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4606      	mov	r6, r0
 80023d0:	4608      	mov	r0, r1
 80023d2:	f507 615d 	add.w	r1, r7, #3536	@ 0xdd0
 80023d6:	f5a1 615d 	sub.w	r1, r1, #3536	@ 0xdd0
 80023da:	600a      	str	r2, [r1, #0]
 80023dc:	4619      	mov	r1, r3
 80023de:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 80023e2:	f6a3 53c9 	subw	r3, r3, #3529	@ 0xdc9
 80023e6:	4632      	mov	r2, r6
 80023e8:	701a      	strb	r2, [r3, #0]
 80023ea:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 80023ee:	f6a3 53ca 	subw	r3, r3, #3530	@ 0xdca
 80023f2:	4602      	mov	r2, r0
 80023f4:	701a      	strb	r2, [r3, #0]
 80023f6:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 80023fa:	f6a3 53cc 	subw	r3, r3, #3532	@ 0xdcc
 80023fe:	460a      	mov	r2, r1
 8002400:	801a      	strh	r2, [r3, #0]
 8002402:	466b      	mov	r3, sp
 8002404:	461e      	mov	r6, r3
	    uint8_t outBuf[HDLC_MAX_FRAME_SIZE] = {0};
 8002406:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 800240a:	f5a3 635c 	sub.w	r3, r3, #3520	@ 0xdc0
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	3304      	adds	r3, #4
 8002414:	f640 52ae 	movw	r2, #3502	@ 0xdae
 8002418:	2100      	movs	r1, #0
 800241a:	4618      	mov	r0, r3
 800241c:	f006 fb91 	bl	8008b42 <memset>
	    uint16_t outPos = 0;
 8002420:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 8002424:	f6a3 53c2 	subw	r3, r3, #3522	@ 0xdc2
 8002428:	2200      	movs	r2, #0
 800242a:	801a      	strh	r2, [r3, #0]

	    // Dodaj flagę startu
	    outBuf[outPos++] = HDLC_FLAG;
 800242c:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 8002430:	f6a3 53c2 	subw	r3, r3, #3522	@ 0xdc2
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	1c5a      	adds	r2, r3, #1
 8002438:	b291      	uxth	r1, r2
 800243a:	f507 625d 	add.w	r2, r7, #3536	@ 0xdd0
 800243e:	f6a2 52c2 	subw	r2, r2, #3522	@ 0xdc2
 8002442:	8011      	strh	r1, [r2, #0]
 8002444:	461a      	mov	r2, r3
 8002446:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 800244a:	f5a3 635c 	sub.w	r3, r3, #3520	@ 0xdc0
 800244e:	217e      	movs	r1, #126	@ 0x7e
 8002450:	5499      	strb	r1, [r3, r2]

	    // Przygotowanie bufora do obliczenia CRC
	    uint8_t tempBuf[4 + dataLen];
 8002452:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 8002456:	f6a3 53cc 	subw	r3, r3, #3532	@ 0xdcc
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	1d19      	adds	r1, r3, #4
 800245e:	1e4b      	subs	r3, r1, #1
 8002460:	f8c7 3dc8 	str.w	r3, [r7, #3528]	@ 0xdc8
 8002464:	460a      	mov	r2, r1
 8002466:	2300      	movs	r3, #0
 8002468:	4690      	mov	r8, r2
 800246a:	4699      	mov	r9, r3
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	f04f 0300 	mov.w	r3, #0
 8002474:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002478:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800247c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002480:	460a      	mov	r2, r1
 8002482:	2300      	movs	r3, #0
 8002484:	4614      	mov	r4, r2
 8002486:	461d      	mov	r5, r3
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	00eb      	lsls	r3, r5, #3
 8002492:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002496:	00e2      	lsls	r2, r4, #3
 8002498:	460b      	mov	r3, r1
 800249a:	3307      	adds	r3, #7
 800249c:	08db      	lsrs	r3, r3, #3
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	ebad 0d03 	sub.w	sp, sp, r3
 80024a4:	466b      	mov	r3, sp
 80024a6:	3300      	adds	r3, #0
 80024a8:	f8c7 3dc4 	str.w	r3, [r7, #3524]	@ 0xdc4
	    tempBuf[0] = addrDst;
 80024ac:	f8d7 3dc4 	ldr.w	r3, [r7, #3524]	@ 0xdc4
 80024b0:	f507 625d 	add.w	r2, r7, #3536	@ 0xdd0
 80024b4:	f6a2 52ca 	subw	r2, r2, #3530	@ 0xdca
 80024b8:	7812      	ldrb	r2, [r2, #0]
 80024ba:	701a      	strb	r2, [r3, #0]
	    tempBuf[1] = addrSrc;
 80024bc:	f8d7 3dc4 	ldr.w	r3, [r7, #3524]	@ 0xdc4
 80024c0:	f507 625d 	add.w	r2, r7, #3536	@ 0xdd0
 80024c4:	f6a2 52c9 	subw	r2, r2, #3529	@ 0xdc9
 80024c8:	7812      	ldrb	r2, [r2, #0]
 80024ca:	705a      	strb	r2, [r3, #1]
	    tempBuf[2] = (uint8_t)(dataLen >> 8);
 80024cc:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 80024d0:	f6a3 53cc 	subw	r3, r3, #3532	@ 0xdcc
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	0a1b      	lsrs	r3, r3, #8
 80024d8:	b29b      	uxth	r3, r3
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	f8d7 3dc4 	ldr.w	r3, [r7, #3524]	@ 0xdc4
 80024e0:	709a      	strb	r2, [r3, #2]
	    tempBuf[3] = (uint8_t)(dataLen & 0xFF); //0xff = 255 to "filtr" & i pozostawia 8 bitów
 80024e2:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 80024e6:	f6a3 53cc 	subw	r3, r3, #3532	@ 0xdcc
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	f8d7 3dc4 	ldr.w	r3, [r7, #3524]	@ 0xdc4
 80024f2:	70da      	strb	r2, [r3, #3]
	    memcpy(&tempBuf[4], data, dataLen);
 80024f4:	f8d7 3dc4 	ldr.w	r3, [r7, #3524]	@ 0xdc4
 80024f8:	1d18      	adds	r0, r3, #4
 80024fa:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 80024fe:	f6a3 53cc 	subw	r3, r3, #3532	@ 0xdcc
 8002502:	881a      	ldrh	r2, [r3, #0]
 8002504:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 8002508:	f5a3 635d 	sub.w	r3, r3, #3536	@ 0xdd0
 800250c:	6819      	ldr	r1, [r3, #0]
 800250e:	f006 fb98 	bl	8008c42 <memcpy>


	    // Dodaj adresy, długość i dane z escapowaniem
	    escapeByte(addrDst, outBuf, &outPos, HDLC_MAX_FRAME_SIZE);
 8002512:	f107 020e 	add.w	r2, r7, #14
 8002516:	f107 0110 	add.w	r1, r7, #16
 800251a:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 800251e:	f6a3 53ca 	subw	r3, r3, #3530	@ 0xdca
 8002522:	7818      	ldrb	r0, [r3, #0]
 8002524:	f640 53b2 	movw	r3, #3506	@ 0xdb2
 8002528:	f7fe fe70 	bl	800120c <escapeByte>
	    escapeByte(addrSrc, outBuf, &outPos, HDLC_MAX_FRAME_SIZE);
 800252c:	f107 020e 	add.w	r2, r7, #14
 8002530:	f107 0110 	add.w	r1, r7, #16
 8002534:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 8002538:	f6a3 53c9 	subw	r3, r3, #3529	@ 0xdc9
 800253c:	7818      	ldrb	r0, [r3, #0]
 800253e:	f640 53b2 	movw	r3, #3506	@ 0xdb2
 8002542:	f7fe fe63 	bl	800120c <escapeByte>
	    escapeByte((uint8_t)(dataLen >> 8), outBuf, &outPos, HDLC_MAX_FRAME_SIZE);
 8002546:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 800254a:	f6a3 53cc 	subw	r3, r3, #3532	@ 0xdcc
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	0a1b      	lsrs	r3, r3, #8
 8002552:	b29b      	uxth	r3, r3
 8002554:	b2d8      	uxtb	r0, r3
 8002556:	f107 020e 	add.w	r2, r7, #14
 800255a:	f107 0110 	add.w	r1, r7, #16
 800255e:	f640 53b2 	movw	r3, #3506	@ 0xdb2
 8002562:	f7fe fe53 	bl	800120c <escapeByte>
	    escapeByte((uint8_t)(dataLen & 0xFF), outBuf, &outPos, HDLC_MAX_FRAME_SIZE);
 8002566:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 800256a:	f6a3 53cc 	subw	r3, r3, #3532	@ 0xdcc
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	b2d8      	uxtb	r0, r3
 8002572:	f107 020e 	add.w	r2, r7, #14
 8002576:	f107 0110 	add.w	r1, r7, #16
 800257a:	f640 53b2 	movw	r3, #3506	@ 0xdb2
 800257e:	f7fe fe45 	bl	800120c <escapeByte>

	    for (uint16_t i = 0; i < dataLen; i++) {
 8002582:	2300      	movs	r3, #0
 8002584:	f8a7 3dce 	strh.w	r3, [r7, #3534]	@ 0xdce
 8002588:	e015      	b.n	80025b6 <HDLC_SendFrame+0x1f2>
	        escapeByte(data[i], outBuf, &outPos, HDLC_MAX_FRAME_SIZE);
 800258a:	f8b7 3dce 	ldrh.w	r3, [r7, #3534]	@ 0xdce
 800258e:	f507 625d 	add.w	r2, r7, #3536	@ 0xdd0
 8002592:	f5a2 625d 	sub.w	r2, r2, #3536	@ 0xdd0
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	4413      	add	r3, r2
 800259a:	7818      	ldrb	r0, [r3, #0]
 800259c:	f107 020e 	add.w	r2, r7, #14
 80025a0:	f107 0110 	add.w	r1, r7, #16
 80025a4:	f640 53b2 	movw	r3, #3506	@ 0xdb2
 80025a8:	f7fe fe30 	bl	800120c <escapeByte>
	    for (uint16_t i = 0; i < dataLen; i++) {
 80025ac:	f8b7 3dce 	ldrh.w	r3, [r7, #3534]	@ 0xdce
 80025b0:	3301      	adds	r3, #1
 80025b2:	f8a7 3dce 	strh.w	r3, [r7, #3534]	@ 0xdce
 80025b6:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 80025ba:	f6a3 53cc 	subw	r3, r3, #3532	@ 0xdcc
 80025be:	f8b7 2dce 	ldrh.w	r2, [r7, #3534]	@ 0xdce
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d3e0      	bcc.n	800258a <HDLC_SendFrame+0x1c6>
	    }
	    // Oblicz CRC
	    uint8_t crcVal = computeCRC8(tempBuf, 4 + dataLen);
 80025c8:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 80025cc:	f6a3 53cc 	subw	r3, r3, #3532	@ 0xdcc
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	3304      	adds	r3, #4
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	4619      	mov	r1, r3
 80025d8:	f8d7 0dc4 	ldr.w	r0, [r7, #3524]	@ 0xdc4
 80025dc:	f7fe fe77 	bl	80012ce <computeCRC8>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f887 3dc3 	strb.w	r3, [r7, #3523]	@ 0xdc3
	    // Dodaj CRC z escapowaniem
	    escapeByte(crcVal, outBuf, &outPos, HDLC_MAX_FRAME_SIZE);
 80025e6:	f107 020e 	add.w	r2, r7, #14
 80025ea:	f107 0110 	add.w	r1, r7, #16
 80025ee:	f897 0dc3 	ldrb.w	r0, [r7, #3523]	@ 0xdc3
 80025f2:	f640 53b2 	movw	r3, #3506	@ 0xdb2
 80025f6:	f7fe fe09 	bl	800120c <escapeByte>

	    // Flaga końca
	    outBuf[outPos++] = HDLC_FLAG;
 80025fa:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 80025fe:	f6a3 53c2 	subw	r3, r3, #3522	@ 0xdc2
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	b291      	uxth	r1, r2
 8002608:	f507 625d 	add.w	r2, r7, #3536	@ 0xdd0
 800260c:	f6a2 52c2 	subw	r2, r2, #3522	@ 0xdc2
 8002610:	8011      	strh	r1, [r2, #0]
 8002612:	461a      	mov	r2, r3
 8002614:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 8002618:	f5a3 635c 	sub.w	r3, r3, #3520	@ 0xdc0
 800261c:	217e      	movs	r1, #126	@ 0x7e
 800261e:	5499      	strb	r1, [r3, r2]

	    // Wysłanie ramki
	    HAL_UART_Transmit(&huart2, outBuf, outPos, 1000);
 8002620:	f507 635d 	add.w	r3, r7, #3536	@ 0xdd0
 8002624:	f6a3 53c2 	subw	r3, r3, #3522	@ 0xdc2
 8002628:	881a      	ldrh	r2, [r3, #0]
 800262a:	f107 0110 	add.w	r1, r7, #16
 800262e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002632:	4805      	ldr	r0, [pc, #20]	@ (8002648 <HDLC_SendFrame+0x284>)
 8002634:	f004 fcb2 	bl	8006f9c <HAL_UART_Transmit>
 8002638:	46b5      	mov	sp, r6

	}
 800263a:	bf00      	nop
 800263c:	f607 57d4 	addw	r7, r7, #3540	@ 0xdd4
 8002640:	46bd      	mov	sp, r7
 8002642:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002646:	bf00      	nop
 8002648:	200003dc 	.word	0x200003dc

0800264c <HAL_TIM_IC_CaptureCallback>:


	// czujnik

	void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
	{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
	    if (htim->Instance == TIM3 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a23      	ldr	r2, [pc, #140]	@ (80026e8 <HAL_TIM_IC_CaptureCallback+0x9c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d140      	bne.n	80026e0 <HAL_TIM_IC_CaptureCallback+0x94>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	7f1b      	ldrb	r3, [r3, #28]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d13c      	bne.n	80026e0 <HAL_TIM_IC_CaptureCallback+0x94>
	    {
	        if (echo_captured == 0)
 8002666:	4b21      	ldr	r3, [pc, #132]	@ (80026ec <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d11a      	bne.n	80026a6 <HAL_TIM_IC_CaptureCallback+0x5a>
	        {
	            // Pierwsze zbocze narastające start impulsu
	            echo_start = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8002670:	2100      	movs	r1, #0
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f003 fddc 	bl	8006230 <HAL_TIM_ReadCapturedValue>
 8002678:	4603      	mov	r3, r0
 800267a:	4a1d      	ldr	r2, [pc, #116]	@ (80026f0 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800267c:	6013      	str	r3, [r2, #0]
	            echo_captured = 1;
 800267e:	4b1b      	ldr	r3, [pc, #108]	@ (80026ec <HAL_TIM_IC_CaptureCallback+0xa0>)
 8002680:	2201      	movs	r2, #1
 8002682:	701a      	strb	r2, [r3, #0]

	            // Zmień polaryzację na falling
	            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_ICPOLARITY_FALLING);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6a1a      	ldr	r2, [r3, #32]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 020a 	bic.w	r2, r2, #10
 8002692:	621a      	str	r2, [r3, #32]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6a1a      	ldr	r2, [r3, #32]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0202 	orr.w	r2, r2, #2
 80026a2:	621a      	str	r2, [r3, #32]

	            // Przywróć polaryzację na rising (następny pomiar)
	            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
	        }
	    }
	}
 80026a4:	e01c      	b.n	80026e0 <HAL_TIM_IC_CaptureCallback+0x94>
	        else if (echo_captured == 1)
 80026a6:	4b11      	ldr	r3, [pc, #68]	@ (80026ec <HAL_TIM_IC_CaptureCallback+0xa0>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d117      	bne.n	80026e0 <HAL_TIM_IC_CaptureCallback+0x94>
	            echo_end = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80026b0:	2100      	movs	r1, #0
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f003 fdbc 	bl	8006230 <HAL_TIM_ReadCapturedValue>
 80026b8:	4603      	mov	r3, r0
 80026ba:	4a0e      	ldr	r2, [pc, #56]	@ (80026f4 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80026bc:	6013      	str	r3, [r2, #0]
	            echo_captured = 2; // pomiar zakończony
 80026be:	4b0b      	ldr	r3, [pc, #44]	@ (80026ec <HAL_TIM_IC_CaptureCallback+0xa0>)
 80026c0:	2202      	movs	r2, #2
 80026c2:	701a      	strb	r2, [r3, #0]
	            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_ICPOLARITY_RISING);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6a1a      	ldr	r2, [r3, #32]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 020a 	bic.w	r2, r2, #10
 80026d2:	621a      	str	r2, [r3, #32]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6a12      	ldr	r2, [r2, #32]
 80026de:	621a      	str	r2, [r3, #32]
	}
 80026e0:	bf00      	nop
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40000400 	.word	0x40000400
 80026ec:	200001f8 	.word	0x200001f8
 80026f0:	200001f0 	.word	0x200001f0
 80026f4:	200001f4 	.word	0x200001f4

080026f8 <GetUltrasonicDistance>:


		float dist = 0.0f;

		float GetUltrasonicDistance(void)
		{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
			//Jeżeli echo zostało przechwycobe
			if (echo_captured == 2)
 80026fe:	4b2a      	ldr	r3, [pc, #168]	@ (80027a8 <GetUltrasonicDistance+0xb0>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d146      	bne.n	8002796 <GetUltrasonicDistance+0x9e>
			{
				// czas trwania
				uint32_t duration;
				if (echo_end >= echo_start)
 8002708:	4b28      	ldr	r3, [pc, #160]	@ (80027ac <GetUltrasonicDistance+0xb4>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4b28      	ldr	r3, [pc, #160]	@ (80027b0 <GetUltrasonicDistance+0xb8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d306      	bcc.n	8002722 <GetUltrasonicDistance+0x2a>
					duration = echo_end - echo_start;
 8002714:	4b25      	ldr	r3, [pc, #148]	@ (80027ac <GetUltrasonicDistance+0xb4>)
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	4b25      	ldr	r3, [pc, #148]	@ (80027b0 <GetUltrasonicDistance+0xb8>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	607b      	str	r3, [r7, #4]
 8002720:	e00b      	b.n	800273a <GetUltrasonicDistance+0x42>
				else
				{
					uint32_t arr = __HAL_TIM_GET_AUTORELOAD(&htim3);
 8002722:	4b24      	ldr	r3, [pc, #144]	@ (80027b4 <GetUltrasonicDistance+0xbc>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002728:	603b      	str	r3, [r7, #0]
					duration = (arr - echo_start + echo_end);
 800272a:	4b21      	ldr	r3, [pc, #132]	@ (80027b0 <GetUltrasonicDistance+0xb8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	1ad2      	subs	r2, r2, r3
 8002732:	4b1e      	ldr	r3, [pc, #120]	@ (80027ac <GetUltrasonicDistance+0xb4>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4413      	add	r3, r2
 8002738:	607b      	str	r3, [r7, #4]
				}

				dist = (float)duration / 58.0f;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	ee07 3a90 	vmov	s15, r3
 8002740:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002744:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80027b8 <GetUltrasonicDistance+0xc0>
 8002748:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800274c:	4b1b      	ldr	r3, [pc, #108]	@ (80027bc <GetUltrasonicDistance+0xc4>)
 800274e:	edc3 7a00 	vstr	s15, [r3]
				dist = roundf(dist*100.0f)/100.0f; // zaokrąglenie do 2 miejsc
 8002752:	4b1a      	ldr	r3, [pc, #104]	@ (80027bc <GetUltrasonicDistance+0xc4>)
 8002754:	edd3 7a00 	vldr	s15, [r3]
 8002758:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80027c0 <GetUltrasonicDistance+0xc8>
 800275c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002760:	eeb0 0a67 	vmov.f32	s0, s15
 8002764:	f008 fab6 	bl	800acd4 <roundf>
 8002768:	eeb0 7a40 	vmov.f32	s14, s0
 800276c:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80027c0 <GetUltrasonicDistance+0xc8>
 8002770:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002774:	4b11      	ldr	r3, [pc, #68]	@ (80027bc <GetUltrasonicDistance+0xc4>)
 8002776:	edc3 7a00 	vstr	s15, [r3]

				CircularBuffer_Put(&cb, dist);
 800277a:	4b10      	ldr	r3, [pc, #64]	@ (80027bc <GetUltrasonicDistance+0xc4>)
 800277c:	edd3 7a00 	vldr	s15, [r3]
 8002780:	eeb0 0a67 	vmov.f32	s0, s15
 8002784:	480f      	ldr	r0, [pc, #60]	@ (80027c4 <GetUltrasonicDistance+0xcc>)
 8002786:	f7fe fc47 	bl	8001018 <CircularBuffer_Put>

				echo_captured = 0; // Reset
 800278a:	4b07      	ldr	r3, [pc, #28]	@ (80027a8 <GetUltrasonicDistance+0xb0>)
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
				return dist;
 8002790:	4b0a      	ldr	r3, [pc, #40]	@ (80027bc <GetUltrasonicDistance+0xc4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	e000      	b.n	8002798 <GetUltrasonicDistance+0xa0>
			}
			else
			{
				return -1.0f;
 8002796:	4b0c      	ldr	r3, [pc, #48]	@ (80027c8 <GetUltrasonicDistance+0xd0>)
			}
		}
 8002798:	ee07 3a90 	vmov	s15, r3
 800279c:	eeb0 0a67 	vmov.f32	s0, s15
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	200001f8 	.word	0x200001f8
 80027ac:	200001f4 	.word	0x200001f4
 80027b0:	200001f0 	.word	0x200001f0
 80027b4:	20000244 	.word	0x20000244
 80027b8:	42680000 	.word	0x42680000
 80027bc:	200042d4 	.word	0x200042d4
 80027c0:	42c80000 	.word	0x42c80000
 80027c4:	20003328 	.word	0x20003328
 80027c8:	bf800000 	.word	0xbf800000

080027cc <SetUltrasonicInterval>:

	void SetUltrasonicInterval(uint16_t ms) {
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	80fb      	strh	r3, [r7, #6]
	    // Oblicz wartości prescalera i period
	    uint32_t timer_freq = HAL_RCC_GetPCLK1Freq(); // Częstotliwość zegara
 80027d6:	f001 fefd 	bl	80045d4 <HAL_RCC_GetPCLK1Freq>
 80027da:	60f8      	str	r0, [r7, #12]
	    uint16_t prescaler = (timer_freq / 1000) - 1; // Dzielnik częstotliwości
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4a0b      	ldr	r2, [pc, #44]	@ (800280c <SetUltrasonicInterval+0x40>)
 80027e0:	fba2 2303 	umull	r2, r3, r2, r3
 80027e4:	099b      	lsrs	r3, r3, #6
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	3b01      	subs	r3, #1
 80027ea:	817b      	strh	r3, [r7, #10]
	    uint16_t period = ms - 1; // Okres
 80027ec:	88fb      	ldrh	r3, [r7, #6]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	813b      	strh	r3, [r7, #8]

	    htim6.Init.Prescaler = prescaler;
 80027f2:	897b      	ldrh	r3, [r7, #10]
 80027f4:	4a06      	ldr	r2, [pc, #24]	@ (8002810 <SetUltrasonicInterval+0x44>)
 80027f6:	6053      	str	r3, [r2, #4]
	    htim6.Init.Period = period;
 80027f8:	893b      	ldrh	r3, [r7, #8]
 80027fa:	4a05      	ldr	r2, [pc, #20]	@ (8002810 <SetUltrasonicInterval+0x44>)
 80027fc:	60d3      	str	r3, [r2, #12]

	    HAL_TIM_Base_Init(&htim6);
 80027fe:	4804      	ldr	r0, [pc, #16]	@ (8002810 <SetUltrasonicInterval+0x44>)
 8002800:	f002 fbde 	bl	8004fc0 <HAL_TIM_Base_Init>
	}
 8002804:	bf00      	nop
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	10624dd3 	.word	0x10624dd3
 8002810:	2000028c 	.word	0x2000028c

08002814 <TriggerUltrasonic>:



	void TriggerUltrasonic(void) {
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
	    // impuls TRIG używając timera
	    HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 8002818:	2201      	movs	r2, #1
 800281a:	2180      	movs	r1, #128	@ 0x80
 800281c:	4803      	ldr	r0, [pc, #12]	@ (800282c <TriggerUltrasonic+0x18>)
 800281e:	f001 fd7d 	bl	800431c <HAL_GPIO_WritePin>
	    HAL_TIM_Base_Start_IT(&htim7);  // skonfigurowany na 10us
 8002822:	4803      	ldr	r0, [pc, #12]	@ (8002830 <TriggerUltrasonic+0x1c>)
 8002824:	f002 fc1c 	bl	8005060 <HAL_TIM_Base_Start_IT>


	}
 8002828:	bf00      	nop
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40020000 	.word	0x40020000
 8002830:	200002d4 	.word	0x200002d4

08002834 <HAL_TIM_PeriodElapsedCallback>:

	//  przerwania timera
	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
	    if (htim->Instance == TIM7) {
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a0a      	ldr	r2, [pc, #40]	@ (800286c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d107      	bne.n	8002856 <HAL_TIM_PeriodElapsedCallback+0x22>
	        HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8002846:	2200      	movs	r2, #0
 8002848:	2180      	movs	r1, #128	@ 0x80
 800284a:	4809      	ldr	r0, [pc, #36]	@ (8002870 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800284c:	f001 fd66 	bl	800431c <HAL_GPIO_WritePin>
	        HAL_TIM_Base_Stop_IT(&htim7);
 8002850:	4808      	ldr	r0, [pc, #32]	@ (8002874 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002852:	f002 fc75 	bl	8005140 <HAL_TIM_Base_Stop_IT>
	    }
	    //  TIM6
	    if (htim->Instance == TIM6) {
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a07      	ldr	r2, [pc, #28]	@ (8002878 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d101      	bne.n	8002864 <HAL_TIM_PeriodElapsedCallback+0x30>
	        TriggerUltrasonic();
 8002860:	f7ff ffd8 	bl	8002814 <TriggerUltrasonic>
	    }
	}
 8002864:	bf00      	nop
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40001400 	.word	0x40001400
 8002870:	40020000 	.word	0x40020000
 8002874:	200002d4 	.word	0x200002d4
 8002878:	40001000 	.word	0x40001000

0800287c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002880:	f000 fe00 	bl	8003484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002884:	f000 f838 	bl	80028f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002888:	f000 fa64 	bl	8002d54 <MX_GPIO_Init>
  MX_DMA_Init();
 800288c:	f000 fa3a 	bl	8002d04 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002890:	f000 fa0e 	bl	8002cb0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002894:	f000 f8a2 	bl	80029dc <MX_TIM1_Init>
  MX_TIM3_Init();
 8002898:	f000 f94c 	bl	8002b34 <MX_TIM3_Init>
  MX_TIM6_Init();
 800289c:	f000 f99e 	bl	8002bdc <MX_TIM6_Init>
  MX_TIM7_Init();
 80028a0:	f000 f9d2 	bl	8002c48 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2,&USART_RxBuf[USART_RX_Empty], 1);
 80028a4:	4b0e      	ldr	r3, [pc, #56]	@ (80028e0 <main+0x64>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a0e      	ldr	r2, [pc, #56]	@ (80028e4 <main+0x68>)
 80028aa:	4413      	add	r3, r2
 80028ac:	2201      	movs	r2, #1
 80028ae:	4619      	mov	r1, r3
 80028b0:	480d      	ldr	r0, [pc, #52]	@ (80028e8 <main+0x6c>)
 80028b2:	f004 fc34 	bl	800711e <HAL_UART_Receive_IT>
  // Start TIM6 do generowania triggera w czujniku
 	    HAL_TIM_Base_Start_IT(&htim6);
 80028b6:	480d      	ldr	r0, [pc, #52]	@ (80028ec <main+0x70>)
 80028b8:	f002 fbd2 	bl	8005060 <HAL_TIM_Base_Start_IT>

 	    // Start TIM3 Input Capture na chan 1
 	    HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); //włącza przerwanie ale w sumie nie wiem czy to tu powinno być w ogóle
 80028bc:	2100      	movs	r1, #0
 80028be:	480c      	ldr	r0, [pc, #48]	@ (80028f0 <main+0x74>)
 80028c0:	f003 f878 	bl	80059b4 <HAL_TIM_IC_Start_IT>

 	   // startuje pwm
 	   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); //servo 1
 80028c4:	2100      	movs	r1, #0
 80028c6:	480b      	ldr	r0, [pc, #44]	@ (80028f4 <main+0x78>)
 80028c8:	f002 fcc2 	bl	8005250 <HAL_TIM_PWM_Start>
 	   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); //servo 2
 80028cc:	2104      	movs	r1, #4
 80028ce:	4809      	ldr	r0, [pc, #36]	@ (80028f4 <main+0x78>)
 80028d0:	f002 fcbe 	bl	8005250 <HAL_TIM_PWM_Start>

  while (1)
  {
	  //ServoWiper(); // na testowanie serva

		  HDLC_ProcessInput();
 80028d4:	f7ff fcec 	bl	80022b0 <HDLC_ProcessInput>

		  //czujnik
		  // żeby działał to trzeba zrobić tigger na high przez minimum 10 us
		  GetUltrasonicDistance();
 80028d8:	f7ff ff0e 	bl	80026f8 <GetUltrasonicDistance>
		  HDLC_ProcessInput();
 80028dc:	bf00      	nop
 80028de:	e7f9      	b.n	80028d4 <main+0x58>
 80028e0:	20002528 	.word	0x20002528
 80028e4:	20001f8c 	.word	0x20001f8c
 80028e8:	200003dc 	.word	0x200003dc
 80028ec:	2000028c 	.word	0x2000028c
 80028f0:	20000244 	.word	0x20000244
 80028f4:	200001fc 	.word	0x200001fc

080028f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b094      	sub	sp, #80	@ 0x50
 80028fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028fe:	f107 031c 	add.w	r3, r7, #28
 8002902:	2234      	movs	r2, #52	@ 0x34
 8002904:	2100      	movs	r1, #0
 8002906:	4618      	mov	r0, r3
 8002908:	f006 f91b 	bl	8008b42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800290c:	f107 0308 	add.w	r3, r7, #8
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	60da      	str	r2, [r3, #12]
 800291a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800291c:	2300      	movs	r3, #0
 800291e:	607b      	str	r3, [r7, #4]
 8002920:	4b2c      	ldr	r3, [pc, #176]	@ (80029d4 <SystemClock_Config+0xdc>)
 8002922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002924:	4a2b      	ldr	r2, [pc, #172]	@ (80029d4 <SystemClock_Config+0xdc>)
 8002926:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800292a:	6413      	str	r3, [r2, #64]	@ 0x40
 800292c:	4b29      	ldr	r3, [pc, #164]	@ (80029d4 <SystemClock_Config+0xdc>)
 800292e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002930:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002934:	607b      	str	r3, [r7, #4]
 8002936:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002938:	2300      	movs	r3, #0
 800293a:	603b      	str	r3, [r7, #0]
 800293c:	4b26      	ldr	r3, [pc, #152]	@ (80029d8 <SystemClock_Config+0xe0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a25      	ldr	r2, [pc, #148]	@ (80029d8 <SystemClock_Config+0xe0>)
 8002942:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002946:	6013      	str	r3, [r2, #0]
 8002948:	4b23      	ldr	r3, [pc, #140]	@ (80029d8 <SystemClock_Config+0xe0>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002950:	603b      	str	r3, [r7, #0]
 8002952:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002954:	2302      	movs	r3, #2
 8002956:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002958:	2301      	movs	r3, #1
 800295a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800295c:	2310      	movs	r3, #16
 800295e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002960:	2302      	movs	r3, #2
 8002962:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002964:	2300      	movs	r3, #0
 8002966:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002968:	2308      	movs	r3, #8
 800296a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800296c:	23b4      	movs	r3, #180	@ 0xb4
 800296e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002970:	2302      	movs	r3, #2
 8002972:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002974:	2302      	movs	r3, #2
 8002976:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002978:	2302      	movs	r3, #2
 800297a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800297c:	f107 031c 	add.w	r3, r7, #28
 8002980:	4618      	mov	r0, r3
 8002982:	f002 f87f 	bl	8004a84 <HAL_RCC_OscConfig>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800298c:	f000 fa50 	bl	8002e30 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002990:	f001 fcde 	bl	8004350 <HAL_PWREx_EnableOverDrive>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800299a:	f000 fa49 	bl	8002e30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800299e:	230f      	movs	r3, #15
 80029a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 80029a2:	2303      	movs	r3, #3
 80029a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029a6:	2300      	movs	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80029aa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80029ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029b4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80029b6:	f107 0308 	add.w	r3, r7, #8
 80029ba:	2105      	movs	r1, #5
 80029bc:	4618      	mov	r0, r3
 80029be:	f001 fd17 	bl	80043f0 <HAL_RCC_ClockConfig>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80029c8:	f000 fa32 	bl	8002e30 <Error_Handler>
  }
}
 80029cc:	bf00      	nop
 80029ce:	3750      	adds	r7, #80	@ 0x50
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40023800 	.word	0x40023800
 80029d8:	40007000 	.word	0x40007000

080029dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b096      	sub	sp, #88	@ 0x58
 80029e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029e2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	605a      	str	r2, [r3, #4]
 80029ec:	609a      	str	r2, [r3, #8]
 80029ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	605a      	str	r2, [r3, #4]
 8002a04:	609a      	str	r2, [r3, #8]
 8002a06:	60da      	str	r2, [r3, #12]
 8002a08:	611a      	str	r2, [r3, #16]
 8002a0a:	615a      	str	r2, [r3, #20]
 8002a0c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a0e:	1d3b      	adds	r3, r7, #4
 8002a10:	2220      	movs	r2, #32
 8002a12:	2100      	movs	r1, #0
 8002a14:	4618      	mov	r0, r3
 8002a16:	f006 f894 	bl	8008b42 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a1a:	4b44      	ldr	r3, [pc, #272]	@ (8002b2c <MX_TIM1_Init+0x150>)
 8002a1c:	4a44      	ldr	r2, [pc, #272]	@ (8002b30 <MX_TIM1_Init+0x154>)
 8002a1e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 54;
 8002a20:	4b42      	ldr	r3, [pc, #264]	@ (8002b2c <MX_TIM1_Init+0x150>)
 8002a22:	2236      	movs	r2, #54	@ 0x36
 8002a24:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a26:	4b41      	ldr	r3, [pc, #260]	@ (8002b2c <MX_TIM1_Init+0x150>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65453;
 8002a2c:	4b3f      	ldr	r3, [pc, #252]	@ (8002b2c <MX_TIM1_Init+0x150>)
 8002a2e:	f64f 72ad 	movw	r2, #65453	@ 0xffad
 8002a32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a34:	4b3d      	ldr	r3, [pc, #244]	@ (8002b2c <MX_TIM1_Init+0x150>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a3a:	4b3c      	ldr	r3, [pc, #240]	@ (8002b2c <MX_TIM1_Init+0x150>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a40:	4b3a      	ldr	r3, [pc, #232]	@ (8002b2c <MX_TIM1_Init+0x150>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002a46:	4839      	ldr	r0, [pc, #228]	@ (8002b2c <MX_TIM1_Init+0x150>)
 8002a48:	f002 faba 	bl	8004fc0 <HAL_TIM_Base_Init>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002a52:	f000 f9ed 	bl	8002e30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002a5c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002a60:	4619      	mov	r1, r3
 8002a62:	4832      	ldr	r0, [pc, #200]	@ (8002b2c <MX_TIM1_Init+0x150>)
 8002a64:	f003 fb1c 	bl	80060a0 <HAL_TIM_ConfigClockSource>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002a6e:	f000 f9df 	bl	8002e30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002a72:	482e      	ldr	r0, [pc, #184]	@ (8002b2c <MX_TIM1_Init+0x150>)
 8002a74:	f002 fb93 	bl	800519e <HAL_TIM_PWM_Init>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002a7e:	f000 f9d7 	bl	8002e30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a82:	2300      	movs	r3, #0
 8002a84:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a86:	2300      	movs	r3, #0
 8002a88:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a8a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4826      	ldr	r0, [pc, #152]	@ (8002b2c <MX_TIM1_Init+0x150>)
 8002a92:	f004 f951 	bl	8006d38 <HAL_TIMEx_MasterConfigSynchronization>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002a9c:	f000 f9c8 	bl	8002e30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002aa0:	2360      	movs	r3, #96	@ 0x60
 8002aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002aac:	2300      	movs	r3, #0
 8002aae:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002abc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4819      	ldr	r0, [pc, #100]	@ (8002b2c <MX_TIM1_Init+0x150>)
 8002ac6:	f003 fa29 	bl	8005f1c <HAL_TIM_PWM_ConfigChannel>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002ad0:	f000 f9ae 	bl	8002e30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ad4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ad8:	2204      	movs	r2, #4
 8002ada:	4619      	mov	r1, r3
 8002adc:	4813      	ldr	r0, [pc, #76]	@ (8002b2c <MX_TIM1_Init+0x150>)
 8002ade:	f003 fa1d 	bl	8005f1c <HAL_TIM_PWM_ConfigChannel>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002ae8:	f000 f9a2 	bl	8002e30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002aec:	2300      	movs	r3, #0
 8002aee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002af4:	2300      	movs	r3, #0
 8002af6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b04:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b06:	2300      	movs	r3, #0
 8002b08:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4807      	ldr	r0, [pc, #28]	@ (8002b2c <MX_TIM1_Init+0x150>)
 8002b10:	f004 f98e 	bl	8006e30 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8002b1a:	f000 f989 	bl	8002e30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002b1e:	4803      	ldr	r0, [pc, #12]	@ (8002b2c <MX_TIM1_Init+0x150>)
 8002b20:	f000 fac2 	bl	80030a8 <HAL_TIM_MspPostInit>

}
 8002b24:	bf00      	nop
 8002b26:	3758      	adds	r7, #88	@ 0x58
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	200001fc 	.word	0x200001fc
 8002b30:	40010000 	.word	0x40010000

08002b34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b3a:	f107 0310 	add.w	r3, r7, #16
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002b44:	463b      	mov	r3, r7
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	605a      	str	r2, [r3, #4]
 8002b4c:	609a      	str	r2, [r3, #8]
 8002b4e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b50:	4b20      	ldr	r3, [pc, #128]	@ (8002bd4 <MX_TIM3_Init+0xa0>)
 8002b52:	4a21      	ldr	r2, [pc, #132]	@ (8002bd8 <MX_TIM3_Init+0xa4>)
 8002b54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 44;
 8002b56:	4b1f      	ldr	r3, [pc, #124]	@ (8002bd4 <MX_TIM3_Init+0xa0>)
 8002b58:	222c      	movs	r2, #44	@ 0x2c
 8002b5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd4 <MX_TIM3_Init+0xa0>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 38000;
 8002b62:	4b1c      	ldr	r3, [pc, #112]	@ (8002bd4 <MX_TIM3_Init+0xa0>)
 8002b64:	f249 4270 	movw	r2, #38000	@ 0x9470
 8002b68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd4 <MX_TIM3_Init+0xa0>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b70:	4b18      	ldr	r3, [pc, #96]	@ (8002bd4 <MX_TIM3_Init+0xa0>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002b76:	4817      	ldr	r0, [pc, #92]	@ (8002bd4 <MX_TIM3_Init+0xa0>)
 8002b78:	f002 fecc 	bl	8005914 <HAL_TIM_IC_Init>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002b82:	f000 f955 	bl	8002e30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b8e:	f107 0310 	add.w	r3, r7, #16
 8002b92:	4619      	mov	r1, r3
 8002b94:	480f      	ldr	r0, [pc, #60]	@ (8002bd4 <MX_TIM3_Init+0xa0>)
 8002b96:	f004 f8cf 	bl	8006d38 <HAL_TIMEx_MasterConfigSynchronization>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002ba0:	f000 f946 	bl	8002e30 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002ba4:	230a      	movs	r3, #10
 8002ba6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002bac:	2300      	movs	r3, #0
 8002bae:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002bb4:	463b      	mov	r3, r7
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4806      	ldr	r0, [pc, #24]	@ (8002bd4 <MX_TIM3_Init+0xa0>)
 8002bbc:	f003 f912 	bl	8005de4 <HAL_TIM_IC_ConfigChannel>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8002bc6:	f000 f933 	bl	8002e30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002bca:	bf00      	nop
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000244 	.word	0x20000244
 8002bd8:	40000400 	.word	0x40000400

08002bdc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002be2:	463b      	mov	r3, r7
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002bea:	4b15      	ldr	r3, [pc, #84]	@ (8002c40 <MX_TIM6_Init+0x64>)
 8002bec:	4a15      	ldr	r2, [pc, #84]	@ (8002c44 <MX_TIM6_Init+0x68>)
 8002bee:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8399;
 8002bf0:	4b13      	ldr	r3, [pc, #76]	@ (8002c40 <MX_TIM6_Init+0x64>)
 8002bf2:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8002bf6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bf8:	4b11      	ldr	r3, [pc, #68]	@ (8002c40 <MX_TIM6_Init+0x64>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8002bfe:	4b10      	ldr	r3, [pc, #64]	@ (8002c40 <MX_TIM6_Init+0x64>)
 8002c00:	2263      	movs	r2, #99	@ 0x63
 8002c02:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c04:	4b0e      	ldr	r3, [pc, #56]	@ (8002c40 <MX_TIM6_Init+0x64>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002c0a:	480d      	ldr	r0, [pc, #52]	@ (8002c40 <MX_TIM6_Init+0x64>)
 8002c0c:	f002 f9d8 	bl	8004fc0 <HAL_TIM_Base_Init>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002c16:	f000 f90b 	bl	8002e30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002c22:	463b      	mov	r3, r7
 8002c24:	4619      	mov	r1, r3
 8002c26:	4806      	ldr	r0, [pc, #24]	@ (8002c40 <MX_TIM6_Init+0x64>)
 8002c28:	f004 f886 	bl	8006d38 <HAL_TIMEx_MasterConfigSynchronization>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002c32:	f000 f8fd 	bl	8002e30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002c36:	bf00      	nop
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	2000028c 	.word	0x2000028c
 8002c44:	40001000 	.word	0x40001000

08002c48 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c4e:	463b      	mov	r3, r7
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002c56:	4b14      	ldr	r3, [pc, #80]	@ (8002ca8 <MX_TIM7_Init+0x60>)
 8002c58:	4a14      	ldr	r2, [pc, #80]	@ (8002cac <MX_TIM7_Init+0x64>)
 8002c5a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8002c5c:	4b12      	ldr	r3, [pc, #72]	@ (8002ca8 <MX_TIM7_Init+0x60>)
 8002c5e:	22b3      	movs	r2, #179	@ 0xb3
 8002c60:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c62:	4b11      	ldr	r3, [pc, #68]	@ (8002ca8 <MX_TIM7_Init+0x60>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8002c68:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca8 <MX_TIM7_Init+0x60>)
 8002c6a:	2209      	movs	r2, #9
 8002c6c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca8 <MX_TIM7_Init+0x60>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002c74:	480c      	ldr	r0, [pc, #48]	@ (8002ca8 <MX_TIM7_Init+0x60>)
 8002c76:	f002 f9a3 	bl	8004fc0 <HAL_TIM_Base_Init>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8002c80:	f000 f8d6 	bl	8002e30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c84:	2300      	movs	r3, #0
 8002c86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002c8c:	463b      	mov	r3, r7
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4805      	ldr	r0, [pc, #20]	@ (8002ca8 <MX_TIM7_Init+0x60>)
 8002c92:	f004 f851 	bl	8006d38 <HAL_TIMEx_MasterConfigSynchronization>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8002c9c:	f000 f8c8 	bl	8002e30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002ca0:	bf00      	nop
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	200002d4 	.word	0x200002d4
 8002cac:	40001400 	.word	0x40001400

08002cb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cb4:	4b11      	ldr	r3, [pc, #68]	@ (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cb6:	4a12      	ldr	r2, [pc, #72]	@ (8002d00 <MX_USART2_UART_Init+0x50>)
 8002cb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cba:	4b10      	ldr	r3, [pc, #64]	@ (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cbc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002cc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cce:	4b0b      	ldr	r3, [pc, #44]	@ (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002cd4:	4b09      	ldr	r3, [pc, #36]	@ (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cd6:	220c      	movs	r2, #12
 8002cd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cda:	4b08      	ldr	r3, [pc, #32]	@ (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ce0:	4b06      	ldr	r3, [pc, #24]	@ (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ce6:	4805      	ldr	r0, [pc, #20]	@ (8002cfc <MX_USART2_UART_Init+0x4c>)
 8002ce8:	f004 f908 	bl	8006efc <HAL_UART_Init>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002cf2:	f000 f89d 	bl	8002e30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002cf6:	bf00      	nop
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	200003dc 	.word	0x200003dc
 8002d00:	40004400 	.word	0x40004400

08002d04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	607b      	str	r3, [r7, #4]
 8002d0e:	4b10      	ldr	r3, [pc, #64]	@ (8002d50 <MX_DMA_Init+0x4c>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d12:	4a0f      	ldr	r2, [pc, #60]	@ (8002d50 <MX_DMA_Init+0x4c>)
 8002d14:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d50 <MX_DMA_Init+0x4c>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d22:	607b      	str	r3, [r7, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002d26:	2200      	movs	r2, #0
 8002d28:	2100      	movs	r1, #0
 8002d2a:	2039      	movs	r0, #57	@ 0x39
 8002d2c:	f000 fd1b 	bl	8003766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002d30:	2039      	movs	r0, #57	@ 0x39
 8002d32:	f000 fd34 	bl	800379e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002d36:	2200      	movs	r2, #0
 8002d38:	2100      	movs	r1, #0
 8002d3a:	203a      	movs	r0, #58	@ 0x3a
 8002d3c:	f000 fd13 	bl	8003766 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002d40:	203a      	movs	r0, #58	@ 0x3a
 8002d42:	f000 fd2c 	bl	800379e <HAL_NVIC_EnableIRQ>

}
 8002d46:	bf00      	nop
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40023800 	.word	0x40023800

08002d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08a      	sub	sp, #40	@ 0x28
 8002d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d5a:	f107 0314 	add.w	r3, r7, #20
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
 8002d62:	605a      	str	r2, [r3, #4]
 8002d64:	609a      	str	r2, [r3, #8]
 8002d66:	60da      	str	r2, [r3, #12]
 8002d68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	4b2d      	ldr	r3, [pc, #180]	@ (8002e24 <MX_GPIO_Init+0xd0>)
 8002d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d72:	4a2c      	ldr	r2, [pc, #176]	@ (8002e24 <MX_GPIO_Init+0xd0>)
 8002d74:	f043 0304 	orr.w	r3, r3, #4
 8002d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d7a:	4b2a      	ldr	r3, [pc, #168]	@ (8002e24 <MX_GPIO_Init+0xd0>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7e:	f003 0304 	and.w	r3, r3, #4
 8002d82:	613b      	str	r3, [r7, #16]
 8002d84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	4b26      	ldr	r3, [pc, #152]	@ (8002e24 <MX_GPIO_Init+0xd0>)
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8e:	4a25      	ldr	r2, [pc, #148]	@ (8002e24 <MX_GPIO_Init+0xd0>)
 8002d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d96:	4b23      	ldr	r3, [pc, #140]	@ (8002e24 <MX_GPIO_Init+0xd0>)
 8002d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	4b1f      	ldr	r3, [pc, #124]	@ (8002e24 <MX_GPIO_Init+0xd0>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002daa:	4a1e      	ldr	r2, [pc, #120]	@ (8002e24 <MX_GPIO_Init+0xd0>)
 8002dac:	f043 0301 	orr.w	r3, r3, #1
 8002db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002db2:	4b1c      	ldr	r3, [pc, #112]	@ (8002e24 <MX_GPIO_Init+0xd0>)
 8002db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	60bb      	str	r3, [r7, #8]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	607b      	str	r3, [r7, #4]
 8002dc2:	4b18      	ldr	r3, [pc, #96]	@ (8002e24 <MX_GPIO_Init+0xd0>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc6:	4a17      	ldr	r2, [pc, #92]	@ (8002e24 <MX_GPIO_Init+0xd0>)
 8002dc8:	f043 0302 	orr.w	r3, r3, #2
 8002dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dce:	4b15      	ldr	r3, [pc, #84]	@ (8002e24 <MX_GPIO_Init+0xd0>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	607b      	str	r3, [r7, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin|TRIG_Pin_Pin, GPIO_PIN_RESET);
 8002dda:	2200      	movs	r2, #0
 8002ddc:	21b0      	movs	r1, #176	@ 0xb0
 8002dde:	4812      	ldr	r0, [pc, #72]	@ (8002e28 <MX_GPIO_Init+0xd4>)
 8002de0:	f001 fa9c 	bl	800431c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002de4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002dea:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002dee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002df4:	f107 0314 	add.w	r3, r7, #20
 8002df8:	4619      	mov	r1, r3
 8002dfa:	480c      	ldr	r0, [pc, #48]	@ (8002e2c <MX_GPIO_Init+0xd8>)
 8002dfc:	f001 f8fa 	bl	8003ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin TRIG_Pin_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin|TRIG_Pin_Pin;
 8002e00:	23b0      	movs	r3, #176	@ 0xb0
 8002e02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e04:	2301      	movs	r3, #1
 8002e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e10:	f107 0314 	add.w	r3, r7, #20
 8002e14:	4619      	mov	r1, r3
 8002e16:	4804      	ldr	r0, [pc, #16]	@ (8002e28 <MX_GPIO_Init+0xd4>)
 8002e18:	f001 f8ec 	bl	8003ff4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002e1c:	bf00      	nop
 8002e1e:	3728      	adds	r7, #40	@ 0x28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40023800 	.word	0x40023800
 8002e28:	40020000 	.word	0x40020000
 8002e2c:	40020800 	.word	0x40020800

08002e30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e34:	b672      	cpsid	i
}
 8002e36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e38:	bf00      	nop
 8002e3a:	e7fd      	b.n	8002e38 <Error_Handler+0x8>

08002e3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	607b      	str	r3, [r7, #4]
 8002e46:	4b10      	ldr	r3, [pc, #64]	@ (8002e88 <HAL_MspInit+0x4c>)
 8002e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4a:	4a0f      	ldr	r2, [pc, #60]	@ (8002e88 <HAL_MspInit+0x4c>)
 8002e4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e50:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e52:	4b0d      	ldr	r3, [pc, #52]	@ (8002e88 <HAL_MspInit+0x4c>)
 8002e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e5a:	607b      	str	r3, [r7, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	603b      	str	r3, [r7, #0]
 8002e62:	4b09      	ldr	r3, [pc, #36]	@ (8002e88 <HAL_MspInit+0x4c>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e66:	4a08      	ldr	r2, [pc, #32]	@ (8002e88 <HAL_MspInit+0x4c>)
 8002e68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e6e:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <HAL_MspInit+0x4c>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002e7a:	2007      	movs	r0, #7
 8002e7c:	f000 fc68 	bl	8003750 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e80:	bf00      	nop
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40023800 	.word	0x40023800

08002e8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a53      	ldr	r2, [pc, #332]	@ (8002fe8 <HAL_TIM_Base_MspInit+0x15c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d170      	bne.n	8002f80 <HAL_TIM_Base_MspInit+0xf4>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	4b52      	ldr	r3, [pc, #328]	@ (8002fec <HAL_TIM_Base_MspInit+0x160>)
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea6:	4a51      	ldr	r2, [pc, #324]	@ (8002fec <HAL_TIM_Base_MspInit+0x160>)
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eae:	4b4f      	ldr	r3, [pc, #316]	@ (8002fec <HAL_TIM_Base_MspInit+0x160>)
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8002eba:	4b4d      	ldr	r3, [pc, #308]	@ (8002ff0 <HAL_TIM_Base_MspInit+0x164>)
 8002ebc:	4a4d      	ldr	r2, [pc, #308]	@ (8002ff4 <HAL_TIM_Base_MspInit+0x168>)
 8002ebe:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8002ec0:	4b4b      	ldr	r3, [pc, #300]	@ (8002ff0 <HAL_TIM_Base_MspInit+0x164>)
 8002ec2:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8002ec6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ec8:	4b49      	ldr	r3, [pc, #292]	@ (8002ff0 <HAL_TIM_Base_MspInit+0x164>)
 8002eca:	2240      	movs	r2, #64	@ 0x40
 8002ecc:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ece:	4b48      	ldr	r3, [pc, #288]	@ (8002ff0 <HAL_TIM_Base_MspInit+0x164>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002ed4:	4b46      	ldr	r3, [pc, #280]	@ (8002ff0 <HAL_TIM_Base_MspInit+0x164>)
 8002ed6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002eda:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002edc:	4b44      	ldr	r3, [pc, #272]	@ (8002ff0 <HAL_TIM_Base_MspInit+0x164>)
 8002ede:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002ee2:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ee4:	4b42      	ldr	r3, [pc, #264]	@ (8002ff0 <HAL_TIM_Base_MspInit+0x164>)
 8002ee6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002eea:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8002eec:	4b40      	ldr	r3, [pc, #256]	@ (8002ff0 <HAL_TIM_Base_MspInit+0x164>)
 8002eee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ef2:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002ef4:	4b3e      	ldr	r3, [pc, #248]	@ (8002ff0 <HAL_TIM_Base_MspInit+0x164>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002efa:	4b3d      	ldr	r3, [pc, #244]	@ (8002ff0 <HAL_TIM_Base_MspInit+0x164>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002f00:	483b      	ldr	r0, [pc, #236]	@ (8002ff0 <HAL_TIM_Base_MspInit+0x164>)
 8002f02:	f000 fc75 	bl	80037f0 <HAL_DMA_Init>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8002f0c:	f7ff ff90 	bl	8002e30 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a37      	ldr	r2, [pc, #220]	@ (8002ff0 <HAL_TIM_Base_MspInit+0x164>)
 8002f14:	625a      	str	r2, [r3, #36]	@ 0x24
 8002f16:	4a36      	ldr	r2, [pc, #216]	@ (8002ff0 <HAL_TIM_Base_MspInit+0x164>)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 8002f1c:	4b36      	ldr	r3, [pc, #216]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x16c>)
 8002f1e:	4a37      	ldr	r2, [pc, #220]	@ (8002ffc <HAL_TIM_Base_MspInit+0x170>)
 8002f20:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 8002f22:	4b35      	ldr	r3, [pc, #212]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x16c>)
 8002f24:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8002f28:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f2a:	4b33      	ldr	r3, [pc, #204]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x16c>)
 8002f2c:	2240      	movs	r2, #64	@ 0x40
 8002f2e:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f30:	4b31      	ldr	r3, [pc, #196]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x16c>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002f36:	4b30      	ldr	r3, [pc, #192]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x16c>)
 8002f38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f3c:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f3e:	4b2e      	ldr	r3, [pc, #184]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x16c>)
 8002f40:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002f44:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f46:	4b2c      	ldr	r3, [pc, #176]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x16c>)
 8002f48:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002f4c:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 8002f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x16c>)
 8002f50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f54:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002f56:	4b28      	ldr	r3, [pc, #160]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x16c>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f5c:	4b26      	ldr	r3, [pc, #152]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x16c>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8002f62:	4825      	ldr	r0, [pc, #148]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x16c>)
 8002f64:	f000 fc44 	bl	80037f0 <HAL_DMA_Init>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_TIM_Base_MspInit+0xe6>
    {
      Error_Handler();
 8002f6e:	f7ff ff5f 	bl	8002e30 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a20      	ldr	r2, [pc, #128]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x16c>)
 8002f76:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f78:	4a1f      	ldr	r2, [pc, #124]	@ (8002ff8 <HAL_TIM_Base_MspInit+0x16c>)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002f7e:	e02e      	b.n	8002fde <HAL_TIM_Base_MspInit+0x152>
  else if(htim_base->Instance==TIM6)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a1e      	ldr	r2, [pc, #120]	@ (8003000 <HAL_TIM_Base_MspInit+0x174>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d116      	bne.n	8002fb8 <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	4b17      	ldr	r3, [pc, #92]	@ (8002fec <HAL_TIM_Base_MspInit+0x160>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f92:	4a16      	ldr	r2, [pc, #88]	@ (8002fec <HAL_TIM_Base_MspInit+0x160>)
 8002f94:	f043 0310 	orr.w	r3, r3, #16
 8002f98:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f9a:	4b14      	ldr	r3, [pc, #80]	@ (8002fec <HAL_TIM_Base_MspInit+0x160>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	613b      	str	r3, [r7, #16]
 8002fa4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	2100      	movs	r1, #0
 8002faa:	2036      	movs	r0, #54	@ 0x36
 8002fac:	f000 fbdb 	bl	8003766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002fb0:	2036      	movs	r0, #54	@ 0x36
 8002fb2:	f000 fbf4 	bl	800379e <HAL_NVIC_EnableIRQ>
}
 8002fb6:	e012      	b.n	8002fde <HAL_TIM_Base_MspInit+0x152>
  else if(htim_base->Instance==TIM7)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a11      	ldr	r2, [pc, #68]	@ (8003004 <HAL_TIM_Base_MspInit+0x178>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d10d      	bne.n	8002fde <HAL_TIM_Base_MspInit+0x152>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	4b09      	ldr	r3, [pc, #36]	@ (8002fec <HAL_TIM_Base_MspInit+0x160>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fca:	4a08      	ldr	r2, [pc, #32]	@ (8002fec <HAL_TIM_Base_MspInit+0x160>)
 8002fcc:	f043 0320 	orr.w	r3, r3, #32
 8002fd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fd2:	4b06      	ldr	r3, [pc, #24]	@ (8002fec <HAL_TIM_Base_MspInit+0x160>)
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd6:	f003 0320 	and.w	r3, r3, #32
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
}
 8002fde:	bf00      	nop
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40010000 	.word	0x40010000
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	2000031c 	.word	0x2000031c
 8002ff4:	40026428 	.word	0x40026428
 8002ff8:	2000037c 	.word	0x2000037c
 8002ffc:	40026440 	.word	0x40026440
 8003000:	40001000 	.word	0x40001000
 8003004:	40001400 	.word	0x40001400

08003008 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b08a      	sub	sp, #40	@ 0x28
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003010:	f107 0314 	add.w	r3, r7, #20
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	60da      	str	r2, [r3, #12]
 800301e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a1d      	ldr	r2, [pc, #116]	@ (800309c <HAL_TIM_IC_MspInit+0x94>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d133      	bne.n	8003092 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	4b1c      	ldr	r3, [pc, #112]	@ (80030a0 <HAL_TIM_IC_MspInit+0x98>)
 8003030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003032:	4a1b      	ldr	r2, [pc, #108]	@ (80030a0 <HAL_TIM_IC_MspInit+0x98>)
 8003034:	f043 0302 	orr.w	r3, r3, #2
 8003038:	6413      	str	r3, [r2, #64]	@ 0x40
 800303a:	4b19      	ldr	r3, [pc, #100]	@ (80030a0 <HAL_TIM_IC_MspInit+0x98>)
 800303c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	4b15      	ldr	r3, [pc, #84]	@ (80030a0 <HAL_TIM_IC_MspInit+0x98>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304e:	4a14      	ldr	r2, [pc, #80]	@ (80030a0 <HAL_TIM_IC_MspInit+0x98>)
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	6313      	str	r3, [r2, #48]	@ 0x30
 8003056:	4b12      	ldr	r3, [pc, #72]	@ (80030a0 <HAL_TIM_IC_MspInit+0x98>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003062:	2340      	movs	r3, #64	@ 0x40
 8003064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003066:	2302      	movs	r3, #2
 8003068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306a:	2300      	movs	r3, #0
 800306c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306e:	2300      	movs	r3, #0
 8003070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003072:	2302      	movs	r3, #2
 8003074:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003076:	f107 0314 	add.w	r3, r7, #20
 800307a:	4619      	mov	r1, r3
 800307c:	4809      	ldr	r0, [pc, #36]	@ (80030a4 <HAL_TIM_IC_MspInit+0x9c>)
 800307e:	f000 ffb9 	bl	8003ff4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003082:	2200      	movs	r2, #0
 8003084:	2100      	movs	r1, #0
 8003086:	201d      	movs	r0, #29
 8003088:	f000 fb6d 	bl	8003766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800308c:	201d      	movs	r0, #29
 800308e:	f000 fb86 	bl	800379e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8003092:	bf00      	nop
 8003094:	3728      	adds	r7, #40	@ 0x28
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40000400 	.word	0x40000400
 80030a0:	40023800 	.word	0x40023800
 80030a4:	40020000 	.word	0x40020000

080030a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b088      	sub	sp, #32
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b0:	f107 030c 	add.w	r3, r7, #12
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	605a      	str	r2, [r3, #4]
 80030ba:	609a      	str	r2, [r3, #8]
 80030bc:	60da      	str	r2, [r3, #12]
 80030be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a12      	ldr	r2, [pc, #72]	@ (8003110 <HAL_TIM_MspPostInit+0x68>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d11e      	bne.n	8003108 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ca:	2300      	movs	r3, #0
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	4b11      	ldr	r3, [pc, #68]	@ (8003114 <HAL_TIM_MspPostInit+0x6c>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d2:	4a10      	ldr	r2, [pc, #64]	@ (8003114 <HAL_TIM_MspPostInit+0x6c>)
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030da:	4b0e      	ldr	r3, [pc, #56]	@ (8003114 <HAL_TIM_MspPostInit+0x6c>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	60bb      	str	r3, [r7, #8]
 80030e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80030e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80030ea:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ec:	2302      	movs	r3, #2
 80030ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f4:	2300      	movs	r3, #0
 80030f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80030f8:	2301      	movs	r3, #1
 80030fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030fc:	f107 030c 	add.w	r3, r7, #12
 8003100:	4619      	mov	r1, r3
 8003102:	4805      	ldr	r0, [pc, #20]	@ (8003118 <HAL_TIM_MspPostInit+0x70>)
 8003104:	f000 ff76 	bl	8003ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003108:	bf00      	nop
 800310a:	3720      	adds	r7, #32
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40010000 	.word	0x40010000
 8003114:	40023800 	.word	0x40023800
 8003118:	40020000 	.word	0x40020000

0800311c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08a      	sub	sp, #40	@ 0x28
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003124:	f107 0314 	add.w	r3, r7, #20
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	605a      	str	r2, [r3, #4]
 800312e:	609a      	str	r2, [r3, #8]
 8003130:	60da      	str	r2, [r3, #12]
 8003132:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a1d      	ldr	r2, [pc, #116]	@ (80031b0 <HAL_UART_MspInit+0x94>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d133      	bne.n	80031a6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	613b      	str	r3, [r7, #16]
 8003142:	4b1c      	ldr	r3, [pc, #112]	@ (80031b4 <HAL_UART_MspInit+0x98>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	4a1b      	ldr	r2, [pc, #108]	@ (80031b4 <HAL_UART_MspInit+0x98>)
 8003148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800314c:	6413      	str	r3, [r2, #64]	@ 0x40
 800314e:	4b19      	ldr	r3, [pc, #100]	@ (80031b4 <HAL_UART_MspInit+0x98>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003156:	613b      	str	r3, [r7, #16]
 8003158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	4b15      	ldr	r3, [pc, #84]	@ (80031b4 <HAL_UART_MspInit+0x98>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003162:	4a14      	ldr	r2, [pc, #80]	@ (80031b4 <HAL_UART_MspInit+0x98>)
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	6313      	str	r3, [r2, #48]	@ 0x30
 800316a:	4b12      	ldr	r3, [pc, #72]	@ (80031b4 <HAL_UART_MspInit+0x98>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003176:	230c      	movs	r3, #12
 8003178:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317a:	2302      	movs	r3, #2
 800317c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317e:	2300      	movs	r3, #0
 8003180:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003182:	2303      	movs	r3, #3
 8003184:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003186:	2307      	movs	r3, #7
 8003188:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800318a:	f107 0314 	add.w	r3, r7, #20
 800318e:	4619      	mov	r1, r3
 8003190:	4809      	ldr	r0, [pc, #36]	@ (80031b8 <HAL_UART_MspInit+0x9c>)
 8003192:	f000 ff2f 	bl	8003ff4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003196:	2200      	movs	r2, #0
 8003198:	2100      	movs	r1, #0
 800319a:	2026      	movs	r0, #38	@ 0x26
 800319c:	f000 fae3 	bl	8003766 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80031a0:	2026      	movs	r0, #38	@ 0x26
 80031a2:	f000 fafc 	bl	800379e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80031a6:	bf00      	nop
 80031a8:	3728      	adds	r7, #40	@ 0x28
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	40004400 	.word	0x40004400
 80031b4:	40023800 	.word	0x40023800
 80031b8:	40020000 	.word	0x40020000

080031bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031c0:	bf00      	nop
 80031c2:	e7fd      	b.n	80031c0 <NMI_Handler+0x4>

080031c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031c8:	bf00      	nop
 80031ca:	e7fd      	b.n	80031c8 <HardFault_Handler+0x4>

080031cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031d0:	bf00      	nop
 80031d2:	e7fd      	b.n	80031d0 <MemManage_Handler+0x4>

080031d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031d8:	bf00      	nop
 80031da:	e7fd      	b.n	80031d8 <BusFault_Handler+0x4>

080031dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031e0:	bf00      	nop
 80031e2:	e7fd      	b.n	80031e0 <UsageFault_Handler+0x4>

080031e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031e8:	bf00      	nop
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031f2:	b480      	push	{r7}
 80031f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031f6:	bf00      	nop
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003204:	bf00      	nop
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003212:	f000 f989 	bl	8003528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003216:	bf00      	nop
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003220:	4802      	ldr	r0, [pc, #8]	@ (800322c <TIM3_IRQHandler+0x10>)
 8003222:	f002 fcef 	bl	8005c04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003226:	bf00      	nop
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20000244 	.word	0x20000244

08003230 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003234:	4802      	ldr	r0, [pc, #8]	@ (8003240 <USART2_IRQHandler+0x10>)
 8003236:	f003 ff97 	bl	8007168 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800323a:	bf00      	nop
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	200003dc 	.word	0x200003dc

08003244 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003248:	4802      	ldr	r0, [pc, #8]	@ (8003254 <TIM6_DAC_IRQHandler+0x10>)
 800324a:	f002 fcdb 	bl	8005c04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800324e:	bf00      	nop
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	2000028c 	.word	0x2000028c

08003258 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 800325c:	4802      	ldr	r0, [pc, #8]	@ (8003268 <DMA2_Stream1_IRQHandler+0x10>)
 800325e:	f000 fc5f 	bl	8003b20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003262:	bf00      	nop
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	2000031c 	.word	0x2000031c

0800326c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8003270:	4802      	ldr	r0, [pc, #8]	@ (800327c <DMA2_Stream2_IRQHandler+0x10>)
 8003272:	f000 fc55 	bl	8003b20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003276:	bf00      	nop
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	2000037c 	.word	0x2000037c

08003280 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  return 1;
 8003284:	2301      	movs	r3, #1
}
 8003286:	4618      	mov	r0, r3
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <_kill>:

int _kill(int pid, int sig)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800329a:	f005 fca5 	bl	8008be8 <__errno>
 800329e:	4603      	mov	r3, r0
 80032a0:	2216      	movs	r2, #22
 80032a2:	601a      	str	r2, [r3, #0]
  return -1;
 80032a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <_exit>:

void _exit (int status)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80032b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7ff ffe7 	bl	8003290 <_kill>
  while (1) {}    /* Make sure we hang here */
 80032c2:	bf00      	nop
 80032c4:	e7fd      	b.n	80032c2 <_exit+0x12>

080032c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b086      	sub	sp, #24
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032d2:	2300      	movs	r3, #0
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	e00a      	b.n	80032ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80032d8:	f3af 8000 	nop.w
 80032dc:	4601      	mov	r1, r0
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	60ba      	str	r2, [r7, #8]
 80032e4:	b2ca      	uxtb	r2, r1
 80032e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	3301      	adds	r3, #1
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	dbf0      	blt.n	80032d8 <_read+0x12>
  }

  return len;
 80032f6:	687b      	ldr	r3, [r7, #4]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	e009      	b.n	8003326 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	60ba      	str	r2, [r7, #8]
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	3301      	adds	r3, #1
 8003324:	617b      	str	r3, [r7, #20]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	429a      	cmp	r2, r3
 800332c:	dbf1      	blt.n	8003312 <_write+0x12>
  }
  return len;
 800332e:	687b      	ldr	r3, [r7, #4]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <_close>:

int _close(int file)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003340:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003344:	4618      	mov	r0, r3
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003360:	605a      	str	r2, [r3, #4]
  return 0;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <_isatty>:

int _isatty(int file)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003378:	2301      	movs	r3, #1
}
 800337a:	4618      	mov	r0, r3
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003386:	b480      	push	{r7}
 8003388:	b085      	sub	sp, #20
 800338a:	af00      	add	r7, sp, #0
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033a8:	4a14      	ldr	r2, [pc, #80]	@ (80033fc <_sbrk+0x5c>)
 80033aa:	4b15      	ldr	r3, [pc, #84]	@ (8003400 <_sbrk+0x60>)
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033b4:	4b13      	ldr	r3, [pc, #76]	@ (8003404 <_sbrk+0x64>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d102      	bne.n	80033c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033bc:	4b11      	ldr	r3, [pc, #68]	@ (8003404 <_sbrk+0x64>)
 80033be:	4a12      	ldr	r2, [pc, #72]	@ (8003408 <_sbrk+0x68>)
 80033c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033c2:	4b10      	ldr	r3, [pc, #64]	@ (8003404 <_sbrk+0x64>)
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4413      	add	r3, r2
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d207      	bcs.n	80033e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033d0:	f005 fc0a 	bl	8008be8 <__errno>
 80033d4:	4603      	mov	r3, r0
 80033d6:	220c      	movs	r2, #12
 80033d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80033de:	e009      	b.n	80033f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033e0:	4b08      	ldr	r3, [pc, #32]	@ (8003404 <_sbrk+0x64>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033e6:	4b07      	ldr	r3, [pc, #28]	@ (8003404 <_sbrk+0x64>)
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4413      	add	r3, r2
 80033ee:	4a05      	ldr	r2, [pc, #20]	@ (8003404 <_sbrk+0x64>)
 80033f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033f2:	68fb      	ldr	r3, [r7, #12]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	20020000 	.word	0x20020000
 8003400:	00000400 	.word	0x00000400
 8003404:	20005084 	.word	0x20005084
 8003408:	200051d8 	.word	0x200051d8

0800340c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003410:	4b06      	ldr	r3, [pc, #24]	@ (800342c <SystemInit+0x20>)
 8003412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003416:	4a05      	ldr	r2, [pc, #20]	@ (800342c <SystemInit+0x20>)
 8003418:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800341c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003420:	bf00      	nop
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	e000ed00 	.word	0xe000ed00

08003430 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003430:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003468 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003434:	f7ff ffea 	bl	800340c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003438:	480c      	ldr	r0, [pc, #48]	@ (800346c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800343a:	490d      	ldr	r1, [pc, #52]	@ (8003470 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800343c:	4a0d      	ldr	r2, [pc, #52]	@ (8003474 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800343e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003440:	e002      	b.n	8003448 <LoopCopyDataInit>

08003442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003446:	3304      	adds	r3, #4

08003448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800344a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800344c:	d3f9      	bcc.n	8003442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800344e:	4a0a      	ldr	r2, [pc, #40]	@ (8003478 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003450:	4c0a      	ldr	r4, [pc, #40]	@ (800347c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003454:	e001      	b.n	800345a <LoopFillZerobss>

08003456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003458:	3204      	adds	r2, #4

0800345a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800345a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800345c:	d3fb      	bcc.n	8003456 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800345e:	f005 fbc9 	bl	8008bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003462:	f7ff fa0b 	bl	800287c <main>
  bx  lr    
 8003466:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003468:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800346c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003470:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003474:	0800b230 	.word	0x0800b230
  ldr r2, =_sbss
 8003478:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800347c:	200051d8 	.word	0x200051d8

08003480 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003480:	e7fe      	b.n	8003480 <ADC_IRQHandler>
	...

08003484 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003488:	4b0e      	ldr	r3, [pc, #56]	@ (80034c4 <HAL_Init+0x40>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a0d      	ldr	r2, [pc, #52]	@ (80034c4 <HAL_Init+0x40>)
 800348e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003492:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003494:	4b0b      	ldr	r3, [pc, #44]	@ (80034c4 <HAL_Init+0x40>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a0a      	ldr	r2, [pc, #40]	@ (80034c4 <HAL_Init+0x40>)
 800349a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800349e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034a0:	4b08      	ldr	r3, [pc, #32]	@ (80034c4 <HAL_Init+0x40>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a07      	ldr	r2, [pc, #28]	@ (80034c4 <HAL_Init+0x40>)
 80034a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034ac:	2003      	movs	r0, #3
 80034ae:	f000 f94f 	bl	8003750 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034b2:	2000      	movs	r0, #0
 80034b4:	f000 f808 	bl	80034c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034b8:	f7ff fcc0 	bl	8002e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40023c00 	.word	0x40023c00

080034c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034d0:	4b12      	ldr	r3, [pc, #72]	@ (800351c <HAL_InitTick+0x54>)
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	4b12      	ldr	r3, [pc, #72]	@ (8003520 <HAL_InitTick+0x58>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	4619      	mov	r1, r3
 80034da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034de:	fbb3 f3f1 	udiv	r3, r3, r1
 80034e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 f975 	bl	80037d6 <HAL_SYSTICK_Config>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e00e      	b.n	8003514 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b0f      	cmp	r3, #15
 80034fa:	d80a      	bhi.n	8003512 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034fc:	2200      	movs	r2, #0
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003504:	f000 f92f 	bl	8003766 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003508:	4a06      	ldr	r2, [pc, #24]	@ (8003524 <HAL_InitTick+0x5c>)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	e000      	b.n	8003514 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
}
 8003514:	4618      	mov	r0, r3
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	20000000 	.word	0x20000000
 8003520:	20000008 	.word	0x20000008
 8003524:	20000004 	.word	0x20000004

08003528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800352c:	4b06      	ldr	r3, [pc, #24]	@ (8003548 <HAL_IncTick+0x20>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	461a      	mov	r2, r3
 8003532:	4b06      	ldr	r3, [pc, #24]	@ (800354c <HAL_IncTick+0x24>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4413      	add	r3, r2
 8003538:	4a04      	ldr	r2, [pc, #16]	@ (800354c <HAL_IncTick+0x24>)
 800353a:	6013      	str	r3, [r2, #0]
}
 800353c:	bf00      	nop
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	20000008 	.word	0x20000008
 800354c:	20005088 	.word	0x20005088

08003550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  return uwTick;
 8003554:	4b03      	ldr	r3, [pc, #12]	@ (8003564 <HAL_GetTick+0x14>)
 8003556:	681b      	ldr	r3, [r3, #0]
}
 8003558:	4618      	mov	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	20005088 	.word	0x20005088

08003568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003578:	4b0c      	ldr	r3, [pc, #48]	@ (80035ac <__NVIC_SetPriorityGrouping+0x44>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003584:	4013      	ands	r3, r2
 8003586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003590:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003594:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800359a:	4a04      	ldr	r2, [pc, #16]	@ (80035ac <__NVIC_SetPriorityGrouping+0x44>)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	60d3      	str	r3, [r2, #12]
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	e000ed00 	.word	0xe000ed00

080035b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035b4:	4b04      	ldr	r3, [pc, #16]	@ (80035c8 <__NVIC_GetPriorityGrouping+0x18>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	0a1b      	lsrs	r3, r3, #8
 80035ba:	f003 0307 	and.w	r3, r3, #7
}
 80035be:	4618      	mov	r0, r3
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	e000ed00 	.word	0xe000ed00

080035cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	db0b      	blt.n	80035f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	f003 021f 	and.w	r2, r3, #31
 80035e4:	4907      	ldr	r1, [pc, #28]	@ (8003604 <__NVIC_EnableIRQ+0x38>)
 80035e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	2001      	movs	r0, #1
 80035ee:	fa00 f202 	lsl.w	r2, r0, r2
 80035f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	e000e100 	.word	0xe000e100

08003608 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003616:	2b00      	cmp	r3, #0
 8003618:	db12      	blt.n	8003640 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800361a:	79fb      	ldrb	r3, [r7, #7]
 800361c:	f003 021f 	and.w	r2, r3, #31
 8003620:	490a      	ldr	r1, [pc, #40]	@ (800364c <__NVIC_DisableIRQ+0x44>)
 8003622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003626:	095b      	lsrs	r3, r3, #5
 8003628:	2001      	movs	r0, #1
 800362a:	fa00 f202 	lsl.w	r2, r0, r2
 800362e:	3320      	adds	r3, #32
 8003630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003634:	f3bf 8f4f 	dsb	sy
}
 8003638:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800363a:	f3bf 8f6f 	isb	sy
}
 800363e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	e000e100 	.word	0xe000e100

08003650 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	4603      	mov	r3, r0
 8003658:	6039      	str	r1, [r7, #0]
 800365a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800365c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003660:	2b00      	cmp	r3, #0
 8003662:	db0a      	blt.n	800367a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	b2da      	uxtb	r2, r3
 8003668:	490c      	ldr	r1, [pc, #48]	@ (800369c <__NVIC_SetPriority+0x4c>)
 800366a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366e:	0112      	lsls	r2, r2, #4
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	440b      	add	r3, r1
 8003674:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003678:	e00a      	b.n	8003690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	b2da      	uxtb	r2, r3
 800367e:	4908      	ldr	r1, [pc, #32]	@ (80036a0 <__NVIC_SetPriority+0x50>)
 8003680:	79fb      	ldrb	r3, [r7, #7]
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	3b04      	subs	r3, #4
 8003688:	0112      	lsls	r2, r2, #4
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	440b      	add	r3, r1
 800368e:	761a      	strb	r2, [r3, #24]
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	e000e100 	.word	0xe000e100
 80036a0:	e000ed00 	.word	0xe000ed00

080036a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b089      	sub	sp, #36	@ 0x24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f1c3 0307 	rsb	r3, r3, #7
 80036be:	2b04      	cmp	r3, #4
 80036c0:	bf28      	it	cs
 80036c2:	2304      	movcs	r3, #4
 80036c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	3304      	adds	r3, #4
 80036ca:	2b06      	cmp	r3, #6
 80036cc:	d902      	bls.n	80036d4 <NVIC_EncodePriority+0x30>
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	3b03      	subs	r3, #3
 80036d2:	e000      	b.n	80036d6 <NVIC_EncodePriority+0x32>
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	43da      	mvns	r2, r3
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	401a      	ands	r2, r3
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	fa01 f303 	lsl.w	r3, r1, r3
 80036f6:	43d9      	mvns	r1, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036fc:	4313      	orrs	r3, r2
         );
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3724      	adds	r7, #36	@ 0x24
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
	...

0800370c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b082      	sub	sp, #8
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3b01      	subs	r3, #1
 8003718:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800371c:	d301      	bcc.n	8003722 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800371e:	2301      	movs	r3, #1
 8003720:	e00f      	b.n	8003742 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003722:	4a0a      	ldr	r2, [pc, #40]	@ (800374c <SysTick_Config+0x40>)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3b01      	subs	r3, #1
 8003728:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800372a:	210f      	movs	r1, #15
 800372c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003730:	f7ff ff8e 	bl	8003650 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003734:	4b05      	ldr	r3, [pc, #20]	@ (800374c <SysTick_Config+0x40>)
 8003736:	2200      	movs	r2, #0
 8003738:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800373a:	4b04      	ldr	r3, [pc, #16]	@ (800374c <SysTick_Config+0x40>)
 800373c:	2207      	movs	r2, #7
 800373e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	e000e010 	.word	0xe000e010

08003750 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7ff ff05 	bl	8003568 <__NVIC_SetPriorityGrouping>
}
 800375e:	bf00      	nop
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003766:	b580      	push	{r7, lr}
 8003768:	b086      	sub	sp, #24
 800376a:	af00      	add	r7, sp, #0
 800376c:	4603      	mov	r3, r0
 800376e:	60b9      	str	r1, [r7, #8]
 8003770:	607a      	str	r2, [r7, #4]
 8003772:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003774:	2300      	movs	r3, #0
 8003776:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003778:	f7ff ff1a 	bl	80035b0 <__NVIC_GetPriorityGrouping>
 800377c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	68b9      	ldr	r1, [r7, #8]
 8003782:	6978      	ldr	r0, [r7, #20]
 8003784:	f7ff ff8e 	bl	80036a4 <NVIC_EncodePriority>
 8003788:	4602      	mov	r2, r0
 800378a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800378e:	4611      	mov	r1, r2
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff ff5d 	bl	8003650 <__NVIC_SetPriority>
}
 8003796:	bf00      	nop
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	4603      	mov	r3, r0
 80037a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff ff0d 	bl	80035cc <__NVIC_EnableIRQ>
}
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	4603      	mov	r3, r0
 80037c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80037c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff ff1d 	bl	8003608 <__NVIC_DisableIRQ>
}
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b082      	sub	sp, #8
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7ff ff94 	bl	800370c <SysTick_Config>
 80037e4:	4603      	mov	r3, r0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037f8:	2300      	movs	r3, #0
 80037fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037fc:	f7ff fea8 	bl	8003550 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e099      	b.n	8003940 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0201 	bic.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800382c:	e00f      	b.n	800384e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800382e:	f7ff fe8f 	bl	8003550 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b05      	cmp	r3, #5
 800383a:	d908      	bls.n	800384e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2220      	movs	r2, #32
 8003840:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2203      	movs	r2, #3
 8003846:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e078      	b.n	8003940 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1e8      	bne.n	800382e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	4b38      	ldr	r3, [pc, #224]	@ (8003948 <HAL_DMA_Init+0x158>)
 8003868:	4013      	ands	r3, r2
 800386a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800387a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003886:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003892:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	4313      	orrs	r3, r2
 800389e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d107      	bne.n	80038b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b0:	4313      	orrs	r3, r2
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f023 0307 	bic.w	r3, r3, #7
 80038ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038de:	2b04      	cmp	r3, #4
 80038e0:	d117      	bne.n	8003912 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d00e      	beq.n	8003912 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fb01 	bl	8003efc <DMA_CheckFifoParam>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d008      	beq.n	8003912 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2240      	movs	r2, #64	@ 0x40
 8003904:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800390e:	2301      	movs	r3, #1
 8003910:	e016      	b.n	8003940 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 fab8 	bl	8003e90 <DMA_CalcBaseAndBitshift>
 8003920:	4603      	mov	r3, r0
 8003922:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003928:	223f      	movs	r2, #63	@ 0x3f
 800392a:	409a      	lsls	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	f010803f 	.word	0xf010803f

0800394c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
 8003958:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003962:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800396a:	2b01      	cmp	r3, #1
 800396c:	d101      	bne.n	8003972 <HAL_DMA_Start_IT+0x26>
 800396e:	2302      	movs	r3, #2
 8003970:	e040      	b.n	80039f4 <HAL_DMA_Start_IT+0xa8>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b01      	cmp	r3, #1
 8003984:	d12f      	bne.n	80039e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2202      	movs	r2, #2
 800398a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	68b9      	ldr	r1, [r7, #8]
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 fa4a 	bl	8003e34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039a4:	223f      	movs	r2, #63	@ 0x3f
 80039a6:	409a      	lsls	r2, r3
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0216 	orr.w	r2, r2, #22
 80039ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d007      	beq.n	80039d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0208 	orr.w	r2, r2, #8
 80039d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0201 	orr.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	e005      	b.n	80039f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80039ee:	2302      	movs	r3, #2
 80039f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3718      	adds	r7, #24
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a08:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a0a:	f7ff fda1 	bl	8003550 <HAL_GetTick>
 8003a0e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d008      	beq.n	8003a2e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2280      	movs	r2, #128	@ 0x80
 8003a20:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e052      	b.n	8003ad4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0216 	bic.w	r2, r2, #22
 8003a3c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695a      	ldr	r2, [r3, #20]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a4c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d103      	bne.n	8003a5e <HAL_DMA_Abort+0x62>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0208 	bic.w	r2, r2, #8
 8003a6c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0201 	bic.w	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a7e:	e013      	b.n	8003aa8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a80:	f7ff fd66 	bl	8003550 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	2b05      	cmp	r3, #5
 8003a8c:	d90c      	bls.n	8003aa8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2220      	movs	r2, #32
 8003a92:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2203      	movs	r2, #3
 8003a98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e015      	b.n	8003ad4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1e4      	bne.n	8003a80 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aba:	223f      	movs	r2, #63	@ 0x3f
 8003abc:	409a      	lsls	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d004      	beq.n	8003afa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2280      	movs	r2, #128	@ 0x80
 8003af4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e00c      	b.n	8003b14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2205      	movs	r2, #5
 8003afe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0201 	bic.w	r2, r2, #1
 8003b10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b2c:	4b8e      	ldr	r3, [pc, #568]	@ (8003d68 <HAL_DMA_IRQHandler+0x248>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a8e      	ldr	r2, [pc, #568]	@ (8003d6c <HAL_DMA_IRQHandler+0x24c>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	0a9b      	lsrs	r3, r3, #10
 8003b38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b4a:	2208      	movs	r2, #8
 8003b4c:	409a      	lsls	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	4013      	ands	r3, r2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d01a      	beq.n	8003b8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d013      	beq.n	8003b8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0204 	bic.w	r2, r2, #4
 8003b72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b78:	2208      	movs	r2, #8
 8003b7a:	409a      	lsls	r2, r3
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b84:	f043 0201 	orr.w	r2, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b90:	2201      	movs	r2, #1
 8003b92:	409a      	lsls	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4013      	ands	r3, r2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d012      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00b      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bae:	2201      	movs	r2, #1
 8003bb0:	409a      	lsls	r2, r3
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bba:	f043 0202 	orr.w	r2, r3, #2
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc6:	2204      	movs	r2, #4
 8003bc8:	409a      	lsls	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d012      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00b      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003be4:	2204      	movs	r2, #4
 8003be6:	409a      	lsls	r2, r3
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf0:	f043 0204 	orr.w	r2, r3, #4
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bfc:	2210      	movs	r2, #16
 8003bfe:	409a      	lsls	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4013      	ands	r3, r2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d043      	beq.n	8003c90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d03c      	beq.n	8003c90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c1a:	2210      	movs	r2, #16
 8003c1c:	409a      	lsls	r2, r3
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d018      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d108      	bne.n	8003c50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d024      	beq.n	8003c90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	4798      	blx	r3
 8003c4e:	e01f      	b.n	8003c90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d01b      	beq.n	8003c90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	4798      	blx	r3
 8003c60:	e016      	b.n	8003c90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d107      	bne.n	8003c80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0208 	bic.w	r2, r2, #8
 8003c7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c94:	2220      	movs	r2, #32
 8003c96:	409a      	lsls	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 808f 	beq.w	8003dc0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0310 	and.w	r3, r3, #16
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 8087 	beq.w	8003dc0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	409a      	lsls	r2, r3
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b05      	cmp	r3, #5
 8003cc8:	d136      	bne.n	8003d38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0216 	bic.w	r2, r2, #22
 8003cd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695a      	ldr	r2, [r3, #20]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ce8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d103      	bne.n	8003cfa <HAL_DMA_IRQHandler+0x1da>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d007      	beq.n	8003d0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0208 	bic.w	r2, r2, #8
 8003d08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d0e:	223f      	movs	r2, #63	@ 0x3f
 8003d10:	409a      	lsls	r2, r3
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d07e      	beq.n	8003e2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	4798      	blx	r3
        }
        return;
 8003d36:	e079      	b.n	8003e2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d01d      	beq.n	8003d82 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10d      	bne.n	8003d70 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d031      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	4798      	blx	r3
 8003d64:	e02c      	b.n	8003dc0 <HAL_DMA_IRQHandler+0x2a0>
 8003d66:	bf00      	nop
 8003d68:	20000000 	.word	0x20000000
 8003d6c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d023      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	4798      	blx	r3
 8003d80:	e01e      	b.n	8003dc0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10f      	bne.n	8003db0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0210 	bic.w	r2, r2, #16
 8003d9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d003      	beq.n	8003dc0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d032      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d022      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2205      	movs	r2, #5
 8003dd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0201 	bic.w	r2, r2, #1
 8003dea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	3301      	adds	r3, #1
 8003df0:	60bb      	str	r3, [r7, #8]
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d307      	bcc.n	8003e08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d1f2      	bne.n	8003dec <HAL_DMA_IRQHandler+0x2cc>
 8003e06:	e000      	b.n	8003e0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003e08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d005      	beq.n	8003e2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	4798      	blx	r3
 8003e2a:	e000      	b.n	8003e2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003e2c:	bf00      	nop
    }
  }
}
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003e50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	2b40      	cmp	r3, #64	@ 0x40
 8003e60:	d108      	bne.n	8003e74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e72:	e007      	b.n	8003e84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	60da      	str	r2, [r3, #12]
}
 8003e84:	bf00      	nop
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	3b10      	subs	r3, #16
 8003ea0:	4a14      	ldr	r2, [pc, #80]	@ (8003ef4 <DMA_CalcBaseAndBitshift+0x64>)
 8003ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea6:	091b      	lsrs	r3, r3, #4
 8003ea8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003eaa:	4a13      	ldr	r2, [pc, #76]	@ (8003ef8 <DMA_CalcBaseAndBitshift+0x68>)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4413      	add	r3, r2
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	d909      	bls.n	8003ed2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003ec6:	f023 0303 	bic.w	r3, r3, #3
 8003eca:	1d1a      	adds	r2, r3, #4
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ed0:	e007      	b.n	8003ee2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003eda:	f023 0303 	bic.w	r3, r3, #3
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	aaaaaaab 	.word	0xaaaaaaab
 8003ef8:	0800aea8 	.word	0x0800aea8

08003efc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f04:	2300      	movs	r3, #0
 8003f06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d11f      	bne.n	8003f56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b03      	cmp	r3, #3
 8003f1a:	d856      	bhi.n	8003fca <DMA_CheckFifoParam+0xce>
 8003f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f24 <DMA_CheckFifoParam+0x28>)
 8003f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f22:	bf00      	nop
 8003f24:	08003f35 	.word	0x08003f35
 8003f28:	08003f47 	.word	0x08003f47
 8003f2c:	08003f35 	.word	0x08003f35
 8003f30:	08003fcb 	.word	0x08003fcb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d046      	beq.n	8003fce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f44:	e043      	b.n	8003fce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f4e:	d140      	bne.n	8003fd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f54:	e03d      	b.n	8003fd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f5e:	d121      	bne.n	8003fa4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2b03      	cmp	r3, #3
 8003f64:	d837      	bhi.n	8003fd6 <DMA_CheckFifoParam+0xda>
 8003f66:	a201      	add	r2, pc, #4	@ (adr r2, 8003f6c <DMA_CheckFifoParam+0x70>)
 8003f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6c:	08003f7d 	.word	0x08003f7d
 8003f70:	08003f83 	.word	0x08003f83
 8003f74:	08003f7d 	.word	0x08003f7d
 8003f78:	08003f95 	.word	0x08003f95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f80:	e030      	b.n	8003fe4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d025      	beq.n	8003fda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f92:	e022      	b.n	8003fda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f98:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f9c:	d11f      	bne.n	8003fde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003fa2:	e01c      	b.n	8003fde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d903      	bls.n	8003fb2 <DMA_CheckFifoParam+0xb6>
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2b03      	cmp	r3, #3
 8003fae:	d003      	beq.n	8003fb8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003fb0:	e018      	b.n	8003fe4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	73fb      	strb	r3, [r7, #15]
      break;
 8003fb6:	e015      	b.n	8003fe4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00e      	beq.n	8003fe2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003fc8:	e00b      	b.n	8003fe2 <DMA_CheckFifoParam+0xe6>
      break;
 8003fca:	bf00      	nop
 8003fcc:	e00a      	b.n	8003fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8003fce:	bf00      	nop
 8003fd0:	e008      	b.n	8003fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8003fd2:	bf00      	nop
 8003fd4:	e006      	b.n	8003fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8003fd6:	bf00      	nop
 8003fd8:	e004      	b.n	8003fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8003fda:	bf00      	nop
 8003fdc:	e002      	b.n	8003fe4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003fde:	bf00      	nop
 8003fe0:	e000      	b.n	8003fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8003fe2:	bf00      	nop
    }
  } 
  
  return status; 
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop

08003ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b089      	sub	sp, #36	@ 0x24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004002:	2300      	movs	r3, #0
 8004004:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004006:	2300      	movs	r3, #0
 8004008:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800400a:	2300      	movs	r3, #0
 800400c:	61fb      	str	r3, [r7, #28]
 800400e:	e165      	b.n	80042dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004010:	2201      	movs	r2, #1
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4013      	ands	r3, r2
 8004022:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	429a      	cmp	r2, r3
 800402a:	f040 8154 	bne.w	80042d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	2b01      	cmp	r3, #1
 8004038:	d005      	beq.n	8004046 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004042:	2b02      	cmp	r3, #2
 8004044:	d130      	bne.n	80040a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	2203      	movs	r2, #3
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	43db      	mvns	r3, r3
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	4013      	ands	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	4313      	orrs	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800407c:	2201      	movs	r2, #1
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	43db      	mvns	r3, r3
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	4013      	ands	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	091b      	lsrs	r3, r3, #4
 8004092:	f003 0201 	and.w	r2, r3, #1
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	fa02 f303 	lsl.w	r3, r2, r3
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	4313      	orrs	r3, r2
 80040a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f003 0303 	and.w	r3, r3, #3
 80040b0:	2b03      	cmp	r3, #3
 80040b2:	d017      	beq.n	80040e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	2203      	movs	r2, #3
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	43db      	mvns	r3, r3
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	4013      	ands	r3, r2
 80040ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	69ba      	ldr	r2, [r7, #24]
 80040da:	4313      	orrs	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f003 0303 	and.w	r3, r3, #3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d123      	bne.n	8004138 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	08da      	lsrs	r2, r3, #3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3208      	adds	r2, #8
 80040f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	220f      	movs	r2, #15
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	43db      	mvns	r3, r3
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	4013      	ands	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	f003 0307 	and.w	r3, r3, #7
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	fa02 f303 	lsl.w	r3, r2, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4313      	orrs	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	08da      	lsrs	r2, r3, #3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	3208      	adds	r2, #8
 8004132:	69b9      	ldr	r1, [r7, #24]
 8004134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	2203      	movs	r2, #3
 8004144:	fa02 f303 	lsl.w	r3, r2, r3
 8004148:	43db      	mvns	r3, r3
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	4013      	ands	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f003 0203 	and.w	r2, r3, #3
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	fa02 f303 	lsl.w	r3, r2, r3
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	4313      	orrs	r3, r2
 8004164:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 80ae 	beq.w	80042d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800417a:	2300      	movs	r3, #0
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	4b5d      	ldr	r3, [pc, #372]	@ (80042f4 <HAL_GPIO_Init+0x300>)
 8004180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004182:	4a5c      	ldr	r2, [pc, #368]	@ (80042f4 <HAL_GPIO_Init+0x300>)
 8004184:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004188:	6453      	str	r3, [r2, #68]	@ 0x44
 800418a:	4b5a      	ldr	r3, [pc, #360]	@ (80042f4 <HAL_GPIO_Init+0x300>)
 800418c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004196:	4a58      	ldr	r2, [pc, #352]	@ (80042f8 <HAL_GPIO_Init+0x304>)
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	089b      	lsrs	r3, r3, #2
 800419c:	3302      	adds	r3, #2
 800419e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	f003 0303 	and.w	r3, r3, #3
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	220f      	movs	r2, #15
 80041ae:	fa02 f303 	lsl.w	r3, r2, r3
 80041b2:	43db      	mvns	r3, r3
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	4013      	ands	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a4f      	ldr	r2, [pc, #316]	@ (80042fc <HAL_GPIO_Init+0x308>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d025      	beq.n	800420e <HAL_GPIO_Init+0x21a>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a4e      	ldr	r2, [pc, #312]	@ (8004300 <HAL_GPIO_Init+0x30c>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d01f      	beq.n	800420a <HAL_GPIO_Init+0x216>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a4d      	ldr	r2, [pc, #308]	@ (8004304 <HAL_GPIO_Init+0x310>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d019      	beq.n	8004206 <HAL_GPIO_Init+0x212>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a4c      	ldr	r2, [pc, #304]	@ (8004308 <HAL_GPIO_Init+0x314>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d013      	beq.n	8004202 <HAL_GPIO_Init+0x20e>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a4b      	ldr	r2, [pc, #300]	@ (800430c <HAL_GPIO_Init+0x318>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d00d      	beq.n	80041fe <HAL_GPIO_Init+0x20a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a4a      	ldr	r2, [pc, #296]	@ (8004310 <HAL_GPIO_Init+0x31c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d007      	beq.n	80041fa <HAL_GPIO_Init+0x206>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a49      	ldr	r2, [pc, #292]	@ (8004314 <HAL_GPIO_Init+0x320>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d101      	bne.n	80041f6 <HAL_GPIO_Init+0x202>
 80041f2:	2306      	movs	r3, #6
 80041f4:	e00c      	b.n	8004210 <HAL_GPIO_Init+0x21c>
 80041f6:	2307      	movs	r3, #7
 80041f8:	e00a      	b.n	8004210 <HAL_GPIO_Init+0x21c>
 80041fa:	2305      	movs	r3, #5
 80041fc:	e008      	b.n	8004210 <HAL_GPIO_Init+0x21c>
 80041fe:	2304      	movs	r3, #4
 8004200:	e006      	b.n	8004210 <HAL_GPIO_Init+0x21c>
 8004202:	2303      	movs	r3, #3
 8004204:	e004      	b.n	8004210 <HAL_GPIO_Init+0x21c>
 8004206:	2302      	movs	r3, #2
 8004208:	e002      	b.n	8004210 <HAL_GPIO_Init+0x21c>
 800420a:	2301      	movs	r3, #1
 800420c:	e000      	b.n	8004210 <HAL_GPIO_Init+0x21c>
 800420e:	2300      	movs	r3, #0
 8004210:	69fa      	ldr	r2, [r7, #28]
 8004212:	f002 0203 	and.w	r2, r2, #3
 8004216:	0092      	lsls	r2, r2, #2
 8004218:	4093      	lsls	r3, r2
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4313      	orrs	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004220:	4935      	ldr	r1, [pc, #212]	@ (80042f8 <HAL_GPIO_Init+0x304>)
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	089b      	lsrs	r3, r3, #2
 8004226:	3302      	adds	r3, #2
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800422e:	4b3a      	ldr	r3, [pc, #232]	@ (8004318 <HAL_GPIO_Init+0x324>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	43db      	mvns	r3, r3
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	4013      	ands	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	4313      	orrs	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004252:	4a31      	ldr	r2, [pc, #196]	@ (8004318 <HAL_GPIO_Init+0x324>)
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004258:	4b2f      	ldr	r3, [pc, #188]	@ (8004318 <HAL_GPIO_Init+0x324>)
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	43db      	mvns	r3, r3
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	4013      	ands	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	4313      	orrs	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800427c:	4a26      	ldr	r2, [pc, #152]	@ (8004318 <HAL_GPIO_Init+0x324>)
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004282:	4b25      	ldr	r3, [pc, #148]	@ (8004318 <HAL_GPIO_Init+0x324>)
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	43db      	mvns	r3, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4013      	ands	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80042a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004318 <HAL_GPIO_Init+0x324>)
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004318 <HAL_GPIO_Init+0x324>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	43db      	mvns	r3, r3
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	4013      	ands	r3, r2
 80042ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80042d0:	4a11      	ldr	r2, [pc, #68]	@ (8004318 <HAL_GPIO_Init+0x324>)
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	3301      	adds	r3, #1
 80042da:	61fb      	str	r3, [r7, #28]
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	2b0f      	cmp	r3, #15
 80042e0:	f67f ae96 	bls.w	8004010 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042e4:	bf00      	nop
 80042e6:	bf00      	nop
 80042e8:	3724      	adds	r7, #36	@ 0x24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	40023800 	.word	0x40023800
 80042f8:	40013800 	.word	0x40013800
 80042fc:	40020000 	.word	0x40020000
 8004300:	40020400 	.word	0x40020400
 8004304:	40020800 	.word	0x40020800
 8004308:	40020c00 	.word	0x40020c00
 800430c:	40021000 	.word	0x40021000
 8004310:	40021400 	.word	0x40021400
 8004314:	40021800 	.word	0x40021800
 8004318:	40013c00 	.word	0x40013c00

0800431c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	460b      	mov	r3, r1
 8004326:	807b      	strh	r3, [r7, #2]
 8004328:	4613      	mov	r3, r2
 800432a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800432c:	787b      	ldrb	r3, [r7, #1]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004332:	887a      	ldrh	r2, [r7, #2]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004338:	e003      	b.n	8004342 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800433a:	887b      	ldrh	r3, [r7, #2]
 800433c:	041a      	lsls	r2, r3, #16
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	619a      	str	r2, [r3, #24]
}
 8004342:	bf00      	nop
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
	...

08004350 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800435a:	2300      	movs	r3, #0
 800435c:	603b      	str	r3, [r7, #0]
 800435e:	4b20      	ldr	r3, [pc, #128]	@ (80043e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004362:	4a1f      	ldr	r2, [pc, #124]	@ (80043e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004364:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004368:	6413      	str	r3, [r2, #64]	@ 0x40
 800436a:	4b1d      	ldr	r3, [pc, #116]	@ (80043e0 <HAL_PWREx_EnableOverDrive+0x90>)
 800436c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004372:	603b      	str	r3, [r7, #0]
 8004374:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004376:	4b1b      	ldr	r3, [pc, #108]	@ (80043e4 <HAL_PWREx_EnableOverDrive+0x94>)
 8004378:	2201      	movs	r2, #1
 800437a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800437c:	f7ff f8e8 	bl	8003550 <HAL_GetTick>
 8004380:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004382:	e009      	b.n	8004398 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004384:	f7ff f8e4 	bl	8003550 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004392:	d901      	bls.n	8004398 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e01f      	b.n	80043d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004398:	4b13      	ldr	r3, [pc, #76]	@ (80043e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043a4:	d1ee      	bne.n	8004384 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80043a6:	4b11      	ldr	r3, [pc, #68]	@ (80043ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80043a8:	2201      	movs	r2, #1
 80043aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043ac:	f7ff f8d0 	bl	8003550 <HAL_GetTick>
 80043b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043b2:	e009      	b.n	80043c8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80043b4:	f7ff f8cc 	bl	8003550 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80043c2:	d901      	bls.n	80043c8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e007      	b.n	80043d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043c8:	4b07      	ldr	r3, [pc, #28]	@ (80043e8 <HAL_PWREx_EnableOverDrive+0x98>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043d4:	d1ee      	bne.n	80043b4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3708      	adds	r7, #8
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	40023800 	.word	0x40023800
 80043e4:	420e0040 	.word	0x420e0040
 80043e8:	40007000 	.word	0x40007000
 80043ec:	420e0044 	.word	0x420e0044

080043f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e0cc      	b.n	800459e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004404:	4b68      	ldr	r3, [pc, #416]	@ (80045a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 030f 	and.w	r3, r3, #15
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	429a      	cmp	r2, r3
 8004410:	d90c      	bls.n	800442c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004412:	4b65      	ldr	r3, [pc, #404]	@ (80045a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800441a:	4b63      	ldr	r3, [pc, #396]	@ (80045a8 <HAL_RCC_ClockConfig+0x1b8>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	429a      	cmp	r2, r3
 8004426:	d001      	beq.n	800442c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e0b8      	b.n	800459e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d020      	beq.n	800447a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d005      	beq.n	8004450 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004444:	4b59      	ldr	r3, [pc, #356]	@ (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	4a58      	ldr	r2, [pc, #352]	@ (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 800444a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800444e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0308 	and.w	r3, r3, #8
 8004458:	2b00      	cmp	r3, #0
 800445a:	d005      	beq.n	8004468 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800445c:	4b53      	ldr	r3, [pc, #332]	@ (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	4a52      	ldr	r2, [pc, #328]	@ (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 8004462:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004466:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004468:	4b50      	ldr	r3, [pc, #320]	@ (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	494d      	ldr	r1, [pc, #308]	@ (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 8004476:	4313      	orrs	r3, r2
 8004478:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	2b00      	cmp	r3, #0
 8004484:	d044      	beq.n	8004510 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d107      	bne.n	800449e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800448e:	4b47      	ldr	r3, [pc, #284]	@ (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d119      	bne.n	80044ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e07f      	b.n	800459e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d003      	beq.n	80044ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044aa:	2b03      	cmp	r3, #3
 80044ac:	d107      	bne.n	80044be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ae:	4b3f      	ldr	r3, [pc, #252]	@ (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d109      	bne.n	80044ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e06f      	b.n	800459e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044be:	4b3b      	ldr	r3, [pc, #236]	@ (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e067      	b.n	800459e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ce:	4b37      	ldr	r3, [pc, #220]	@ (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f023 0203 	bic.w	r2, r3, #3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	4934      	ldr	r1, [pc, #208]	@ (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044e0:	f7ff f836 	bl	8003550 <HAL_GetTick>
 80044e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e6:	e00a      	b.n	80044fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044e8:	f7ff f832 	bl	8003550 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e04f      	b.n	800459e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044fe:	4b2b      	ldr	r3, [pc, #172]	@ (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 020c 	and.w	r2, r3, #12
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	429a      	cmp	r2, r3
 800450e:	d1eb      	bne.n	80044e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004510:	4b25      	ldr	r3, [pc, #148]	@ (80045a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 030f 	and.w	r3, r3, #15
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	429a      	cmp	r2, r3
 800451c:	d20c      	bcs.n	8004538 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800451e:	4b22      	ldr	r3, [pc, #136]	@ (80045a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	b2d2      	uxtb	r2, r2
 8004524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004526:	4b20      	ldr	r3, [pc, #128]	@ (80045a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 030f 	and.w	r3, r3, #15
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d001      	beq.n	8004538 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e032      	b.n	800459e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	d008      	beq.n	8004556 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004544:	4b19      	ldr	r3, [pc, #100]	@ (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	4916      	ldr	r1, [pc, #88]	@ (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 8004552:	4313      	orrs	r3, r2
 8004554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d009      	beq.n	8004576 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004562:	4b12      	ldr	r3, [pc, #72]	@ (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	490e      	ldr	r1, [pc, #56]	@ (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 8004572:	4313      	orrs	r3, r2
 8004574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004576:	f000 f855 	bl	8004624 <HAL_RCC_GetSysClockFreq>
 800457a:	4602      	mov	r2, r0
 800457c:	4b0b      	ldr	r3, [pc, #44]	@ (80045ac <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	091b      	lsrs	r3, r3, #4
 8004582:	f003 030f 	and.w	r3, r3, #15
 8004586:	490a      	ldr	r1, [pc, #40]	@ (80045b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004588:	5ccb      	ldrb	r3, [r1, r3]
 800458a:	fa22 f303 	lsr.w	r3, r2, r3
 800458e:	4a09      	ldr	r2, [pc, #36]	@ (80045b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004592:	4b09      	ldr	r3, [pc, #36]	@ (80045b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f7fe ff96 	bl	80034c8 <HAL_InitTick>

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40023c00 	.word	0x40023c00
 80045ac:	40023800 	.word	0x40023800
 80045b0:	0800ae90 	.word	0x0800ae90
 80045b4:	20000000 	.word	0x20000000
 80045b8:	20000004 	.word	0x20000004

080045bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045c0:	4b03      	ldr	r3, [pc, #12]	@ (80045d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80045c2:	681b      	ldr	r3, [r3, #0]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	20000000 	.word	0x20000000

080045d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045d8:	f7ff fff0 	bl	80045bc <HAL_RCC_GetHCLKFreq>
 80045dc:	4602      	mov	r2, r0
 80045de:	4b05      	ldr	r3, [pc, #20]	@ (80045f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	0a9b      	lsrs	r3, r3, #10
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	4903      	ldr	r1, [pc, #12]	@ (80045f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045ea:	5ccb      	ldrb	r3, [r1, r3]
 80045ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40023800 	.word	0x40023800
 80045f8:	0800aea0 	.word	0x0800aea0

080045fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004600:	f7ff ffdc 	bl	80045bc <HAL_RCC_GetHCLKFreq>
 8004604:	4602      	mov	r2, r0
 8004606:	4b05      	ldr	r3, [pc, #20]	@ (800461c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	0b5b      	lsrs	r3, r3, #13
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	4903      	ldr	r1, [pc, #12]	@ (8004620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004612:	5ccb      	ldrb	r3, [r1, r3]
 8004614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004618:	4618      	mov	r0, r3
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40023800 	.word	0x40023800
 8004620:	0800aea0 	.word	0x0800aea0

08004624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004628:	b0ae      	sub	sp, #184	@ 0xb8
 800462a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800462c:	2300      	movs	r3, #0
 800462e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800463e:	2300      	movs	r3, #0
 8004640:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800464a:	4bcb      	ldr	r3, [pc, #812]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x354>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 030c 	and.w	r3, r3, #12
 8004652:	2b0c      	cmp	r3, #12
 8004654:	f200 8206 	bhi.w	8004a64 <HAL_RCC_GetSysClockFreq+0x440>
 8004658:	a201      	add	r2, pc, #4	@ (adr r2, 8004660 <HAL_RCC_GetSysClockFreq+0x3c>)
 800465a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465e:	bf00      	nop
 8004660:	08004695 	.word	0x08004695
 8004664:	08004a65 	.word	0x08004a65
 8004668:	08004a65 	.word	0x08004a65
 800466c:	08004a65 	.word	0x08004a65
 8004670:	0800469d 	.word	0x0800469d
 8004674:	08004a65 	.word	0x08004a65
 8004678:	08004a65 	.word	0x08004a65
 800467c:	08004a65 	.word	0x08004a65
 8004680:	080046a5 	.word	0x080046a5
 8004684:	08004a65 	.word	0x08004a65
 8004688:	08004a65 	.word	0x08004a65
 800468c:	08004a65 	.word	0x08004a65
 8004690:	08004895 	.word	0x08004895
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004694:	4bb9      	ldr	r3, [pc, #740]	@ (800497c <HAL_RCC_GetSysClockFreq+0x358>)
 8004696:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800469a:	e1e7      	b.n	8004a6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800469c:	4bb8      	ldr	r3, [pc, #736]	@ (8004980 <HAL_RCC_GetSysClockFreq+0x35c>)
 800469e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80046a2:	e1e3      	b.n	8004a6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046a4:	4bb4      	ldr	r3, [pc, #720]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x354>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046b0:	4bb1      	ldr	r3, [pc, #708]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x354>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d071      	beq.n	80047a0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046bc:	4bae      	ldr	r3, [pc, #696]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x354>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	099b      	lsrs	r3, r3, #6
 80046c2:	2200      	movs	r2, #0
 80046c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046c8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80046cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80046d8:	2300      	movs	r3, #0
 80046da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80046de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80046e2:	4622      	mov	r2, r4
 80046e4:	462b      	mov	r3, r5
 80046e6:	f04f 0000 	mov.w	r0, #0
 80046ea:	f04f 0100 	mov.w	r1, #0
 80046ee:	0159      	lsls	r1, r3, #5
 80046f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046f4:	0150      	lsls	r0, r2, #5
 80046f6:	4602      	mov	r2, r0
 80046f8:	460b      	mov	r3, r1
 80046fa:	4621      	mov	r1, r4
 80046fc:	1a51      	subs	r1, r2, r1
 80046fe:	6439      	str	r1, [r7, #64]	@ 0x40
 8004700:	4629      	mov	r1, r5
 8004702:	eb63 0301 	sbc.w	r3, r3, r1
 8004706:	647b      	str	r3, [r7, #68]	@ 0x44
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	f04f 0300 	mov.w	r3, #0
 8004710:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004714:	4649      	mov	r1, r9
 8004716:	018b      	lsls	r3, r1, #6
 8004718:	4641      	mov	r1, r8
 800471a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800471e:	4641      	mov	r1, r8
 8004720:	018a      	lsls	r2, r1, #6
 8004722:	4641      	mov	r1, r8
 8004724:	1a51      	subs	r1, r2, r1
 8004726:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004728:	4649      	mov	r1, r9
 800472a:	eb63 0301 	sbc.w	r3, r3, r1
 800472e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004730:	f04f 0200 	mov.w	r2, #0
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800473c:	4649      	mov	r1, r9
 800473e:	00cb      	lsls	r3, r1, #3
 8004740:	4641      	mov	r1, r8
 8004742:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004746:	4641      	mov	r1, r8
 8004748:	00ca      	lsls	r2, r1, #3
 800474a:	4610      	mov	r0, r2
 800474c:	4619      	mov	r1, r3
 800474e:	4603      	mov	r3, r0
 8004750:	4622      	mov	r2, r4
 8004752:	189b      	adds	r3, r3, r2
 8004754:	633b      	str	r3, [r7, #48]	@ 0x30
 8004756:	462b      	mov	r3, r5
 8004758:	460a      	mov	r2, r1
 800475a:	eb42 0303 	adc.w	r3, r2, r3
 800475e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	f04f 0300 	mov.w	r3, #0
 8004768:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800476c:	4629      	mov	r1, r5
 800476e:	024b      	lsls	r3, r1, #9
 8004770:	4621      	mov	r1, r4
 8004772:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004776:	4621      	mov	r1, r4
 8004778:	024a      	lsls	r2, r1, #9
 800477a:	4610      	mov	r0, r2
 800477c:	4619      	mov	r1, r3
 800477e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004782:	2200      	movs	r2, #0
 8004784:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004788:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800478c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004790:	f7fc fa2a 	bl	8000be8 <__aeabi_uldivmod>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	4613      	mov	r3, r2
 800479a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800479e:	e067      	b.n	8004870 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047a0:	4b75      	ldr	r3, [pc, #468]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x354>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	099b      	lsrs	r3, r3, #6
 80047a6:	2200      	movs	r2, #0
 80047a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80047ac:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80047b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80047b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047ba:	2300      	movs	r3, #0
 80047bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80047be:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80047c2:	4622      	mov	r2, r4
 80047c4:	462b      	mov	r3, r5
 80047c6:	f04f 0000 	mov.w	r0, #0
 80047ca:	f04f 0100 	mov.w	r1, #0
 80047ce:	0159      	lsls	r1, r3, #5
 80047d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047d4:	0150      	lsls	r0, r2, #5
 80047d6:	4602      	mov	r2, r0
 80047d8:	460b      	mov	r3, r1
 80047da:	4621      	mov	r1, r4
 80047dc:	1a51      	subs	r1, r2, r1
 80047de:	62b9      	str	r1, [r7, #40]	@ 0x28
 80047e0:	4629      	mov	r1, r5
 80047e2:	eb63 0301 	sbc.w	r3, r3, r1
 80047e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	f04f 0300 	mov.w	r3, #0
 80047f0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80047f4:	4649      	mov	r1, r9
 80047f6:	018b      	lsls	r3, r1, #6
 80047f8:	4641      	mov	r1, r8
 80047fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047fe:	4641      	mov	r1, r8
 8004800:	018a      	lsls	r2, r1, #6
 8004802:	4641      	mov	r1, r8
 8004804:	ebb2 0a01 	subs.w	sl, r2, r1
 8004808:	4649      	mov	r1, r9
 800480a:	eb63 0b01 	sbc.w	fp, r3, r1
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	f04f 0300 	mov.w	r3, #0
 8004816:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800481a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800481e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004822:	4692      	mov	sl, r2
 8004824:	469b      	mov	fp, r3
 8004826:	4623      	mov	r3, r4
 8004828:	eb1a 0303 	adds.w	r3, sl, r3
 800482c:	623b      	str	r3, [r7, #32]
 800482e:	462b      	mov	r3, r5
 8004830:	eb4b 0303 	adc.w	r3, fp, r3
 8004834:	627b      	str	r3, [r7, #36]	@ 0x24
 8004836:	f04f 0200 	mov.w	r2, #0
 800483a:	f04f 0300 	mov.w	r3, #0
 800483e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004842:	4629      	mov	r1, r5
 8004844:	028b      	lsls	r3, r1, #10
 8004846:	4621      	mov	r1, r4
 8004848:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800484c:	4621      	mov	r1, r4
 800484e:	028a      	lsls	r2, r1, #10
 8004850:	4610      	mov	r0, r2
 8004852:	4619      	mov	r1, r3
 8004854:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004858:	2200      	movs	r2, #0
 800485a:	673b      	str	r3, [r7, #112]	@ 0x70
 800485c:	677a      	str	r2, [r7, #116]	@ 0x74
 800485e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004862:	f7fc f9c1 	bl	8000be8 <__aeabi_uldivmod>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	4613      	mov	r3, r2
 800486c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004870:	4b41      	ldr	r3, [pc, #260]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x354>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	0c1b      	lsrs	r3, r3, #16
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	3301      	adds	r3, #1
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004882:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004886:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800488a:	fbb2 f3f3 	udiv	r3, r2, r3
 800488e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004892:	e0eb      	b.n	8004a6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004894:	4b38      	ldr	r3, [pc, #224]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x354>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800489c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048a0:	4b35      	ldr	r3, [pc, #212]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x354>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d06b      	beq.n	8004984 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ac:	4b32      	ldr	r3, [pc, #200]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x354>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	099b      	lsrs	r3, r3, #6
 80048b2:	2200      	movs	r2, #0
 80048b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80048b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048be:	663b      	str	r3, [r7, #96]	@ 0x60
 80048c0:	2300      	movs	r3, #0
 80048c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80048c4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80048c8:	4622      	mov	r2, r4
 80048ca:	462b      	mov	r3, r5
 80048cc:	f04f 0000 	mov.w	r0, #0
 80048d0:	f04f 0100 	mov.w	r1, #0
 80048d4:	0159      	lsls	r1, r3, #5
 80048d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048da:	0150      	lsls	r0, r2, #5
 80048dc:	4602      	mov	r2, r0
 80048de:	460b      	mov	r3, r1
 80048e0:	4621      	mov	r1, r4
 80048e2:	1a51      	subs	r1, r2, r1
 80048e4:	61b9      	str	r1, [r7, #24]
 80048e6:	4629      	mov	r1, r5
 80048e8:	eb63 0301 	sbc.w	r3, r3, r1
 80048ec:	61fb      	str	r3, [r7, #28]
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	f04f 0300 	mov.w	r3, #0
 80048f6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80048fa:	4659      	mov	r1, fp
 80048fc:	018b      	lsls	r3, r1, #6
 80048fe:	4651      	mov	r1, sl
 8004900:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004904:	4651      	mov	r1, sl
 8004906:	018a      	lsls	r2, r1, #6
 8004908:	4651      	mov	r1, sl
 800490a:	ebb2 0801 	subs.w	r8, r2, r1
 800490e:	4659      	mov	r1, fp
 8004910:	eb63 0901 	sbc.w	r9, r3, r1
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004920:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004924:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004928:	4690      	mov	r8, r2
 800492a:	4699      	mov	r9, r3
 800492c:	4623      	mov	r3, r4
 800492e:	eb18 0303 	adds.w	r3, r8, r3
 8004932:	613b      	str	r3, [r7, #16]
 8004934:	462b      	mov	r3, r5
 8004936:	eb49 0303 	adc.w	r3, r9, r3
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	f04f 0300 	mov.w	r3, #0
 8004944:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004948:	4629      	mov	r1, r5
 800494a:	024b      	lsls	r3, r1, #9
 800494c:	4621      	mov	r1, r4
 800494e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004952:	4621      	mov	r1, r4
 8004954:	024a      	lsls	r2, r1, #9
 8004956:	4610      	mov	r0, r2
 8004958:	4619      	mov	r1, r3
 800495a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800495e:	2200      	movs	r2, #0
 8004960:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004962:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004964:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004968:	f7fc f93e 	bl	8000be8 <__aeabi_uldivmod>
 800496c:	4602      	mov	r2, r0
 800496e:	460b      	mov	r3, r1
 8004970:	4613      	mov	r3, r2
 8004972:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004976:	e065      	b.n	8004a44 <HAL_RCC_GetSysClockFreq+0x420>
 8004978:	40023800 	.word	0x40023800
 800497c:	00f42400 	.word	0x00f42400
 8004980:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004984:	4b3d      	ldr	r3, [pc, #244]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x458>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	099b      	lsrs	r3, r3, #6
 800498a:	2200      	movs	r2, #0
 800498c:	4618      	mov	r0, r3
 800498e:	4611      	mov	r1, r2
 8004990:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004994:	653b      	str	r3, [r7, #80]	@ 0x50
 8004996:	2300      	movs	r3, #0
 8004998:	657b      	str	r3, [r7, #84]	@ 0x54
 800499a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800499e:	4642      	mov	r2, r8
 80049a0:	464b      	mov	r3, r9
 80049a2:	f04f 0000 	mov.w	r0, #0
 80049a6:	f04f 0100 	mov.w	r1, #0
 80049aa:	0159      	lsls	r1, r3, #5
 80049ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049b0:	0150      	lsls	r0, r2, #5
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	4641      	mov	r1, r8
 80049b8:	1a51      	subs	r1, r2, r1
 80049ba:	60b9      	str	r1, [r7, #8]
 80049bc:	4649      	mov	r1, r9
 80049be:	eb63 0301 	sbc.w	r3, r3, r1
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	f04f 0200 	mov.w	r2, #0
 80049c8:	f04f 0300 	mov.w	r3, #0
 80049cc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80049d0:	4659      	mov	r1, fp
 80049d2:	018b      	lsls	r3, r1, #6
 80049d4:	4651      	mov	r1, sl
 80049d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049da:	4651      	mov	r1, sl
 80049dc:	018a      	lsls	r2, r1, #6
 80049de:	4651      	mov	r1, sl
 80049e0:	1a54      	subs	r4, r2, r1
 80049e2:	4659      	mov	r1, fp
 80049e4:	eb63 0501 	sbc.w	r5, r3, r1
 80049e8:	f04f 0200 	mov.w	r2, #0
 80049ec:	f04f 0300 	mov.w	r3, #0
 80049f0:	00eb      	lsls	r3, r5, #3
 80049f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049f6:	00e2      	lsls	r2, r4, #3
 80049f8:	4614      	mov	r4, r2
 80049fa:	461d      	mov	r5, r3
 80049fc:	4643      	mov	r3, r8
 80049fe:	18e3      	adds	r3, r4, r3
 8004a00:	603b      	str	r3, [r7, #0]
 8004a02:	464b      	mov	r3, r9
 8004a04:	eb45 0303 	adc.w	r3, r5, r3
 8004a08:	607b      	str	r3, [r7, #4]
 8004a0a:	f04f 0200 	mov.w	r2, #0
 8004a0e:	f04f 0300 	mov.w	r3, #0
 8004a12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a16:	4629      	mov	r1, r5
 8004a18:	028b      	lsls	r3, r1, #10
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a20:	4621      	mov	r1, r4
 8004a22:	028a      	lsls	r2, r1, #10
 8004a24:	4610      	mov	r0, r2
 8004a26:	4619      	mov	r1, r3
 8004a28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a30:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004a32:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a36:	f7fc f8d7 	bl	8000be8 <__aeabi_uldivmod>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	4613      	mov	r3, r2
 8004a40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004a44:	4b0d      	ldr	r3, [pc, #52]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x458>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	0f1b      	lsrs	r3, r3, #28
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004a52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004a56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a62:	e003      	b.n	8004a6c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a64:	4b06      	ldr	r3, [pc, #24]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004a66:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004a6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	37b8      	adds	r7, #184	@ 0xb8
 8004a74:	46bd      	mov	sp, r7
 8004a76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	00f42400 	.word	0x00f42400

08004a84 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e28d      	b.n	8004fb2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 8083 	beq.w	8004baa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004aa4:	4b94      	ldr	r3, [pc, #592]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 030c 	and.w	r3, r3, #12
 8004aac:	2b04      	cmp	r3, #4
 8004aae:	d019      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004ab0:	4b91      	ldr	r3, [pc, #580]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f003 030c 	and.w	r3, r3, #12
        || \
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d106      	bne.n	8004aca <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004abc:	4b8e      	ldr	r3, [pc, #568]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ac4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ac8:	d00c      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004aca:	4b8b      	ldr	r3, [pc, #556]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004ad2:	2b0c      	cmp	r3, #12
 8004ad4:	d112      	bne.n	8004afc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ad6:	4b88      	ldr	r3, [pc, #544]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ade:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ae2:	d10b      	bne.n	8004afc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae4:	4b84      	ldr	r3, [pc, #528]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d05b      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x124>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d157      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e25a      	b.n	8004fb2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b04:	d106      	bne.n	8004b14 <HAL_RCC_OscConfig+0x90>
 8004b06:	4b7c      	ldr	r3, [pc, #496]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a7b      	ldr	r2, [pc, #492]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004b0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	e01d      	b.n	8004b50 <HAL_RCC_OscConfig+0xcc>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b1c:	d10c      	bne.n	8004b38 <HAL_RCC_OscConfig+0xb4>
 8004b1e:	4b76      	ldr	r3, [pc, #472]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a75      	ldr	r2, [pc, #468]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004b24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	4b73      	ldr	r3, [pc, #460]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a72      	ldr	r2, [pc, #456]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	e00b      	b.n	8004b50 <HAL_RCC_OscConfig+0xcc>
 8004b38:	4b6f      	ldr	r3, [pc, #444]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a6e      	ldr	r2, [pc, #440]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004b3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b42:	6013      	str	r3, [r2, #0]
 8004b44:	4b6c      	ldr	r3, [pc, #432]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a6b      	ldr	r2, [pc, #428]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004b4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d013      	beq.n	8004b80 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b58:	f7fe fcfa 	bl	8003550 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b60:	f7fe fcf6 	bl	8003550 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b64      	cmp	r3, #100	@ 0x64
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e21f      	b.n	8004fb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b72:	4b61      	ldr	r3, [pc, #388]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d0f0      	beq.n	8004b60 <HAL_RCC_OscConfig+0xdc>
 8004b7e:	e014      	b.n	8004baa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b80:	f7fe fce6 	bl	8003550 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b88:	f7fe fce2 	bl	8003550 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b64      	cmp	r3, #100	@ 0x64
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e20b      	b.n	8004fb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b9a:	4b57      	ldr	r3, [pc, #348]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1f0      	bne.n	8004b88 <HAL_RCC_OscConfig+0x104>
 8004ba6:	e000      	b.n	8004baa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d06f      	beq.n	8004c96 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004bb6:	4b50      	ldr	r3, [pc, #320]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f003 030c 	and.w	r3, r3, #12
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d017      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004bc2:	4b4d      	ldr	r3, [pc, #308]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 030c 	and.w	r3, r3, #12
        || \
 8004bca:	2b08      	cmp	r3, #8
 8004bcc:	d105      	bne.n	8004bda <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004bce:	4b4a      	ldr	r3, [pc, #296]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00b      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bda:	4b47      	ldr	r3, [pc, #284]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004be2:	2b0c      	cmp	r3, #12
 8004be4:	d11c      	bne.n	8004c20 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004be6:	4b44      	ldr	r3, [pc, #272]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d116      	bne.n	8004c20 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bf2:	4b41      	ldr	r3, [pc, #260]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d005      	beq.n	8004c0a <HAL_RCC_OscConfig+0x186>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d001      	beq.n	8004c0a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e1d3      	b.n	8004fb2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c0a:	4b3b      	ldr	r3, [pc, #236]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	4937      	ldr	r1, [pc, #220]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c1e:	e03a      	b.n	8004c96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d020      	beq.n	8004c6a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c28:	4b34      	ldr	r3, [pc, #208]	@ (8004cfc <HAL_RCC_OscConfig+0x278>)
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2e:	f7fe fc8f 	bl	8003550 <HAL_GetTick>
 8004c32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c34:	e008      	b.n	8004c48 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c36:	f7fe fc8b 	bl	8003550 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e1b4      	b.n	8004fb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c48:	4b2b      	ldr	r3, [pc, #172]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d0f0      	beq.n	8004c36 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c54:	4b28      	ldr	r3, [pc, #160]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	691b      	ldr	r3, [r3, #16]
 8004c60:	00db      	lsls	r3, r3, #3
 8004c62:	4925      	ldr	r1, [pc, #148]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	600b      	str	r3, [r1, #0]
 8004c68:	e015      	b.n	8004c96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c6a:	4b24      	ldr	r3, [pc, #144]	@ (8004cfc <HAL_RCC_OscConfig+0x278>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c70:	f7fe fc6e 	bl	8003550 <HAL_GetTick>
 8004c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c76:	e008      	b.n	8004c8a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c78:	f7fe fc6a 	bl	8003550 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e193      	b.n	8004fb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1f0      	bne.n	8004c78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0308 	and.w	r3, r3, #8
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d036      	beq.n	8004d10 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d016      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004caa:	4b15      	ldr	r3, [pc, #84]	@ (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004cac:	2201      	movs	r2, #1
 8004cae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb0:	f7fe fc4e 	bl	8003550 <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cb6:	e008      	b.n	8004cca <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cb8:	f7fe fc4a 	bl	8003550 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e173      	b.n	8004fb2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cca:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf8 <HAL_RCC_OscConfig+0x274>)
 8004ccc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cce:	f003 0302 	and.w	r3, r3, #2
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0f0      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x234>
 8004cd6:	e01b      	b.n	8004d10 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cd8:	4b09      	ldr	r3, [pc, #36]	@ (8004d00 <HAL_RCC_OscConfig+0x27c>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cde:	f7fe fc37 	bl	8003550 <HAL_GetTick>
 8004ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ce4:	e00e      	b.n	8004d04 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ce6:	f7fe fc33 	bl	8003550 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d907      	bls.n	8004d04 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e15c      	b.n	8004fb2 <HAL_RCC_OscConfig+0x52e>
 8004cf8:	40023800 	.word	0x40023800
 8004cfc:	42470000 	.word	0x42470000
 8004d00:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d04:	4b8a      	ldr	r3, [pc, #552]	@ (8004f30 <HAL_RCC_OscConfig+0x4ac>)
 8004d06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1ea      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 8097 	beq.w	8004e4c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d22:	4b83      	ldr	r3, [pc, #524]	@ (8004f30 <HAL_RCC_OscConfig+0x4ac>)
 8004d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10f      	bne.n	8004d4e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60bb      	str	r3, [r7, #8]
 8004d32:	4b7f      	ldr	r3, [pc, #508]	@ (8004f30 <HAL_RCC_OscConfig+0x4ac>)
 8004d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d36:	4a7e      	ldr	r2, [pc, #504]	@ (8004f30 <HAL_RCC_OscConfig+0x4ac>)
 8004d38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d3e:	4b7c      	ldr	r3, [pc, #496]	@ (8004f30 <HAL_RCC_OscConfig+0x4ac>)
 8004d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d46:	60bb      	str	r3, [r7, #8]
 8004d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d4e:	4b79      	ldr	r3, [pc, #484]	@ (8004f34 <HAL_RCC_OscConfig+0x4b0>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d118      	bne.n	8004d8c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d5a:	4b76      	ldr	r3, [pc, #472]	@ (8004f34 <HAL_RCC_OscConfig+0x4b0>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a75      	ldr	r2, [pc, #468]	@ (8004f34 <HAL_RCC_OscConfig+0x4b0>)
 8004d60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d66:	f7fe fbf3 	bl	8003550 <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d6e:	f7fe fbef 	bl	8003550 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e118      	b.n	8004fb2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d80:	4b6c      	ldr	r3, [pc, #432]	@ (8004f34 <HAL_RCC_OscConfig+0x4b0>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0f0      	beq.n	8004d6e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d106      	bne.n	8004da2 <HAL_RCC_OscConfig+0x31e>
 8004d94:	4b66      	ldr	r3, [pc, #408]	@ (8004f30 <HAL_RCC_OscConfig+0x4ac>)
 8004d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d98:	4a65      	ldr	r2, [pc, #404]	@ (8004f30 <HAL_RCC_OscConfig+0x4ac>)
 8004d9a:	f043 0301 	orr.w	r3, r3, #1
 8004d9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004da0:	e01c      	b.n	8004ddc <HAL_RCC_OscConfig+0x358>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	2b05      	cmp	r3, #5
 8004da8:	d10c      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x340>
 8004daa:	4b61      	ldr	r3, [pc, #388]	@ (8004f30 <HAL_RCC_OscConfig+0x4ac>)
 8004dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dae:	4a60      	ldr	r2, [pc, #384]	@ (8004f30 <HAL_RCC_OscConfig+0x4ac>)
 8004db0:	f043 0304 	orr.w	r3, r3, #4
 8004db4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004db6:	4b5e      	ldr	r3, [pc, #376]	@ (8004f30 <HAL_RCC_OscConfig+0x4ac>)
 8004db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dba:	4a5d      	ldr	r2, [pc, #372]	@ (8004f30 <HAL_RCC_OscConfig+0x4ac>)
 8004dbc:	f043 0301 	orr.w	r3, r3, #1
 8004dc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dc2:	e00b      	b.n	8004ddc <HAL_RCC_OscConfig+0x358>
 8004dc4:	4b5a      	ldr	r3, [pc, #360]	@ (8004f30 <HAL_RCC_OscConfig+0x4ac>)
 8004dc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dc8:	4a59      	ldr	r2, [pc, #356]	@ (8004f30 <HAL_RCC_OscConfig+0x4ac>)
 8004dca:	f023 0301 	bic.w	r3, r3, #1
 8004dce:	6713      	str	r3, [r2, #112]	@ 0x70
 8004dd0:	4b57      	ldr	r3, [pc, #348]	@ (8004f30 <HAL_RCC_OscConfig+0x4ac>)
 8004dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dd4:	4a56      	ldr	r2, [pc, #344]	@ (8004f30 <HAL_RCC_OscConfig+0x4ac>)
 8004dd6:	f023 0304 	bic.w	r3, r3, #4
 8004dda:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d015      	beq.n	8004e10 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de4:	f7fe fbb4 	bl	8003550 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dea:	e00a      	b.n	8004e02 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dec:	f7fe fbb0 	bl	8003550 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e0d7      	b.n	8004fb2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e02:	4b4b      	ldr	r3, [pc, #300]	@ (8004f30 <HAL_RCC_OscConfig+0x4ac>)
 8004e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d0ee      	beq.n	8004dec <HAL_RCC_OscConfig+0x368>
 8004e0e:	e014      	b.n	8004e3a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e10:	f7fe fb9e 	bl	8003550 <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e16:	e00a      	b.n	8004e2e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e18:	f7fe fb9a 	bl	8003550 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e0c1      	b.n	8004fb2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e2e:	4b40      	ldr	r3, [pc, #256]	@ (8004f30 <HAL_RCC_OscConfig+0x4ac>)
 8004e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1ee      	bne.n	8004e18 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e3a:	7dfb      	ldrb	r3, [r7, #23]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d105      	bne.n	8004e4c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e40:	4b3b      	ldr	r3, [pc, #236]	@ (8004f30 <HAL_RCC_OscConfig+0x4ac>)
 8004e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e44:	4a3a      	ldr	r2, [pc, #232]	@ (8004f30 <HAL_RCC_OscConfig+0x4ac>)
 8004e46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 80ad 	beq.w	8004fb0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e56:	4b36      	ldr	r3, [pc, #216]	@ (8004f30 <HAL_RCC_OscConfig+0x4ac>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f003 030c 	and.w	r3, r3, #12
 8004e5e:	2b08      	cmp	r3, #8
 8004e60:	d060      	beq.n	8004f24 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d145      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e6a:	4b33      	ldr	r3, [pc, #204]	@ (8004f38 <HAL_RCC_OscConfig+0x4b4>)
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e70:	f7fe fb6e 	bl	8003550 <HAL_GetTick>
 8004e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e76:	e008      	b.n	8004e8a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e78:	f7fe fb6a 	bl	8003550 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e093      	b.n	8004fb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e8a:	4b29      	ldr	r3, [pc, #164]	@ (8004f30 <HAL_RCC_OscConfig+0x4ac>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1f0      	bne.n	8004e78 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	69da      	ldr	r2, [r3, #28]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea4:	019b      	lsls	r3, r3, #6
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eac:	085b      	lsrs	r3, r3, #1
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	041b      	lsls	r3, r3, #16
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb8:	061b      	lsls	r3, r3, #24
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec0:	071b      	lsls	r3, r3, #28
 8004ec2:	491b      	ldr	r1, [pc, #108]	@ (8004f30 <HAL_RCC_OscConfig+0x4ac>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8004f38 <HAL_RCC_OscConfig+0x4b4>)
 8004eca:	2201      	movs	r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ece:	f7fe fb3f 	bl	8003550 <HAL_GetTick>
 8004ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ed4:	e008      	b.n	8004ee8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ed6:	f7fe fb3b 	bl	8003550 <HAL_GetTick>
 8004eda:	4602      	mov	r2, r0
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e064      	b.n	8004fb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ee8:	4b11      	ldr	r3, [pc, #68]	@ (8004f30 <HAL_RCC_OscConfig+0x4ac>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d0f0      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x452>
 8004ef4:	e05c      	b.n	8004fb0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ef6:	4b10      	ldr	r3, [pc, #64]	@ (8004f38 <HAL_RCC_OscConfig+0x4b4>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efc:	f7fe fb28 	bl	8003550 <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f04:	f7fe fb24 	bl	8003550 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e04d      	b.n	8004fb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f16:	4b06      	ldr	r3, [pc, #24]	@ (8004f30 <HAL_RCC_OscConfig+0x4ac>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1f0      	bne.n	8004f04 <HAL_RCC_OscConfig+0x480>
 8004f22:	e045      	b.n	8004fb0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d107      	bne.n	8004f3c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e040      	b.n	8004fb2 <HAL_RCC_OscConfig+0x52e>
 8004f30:	40023800 	.word	0x40023800
 8004f34:	40007000 	.word	0x40007000
 8004f38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8004fbc <HAL_RCC_OscConfig+0x538>)
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d030      	beq.n	8004fac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d129      	bne.n	8004fac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d122      	bne.n	8004fac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d119      	bne.n	8004fac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f82:	085b      	lsrs	r3, r3, #1
 8004f84:	3b01      	subs	r3, #1
 8004f86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d10f      	bne.n	8004fac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d107      	bne.n	8004fac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d001      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e000      	b.n	8004fb2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	40023800 	.word	0x40023800

08004fc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e041      	b.n	8005056 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d106      	bne.n	8004fec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7fd ff50 	bl	8002e8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4610      	mov	r0, r2
 8005000:	f001 fa54 	bl	80064ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
	...

08005060 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b01      	cmp	r3, #1
 8005072:	d001      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e04e      	b.n	8005116 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68da      	ldr	r2, [r3, #12]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 0201 	orr.w	r2, r2, #1
 800508e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a23      	ldr	r2, [pc, #140]	@ (8005124 <HAL_TIM_Base_Start_IT+0xc4>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d022      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x80>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050a2:	d01d      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x80>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a1f      	ldr	r2, [pc, #124]	@ (8005128 <HAL_TIM_Base_Start_IT+0xc8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d018      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x80>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a1e      	ldr	r2, [pc, #120]	@ (800512c <HAL_TIM_Base_Start_IT+0xcc>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d013      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x80>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a1c      	ldr	r2, [pc, #112]	@ (8005130 <HAL_TIM_Base_Start_IT+0xd0>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d00e      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x80>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a1b      	ldr	r2, [pc, #108]	@ (8005134 <HAL_TIM_Base_Start_IT+0xd4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d009      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x80>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a19      	ldr	r2, [pc, #100]	@ (8005138 <HAL_TIM_Base_Start_IT+0xd8>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d004      	beq.n	80050e0 <HAL_TIM_Base_Start_IT+0x80>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a18      	ldr	r2, [pc, #96]	@ (800513c <HAL_TIM_Base_Start_IT+0xdc>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d111      	bne.n	8005104 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2b06      	cmp	r3, #6
 80050f0:	d010      	beq.n	8005114 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f042 0201 	orr.w	r2, r2, #1
 8005100:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005102:	e007      	b.n	8005114 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f042 0201 	orr.w	r2, r2, #1
 8005112:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	40010000 	.word	0x40010000
 8005128:	40000400 	.word	0x40000400
 800512c:	40000800 	.word	0x40000800
 8005130:	40000c00 	.word	0x40000c00
 8005134:	40010400 	.word	0x40010400
 8005138:	40014000 	.word	0x40014000
 800513c:	40001800 	.word	0x40001800

08005140 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f022 0201 	bic.w	r2, r2, #1
 8005156:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6a1a      	ldr	r2, [r3, #32]
 800515e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005162:	4013      	ands	r3, r2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10f      	bne.n	8005188 <HAL_TIM_Base_Stop_IT+0x48>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6a1a      	ldr	r2, [r3, #32]
 800516e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005172:	4013      	ands	r3, r2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d107      	bne.n	8005188 <HAL_TIM_Base_Stop_IT+0x48>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0201 	bic.w	r2, r2, #1
 8005186:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	370c      	adds	r7, #12
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b082      	sub	sp, #8
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e041      	b.n	8005234 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d106      	bne.n	80051ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f839 	bl	800523c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2202      	movs	r2, #2
 80051ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	3304      	adds	r3, #4
 80051da:	4619      	mov	r1, r3
 80051dc:	4610      	mov	r0, r2
 80051de:	f001 f965 	bl	80064ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d109      	bne.n	8005274 <HAL_TIM_PWM_Start+0x24>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b01      	cmp	r3, #1
 800526a:	bf14      	ite	ne
 800526c:	2301      	movne	r3, #1
 800526e:	2300      	moveq	r3, #0
 8005270:	b2db      	uxtb	r3, r3
 8005272:	e022      	b.n	80052ba <HAL_TIM_PWM_Start+0x6a>
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	2b04      	cmp	r3, #4
 8005278:	d109      	bne.n	800528e <HAL_TIM_PWM_Start+0x3e>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b01      	cmp	r3, #1
 8005284:	bf14      	ite	ne
 8005286:	2301      	movne	r3, #1
 8005288:	2300      	moveq	r3, #0
 800528a:	b2db      	uxtb	r3, r3
 800528c:	e015      	b.n	80052ba <HAL_TIM_PWM_Start+0x6a>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b08      	cmp	r3, #8
 8005292:	d109      	bne.n	80052a8 <HAL_TIM_PWM_Start+0x58>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b01      	cmp	r3, #1
 800529e:	bf14      	ite	ne
 80052a0:	2301      	movne	r3, #1
 80052a2:	2300      	moveq	r3, #0
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	e008      	b.n	80052ba <HAL_TIM_PWM_Start+0x6a>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	bf14      	ite	ne
 80052b4:	2301      	movne	r3, #1
 80052b6:	2300      	moveq	r3, #0
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d001      	beq.n	80052c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e07c      	b.n	80053bc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d104      	bne.n	80052d2 <HAL_TIM_PWM_Start+0x82>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052d0:	e013      	b.n	80052fa <HAL_TIM_PWM_Start+0xaa>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	d104      	bne.n	80052e2 <HAL_TIM_PWM_Start+0x92>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052e0:	e00b      	b.n	80052fa <HAL_TIM_PWM_Start+0xaa>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	d104      	bne.n	80052f2 <HAL_TIM_PWM_Start+0xa2>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052f0:	e003      	b.n	80052fa <HAL_TIM_PWM_Start+0xaa>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2202      	movs	r2, #2
 80052f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2201      	movs	r2, #1
 8005300:	6839      	ldr	r1, [r7, #0]
 8005302:	4618      	mov	r0, r3
 8005304:	f001 fcf2 	bl	8006cec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a2d      	ldr	r2, [pc, #180]	@ (80053c4 <HAL_TIM_PWM_Start+0x174>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d004      	beq.n	800531c <HAL_TIM_PWM_Start+0xcc>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a2c      	ldr	r2, [pc, #176]	@ (80053c8 <HAL_TIM_PWM_Start+0x178>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d101      	bne.n	8005320 <HAL_TIM_PWM_Start+0xd0>
 800531c:	2301      	movs	r3, #1
 800531e:	e000      	b.n	8005322 <HAL_TIM_PWM_Start+0xd2>
 8005320:	2300      	movs	r3, #0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d007      	beq.n	8005336 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005334:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a22      	ldr	r2, [pc, #136]	@ (80053c4 <HAL_TIM_PWM_Start+0x174>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d022      	beq.n	8005386 <HAL_TIM_PWM_Start+0x136>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005348:	d01d      	beq.n	8005386 <HAL_TIM_PWM_Start+0x136>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a1f      	ldr	r2, [pc, #124]	@ (80053cc <HAL_TIM_PWM_Start+0x17c>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d018      	beq.n	8005386 <HAL_TIM_PWM_Start+0x136>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a1d      	ldr	r2, [pc, #116]	@ (80053d0 <HAL_TIM_PWM_Start+0x180>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d013      	beq.n	8005386 <HAL_TIM_PWM_Start+0x136>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a1c      	ldr	r2, [pc, #112]	@ (80053d4 <HAL_TIM_PWM_Start+0x184>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d00e      	beq.n	8005386 <HAL_TIM_PWM_Start+0x136>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a16      	ldr	r2, [pc, #88]	@ (80053c8 <HAL_TIM_PWM_Start+0x178>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d009      	beq.n	8005386 <HAL_TIM_PWM_Start+0x136>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a18      	ldr	r2, [pc, #96]	@ (80053d8 <HAL_TIM_PWM_Start+0x188>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d004      	beq.n	8005386 <HAL_TIM_PWM_Start+0x136>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a16      	ldr	r2, [pc, #88]	@ (80053dc <HAL_TIM_PWM_Start+0x18c>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d111      	bne.n	80053aa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2b06      	cmp	r3, #6
 8005396:	d010      	beq.n	80053ba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f042 0201 	orr.w	r2, r2, #1
 80053a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053a8:	e007      	b.n	80053ba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f042 0201 	orr.w	r2, r2, #1
 80053b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3710      	adds	r7, #16
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	40010000 	.word	0x40010000
 80053c8:	40010400 	.word	0x40010400
 80053cc:	40000400 	.word	0x40000400
 80053d0:	40000800 	.word	0x40000800
 80053d4:	40000c00 	.word	0x40000c00
 80053d8:	40014000 	.word	0x40014000
 80053dc:	40001800 	.word	0x40001800

080053e0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
 80053ec:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80053ee:	2300      	movs	r3, #0
 80053f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d109      	bne.n	800540c <HAL_TIM_PWM_Start_DMA+0x2c>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	bf0c      	ite	eq
 8005404:	2301      	moveq	r3, #1
 8005406:	2300      	movne	r3, #0
 8005408:	b2db      	uxtb	r3, r3
 800540a:	e022      	b.n	8005452 <HAL_TIM_PWM_Start_DMA+0x72>
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2b04      	cmp	r3, #4
 8005410:	d109      	bne.n	8005426 <HAL_TIM_PWM_Start_DMA+0x46>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	bf0c      	ite	eq
 800541e:	2301      	moveq	r3, #1
 8005420:	2300      	movne	r3, #0
 8005422:	b2db      	uxtb	r3, r3
 8005424:	e015      	b.n	8005452 <HAL_TIM_PWM_Start_DMA+0x72>
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2b08      	cmp	r3, #8
 800542a:	d109      	bne.n	8005440 <HAL_TIM_PWM_Start_DMA+0x60>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b02      	cmp	r3, #2
 8005436:	bf0c      	ite	eq
 8005438:	2301      	moveq	r3, #1
 800543a:	2300      	movne	r3, #0
 800543c:	b2db      	uxtb	r3, r3
 800543e:	e008      	b.n	8005452 <HAL_TIM_PWM_Start_DMA+0x72>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	bf0c      	ite	eq
 800544c:	2301      	moveq	r3, #1
 800544e:	2300      	movne	r3, #0
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d001      	beq.n	800545a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8005456:	2302      	movs	r3, #2
 8005458:	e171      	b.n	800573e <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d109      	bne.n	8005474 <HAL_TIM_PWM_Start_DMA+0x94>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b01      	cmp	r3, #1
 800546a:	bf0c      	ite	eq
 800546c:	2301      	moveq	r3, #1
 800546e:	2300      	movne	r3, #0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	e022      	b.n	80054ba <HAL_TIM_PWM_Start_DMA+0xda>
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2b04      	cmp	r3, #4
 8005478:	d109      	bne.n	800548e <HAL_TIM_PWM_Start_DMA+0xae>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b01      	cmp	r3, #1
 8005484:	bf0c      	ite	eq
 8005486:	2301      	moveq	r3, #1
 8005488:	2300      	movne	r3, #0
 800548a:	b2db      	uxtb	r3, r3
 800548c:	e015      	b.n	80054ba <HAL_TIM_PWM_Start_DMA+0xda>
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	2b08      	cmp	r3, #8
 8005492:	d109      	bne.n	80054a8 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b01      	cmp	r3, #1
 800549e:	bf0c      	ite	eq
 80054a0:	2301      	moveq	r3, #1
 80054a2:	2300      	movne	r3, #0
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	e008      	b.n	80054ba <HAL_TIM_PWM_Start_DMA+0xda>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	bf0c      	ite	eq
 80054b4:	2301      	moveq	r3, #1
 80054b6:	2300      	movne	r3, #0
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d024      	beq.n	8005508 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <HAL_TIM_PWM_Start_DMA+0xea>
 80054c4:	887b      	ldrh	r3, [r7, #2]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e137      	b.n	800573e <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d104      	bne.n	80054de <HAL_TIM_PWM_Start_DMA+0xfe>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2202      	movs	r2, #2
 80054d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054dc:	e016      	b.n	800550c <HAL_TIM_PWM_Start_DMA+0x12c>
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d104      	bne.n	80054ee <HAL_TIM_PWM_Start_DMA+0x10e>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054ec:	e00e      	b.n	800550c <HAL_TIM_PWM_Start_DMA+0x12c>
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	2b08      	cmp	r3, #8
 80054f2:	d104      	bne.n	80054fe <HAL_TIM_PWM_Start_DMA+0x11e>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054fc:	e006      	b.n	800550c <HAL_TIM_PWM_Start_DMA+0x12c>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2202      	movs	r2, #2
 8005502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005506:	e001      	b.n	800550c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e118      	b.n	800573e <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	2b0c      	cmp	r3, #12
 8005510:	f200 80ae 	bhi.w	8005670 <HAL_TIM_PWM_Start_DMA+0x290>
 8005514:	a201      	add	r2, pc, #4	@ (adr r2, 800551c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8005516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551a:	bf00      	nop
 800551c:	08005551 	.word	0x08005551
 8005520:	08005671 	.word	0x08005671
 8005524:	08005671 	.word	0x08005671
 8005528:	08005671 	.word	0x08005671
 800552c:	08005599 	.word	0x08005599
 8005530:	08005671 	.word	0x08005671
 8005534:	08005671 	.word	0x08005671
 8005538:	08005671 	.word	0x08005671
 800553c:	080055e1 	.word	0x080055e1
 8005540:	08005671 	.word	0x08005671
 8005544:	08005671 	.word	0x08005671
 8005548:	08005671 	.word	0x08005671
 800554c:	08005629 	.word	0x08005629
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005554:	4a7c      	ldr	r2, [pc, #496]	@ (8005748 <HAL_TIM_PWM_Start_DMA+0x368>)
 8005556:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555c:	4a7b      	ldr	r2, [pc, #492]	@ (800574c <HAL_TIM_PWM_Start_DMA+0x36c>)
 800555e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005564:	4a7a      	ldr	r2, [pc, #488]	@ (8005750 <HAL_TIM_PWM_Start_DMA+0x370>)
 8005566:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800556c:	6879      	ldr	r1, [r7, #4]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3334      	adds	r3, #52	@ 0x34
 8005574:	461a      	mov	r2, r3
 8005576:	887b      	ldrh	r3, [r7, #2]
 8005578:	f7fe f9e8 	bl	800394c <HAL_DMA_Start_IT>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e0db      	b.n	800573e <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005594:	60da      	str	r2, [r3, #12]
      break;
 8005596:	e06e      	b.n	8005676 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559c:	4a6a      	ldr	r2, [pc, #424]	@ (8005748 <HAL_TIM_PWM_Start_DMA+0x368>)
 800559e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a4:	4a69      	ldr	r2, [pc, #420]	@ (800574c <HAL_TIM_PWM_Start_DMA+0x36c>)
 80055a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ac:	4a68      	ldr	r2, [pc, #416]	@ (8005750 <HAL_TIM_PWM_Start_DMA+0x370>)
 80055ae:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80055b4:	6879      	ldr	r1, [r7, #4]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3338      	adds	r3, #56	@ 0x38
 80055bc:	461a      	mov	r2, r3
 80055be:	887b      	ldrh	r3, [r7, #2]
 80055c0:	f7fe f9c4 	bl	800394c <HAL_DMA_Start_IT>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e0b7      	b.n	800573e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68da      	ldr	r2, [r3, #12]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80055dc:	60da      	str	r2, [r3, #12]
      break;
 80055de:	e04a      	b.n	8005676 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e4:	4a58      	ldr	r2, [pc, #352]	@ (8005748 <HAL_TIM_PWM_Start_DMA+0x368>)
 80055e6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ec:	4a57      	ldr	r2, [pc, #348]	@ (800574c <HAL_TIM_PWM_Start_DMA+0x36c>)
 80055ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f4:	4a56      	ldr	r2, [pc, #344]	@ (8005750 <HAL_TIM_PWM_Start_DMA+0x370>)
 80055f6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80055fc:	6879      	ldr	r1, [r7, #4]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	333c      	adds	r3, #60	@ 0x3c
 8005604:	461a      	mov	r2, r3
 8005606:	887b      	ldrh	r3, [r7, #2]
 8005608:	f7fe f9a0 	bl	800394c <HAL_DMA_Start_IT>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e093      	b.n	800573e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68da      	ldr	r2, [r3, #12]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005624:	60da      	str	r2, [r3, #12]
      break;
 8005626:	e026      	b.n	8005676 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562c:	4a46      	ldr	r2, [pc, #280]	@ (8005748 <HAL_TIM_PWM_Start_DMA+0x368>)
 800562e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005634:	4a45      	ldr	r2, [pc, #276]	@ (800574c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8005636:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800563c:	4a44      	ldr	r2, [pc, #272]	@ (8005750 <HAL_TIM_PWM_Start_DMA+0x370>)
 800563e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005644:	6879      	ldr	r1, [r7, #4]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	3340      	adds	r3, #64	@ 0x40
 800564c:	461a      	mov	r2, r3
 800564e:	887b      	ldrh	r3, [r7, #2]
 8005650:	f7fe f97c 	bl	800394c <HAL_DMA_Start_IT>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e06f      	b.n	800573e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68da      	ldr	r2, [r3, #12]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800566c:	60da      	str	r2, [r3, #12]
      break;
 800566e:	e002      	b.n	8005676 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	75fb      	strb	r3, [r7, #23]
      break;
 8005674:	bf00      	nop
  }

  if (status == HAL_OK)
 8005676:	7dfb      	ldrb	r3, [r7, #23]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d15f      	bne.n	800573c <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2201      	movs	r2, #1
 8005682:	68b9      	ldr	r1, [r7, #8]
 8005684:	4618      	mov	r0, r3
 8005686:	f001 fb31 	bl	8006cec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a31      	ldr	r2, [pc, #196]	@ (8005754 <HAL_TIM_PWM_Start_DMA+0x374>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d004      	beq.n	800569e <HAL_TIM_PWM_Start_DMA+0x2be>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a2f      	ldr	r2, [pc, #188]	@ (8005758 <HAL_TIM_PWM_Start_DMA+0x378>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d101      	bne.n	80056a2 <HAL_TIM_PWM_Start_DMA+0x2c2>
 800569e:	2301      	movs	r3, #1
 80056a0:	e000      	b.n	80056a4 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80056a2:	2300      	movs	r3, #0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d007      	beq.n	80056b8 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056b6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a25      	ldr	r2, [pc, #148]	@ (8005754 <HAL_TIM_PWM_Start_DMA+0x374>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d022      	beq.n	8005708 <HAL_TIM_PWM_Start_DMA+0x328>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ca:	d01d      	beq.n	8005708 <HAL_TIM_PWM_Start_DMA+0x328>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a22      	ldr	r2, [pc, #136]	@ (800575c <HAL_TIM_PWM_Start_DMA+0x37c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d018      	beq.n	8005708 <HAL_TIM_PWM_Start_DMA+0x328>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a21      	ldr	r2, [pc, #132]	@ (8005760 <HAL_TIM_PWM_Start_DMA+0x380>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d013      	beq.n	8005708 <HAL_TIM_PWM_Start_DMA+0x328>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005764 <HAL_TIM_PWM_Start_DMA+0x384>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d00e      	beq.n	8005708 <HAL_TIM_PWM_Start_DMA+0x328>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a1a      	ldr	r2, [pc, #104]	@ (8005758 <HAL_TIM_PWM_Start_DMA+0x378>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d009      	beq.n	8005708 <HAL_TIM_PWM_Start_DMA+0x328>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a1b      	ldr	r2, [pc, #108]	@ (8005768 <HAL_TIM_PWM_Start_DMA+0x388>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d004      	beq.n	8005708 <HAL_TIM_PWM_Start_DMA+0x328>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a1a      	ldr	r2, [pc, #104]	@ (800576c <HAL_TIM_PWM_Start_DMA+0x38c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d111      	bne.n	800572c <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f003 0307 	and.w	r3, r3, #7
 8005712:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	2b06      	cmp	r3, #6
 8005718:	d010      	beq.n	800573c <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f042 0201 	orr.w	r2, r2, #1
 8005728:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800572a:	e007      	b.n	800573c <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 0201 	orr.w	r2, r2, #1
 800573a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800573c:	7dfb      	ldrb	r3, [r7, #23]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	0800639b 	.word	0x0800639b
 800574c:	08006443 	.word	0x08006443
 8005750:	08006309 	.word	0x08006309
 8005754:	40010000 	.word	0x40010000
 8005758:	40010400 	.word	0x40010400
 800575c:	40000400 	.word	0x40000400
 8005760:	40000800 	.word	0x40000800
 8005764:	40000c00 	.word	0x40000c00
 8005768:	40014000 	.word	0x40014000
 800576c:	40001800 	.word	0x40001800

08005770 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800577a:	2300      	movs	r3, #0
 800577c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b0c      	cmp	r3, #12
 8005782:	d855      	bhi.n	8005830 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005784:	a201      	add	r2, pc, #4	@ (adr r2, 800578c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8005786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578a:	bf00      	nop
 800578c:	080057c1 	.word	0x080057c1
 8005790:	08005831 	.word	0x08005831
 8005794:	08005831 	.word	0x08005831
 8005798:	08005831 	.word	0x08005831
 800579c:	080057dd 	.word	0x080057dd
 80057a0:	08005831 	.word	0x08005831
 80057a4:	08005831 	.word	0x08005831
 80057a8:	08005831 	.word	0x08005831
 80057ac:	080057f9 	.word	0x080057f9
 80057b0:	08005831 	.word	0x08005831
 80057b4:	08005831 	.word	0x08005831
 80057b8:	08005831 	.word	0x08005831
 80057bc:	08005815 	.word	0x08005815
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68da      	ldr	r2, [r3, #12]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80057ce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fe f981 	bl	8003adc <HAL_DMA_Abort_IT>
      break;
 80057da:	e02c      	b.n	8005836 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68da      	ldr	r2, [r3, #12]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057ea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7fe f973 	bl	8003adc <HAL_DMA_Abort_IT>
      break;
 80057f6:	e01e      	b.n	8005836 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005806:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800580c:	4618      	mov	r0, r3
 800580e:	f7fe f965 	bl	8003adc <HAL_DMA_Abort_IT>
      break;
 8005812:	e010      	b.n	8005836 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68da      	ldr	r2, [r3, #12]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005822:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005828:	4618      	mov	r0, r3
 800582a:	f7fe f957 	bl	8003adc <HAL_DMA_Abort_IT>
      break;
 800582e:	e002      	b.n	8005836 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	73fb      	strb	r3, [r7, #15]
      break;
 8005834:	bf00      	nop
  }

  if (status == HAL_OK)
 8005836:	7bfb      	ldrb	r3, [r7, #15]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d161      	bne.n	8005900 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2200      	movs	r2, #0
 8005842:	6839      	ldr	r1, [r7, #0]
 8005844:	4618      	mov	r0, r3
 8005846:	f001 fa51 	bl	8006cec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a2f      	ldr	r2, [pc, #188]	@ (800590c <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d004      	beq.n	800585e <HAL_TIM_PWM_Stop_DMA+0xee>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a2d      	ldr	r2, [pc, #180]	@ (8005910 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d101      	bne.n	8005862 <HAL_TIM_PWM_Stop_DMA+0xf2>
 800585e:	2301      	movs	r3, #1
 8005860:	e000      	b.n	8005864 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8005862:	2300      	movs	r3, #0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d017      	beq.n	8005898 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6a1a      	ldr	r2, [r3, #32]
 800586e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005872:	4013      	ands	r3, r2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10f      	bne.n	8005898 <HAL_TIM_PWM_Stop_DMA+0x128>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6a1a      	ldr	r2, [r3, #32]
 800587e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005882:	4013      	ands	r3, r2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d107      	bne.n	8005898 <HAL_TIM_PWM_Stop_DMA+0x128>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005896:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6a1a      	ldr	r2, [r3, #32]
 800589e:	f241 1311 	movw	r3, #4369	@ 0x1111
 80058a2:	4013      	ands	r3, r2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10f      	bne.n	80058c8 <HAL_TIM_PWM_Stop_DMA+0x158>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6a1a      	ldr	r2, [r3, #32]
 80058ae:	f240 4344 	movw	r3, #1092	@ 0x444
 80058b2:	4013      	ands	r3, r2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d107      	bne.n	80058c8 <HAL_TIM_PWM_Stop_DMA+0x158>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 0201 	bic.w	r2, r2, #1
 80058c6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d104      	bne.n	80058d8 <HAL_TIM_PWM_Stop_DMA+0x168>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058d6:	e013      	b.n	8005900 <HAL_TIM_PWM_Stop_DMA+0x190>
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	2b04      	cmp	r3, #4
 80058dc:	d104      	bne.n	80058e8 <HAL_TIM_PWM_Stop_DMA+0x178>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058e6:	e00b      	b.n	8005900 <HAL_TIM_PWM_Stop_DMA+0x190>
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	2b08      	cmp	r3, #8
 80058ec:	d104      	bne.n	80058f8 <HAL_TIM_PWM_Stop_DMA+0x188>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058f6:	e003      	b.n	8005900 <HAL_TIM_PWM_Stop_DMA+0x190>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8005900:	7bfb      	ldrb	r3, [r7, #15]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	40010000 	.word	0x40010000
 8005910:	40010400 	.word	0x40010400

08005914 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e041      	b.n	80059aa <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d106      	bne.n	8005940 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7fd fb64 	bl	8003008 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2202      	movs	r2, #2
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	3304      	adds	r3, #4
 8005950:	4619      	mov	r1, r3
 8005952:	4610      	mov	r0, r2
 8005954:	f000 fdaa 	bl	80064ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3708      	adds	r7, #8
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
	...

080059b4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059be:	2300      	movs	r3, #0
 80059c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d104      	bne.n	80059d2 <HAL_TIM_IC_Start_IT+0x1e>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	e013      	b.n	80059fa <HAL_TIM_IC_Start_IT+0x46>
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b04      	cmp	r3, #4
 80059d6:	d104      	bne.n	80059e2 <HAL_TIM_IC_Start_IT+0x2e>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	e00b      	b.n	80059fa <HAL_TIM_IC_Start_IT+0x46>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b08      	cmp	r3, #8
 80059e6:	d104      	bne.n	80059f2 <HAL_TIM_IC_Start_IT+0x3e>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	e003      	b.n	80059fa <HAL_TIM_IC_Start_IT+0x46>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d104      	bne.n	8005a0c <HAL_TIM_IC_Start_IT+0x58>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	e013      	b.n	8005a34 <HAL_TIM_IC_Start_IT+0x80>
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2b04      	cmp	r3, #4
 8005a10:	d104      	bne.n	8005a1c <HAL_TIM_IC_Start_IT+0x68>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	e00b      	b.n	8005a34 <HAL_TIM_IC_Start_IT+0x80>
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	2b08      	cmp	r3, #8
 8005a20:	d104      	bne.n	8005a2c <HAL_TIM_IC_Start_IT+0x78>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	e003      	b.n	8005a34 <HAL_TIM_IC_Start_IT+0x80>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a36:	7bbb      	ldrb	r3, [r7, #14]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d102      	bne.n	8005a42 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a3c:	7b7b      	ldrb	r3, [r7, #13]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d001      	beq.n	8005a46 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e0cc      	b.n	8005be0 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d104      	bne.n	8005a56 <HAL_TIM_IC_Start_IT+0xa2>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a54:	e013      	b.n	8005a7e <HAL_TIM_IC_Start_IT+0xca>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b04      	cmp	r3, #4
 8005a5a:	d104      	bne.n	8005a66 <HAL_TIM_IC_Start_IT+0xb2>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a64:	e00b      	b.n	8005a7e <HAL_TIM_IC_Start_IT+0xca>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d104      	bne.n	8005a76 <HAL_TIM_IC_Start_IT+0xc2>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a74:	e003      	b.n	8005a7e <HAL_TIM_IC_Start_IT+0xca>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2202      	movs	r2, #2
 8005a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d104      	bne.n	8005a8e <HAL_TIM_IC_Start_IT+0xda>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2202      	movs	r2, #2
 8005a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a8c:	e013      	b.n	8005ab6 <HAL_TIM_IC_Start_IT+0x102>
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	2b04      	cmp	r3, #4
 8005a92:	d104      	bne.n	8005a9e <HAL_TIM_IC_Start_IT+0xea>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2202      	movs	r2, #2
 8005a98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a9c:	e00b      	b.n	8005ab6 <HAL_TIM_IC_Start_IT+0x102>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b08      	cmp	r3, #8
 8005aa2:	d104      	bne.n	8005aae <HAL_TIM_IC_Start_IT+0xfa>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005aac:	e003      	b.n	8005ab6 <HAL_TIM_IC_Start_IT+0x102>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b0c      	cmp	r3, #12
 8005aba:	d841      	bhi.n	8005b40 <HAL_TIM_IC_Start_IT+0x18c>
 8005abc:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac4 <HAL_TIM_IC_Start_IT+0x110>)
 8005abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac2:	bf00      	nop
 8005ac4:	08005af9 	.word	0x08005af9
 8005ac8:	08005b41 	.word	0x08005b41
 8005acc:	08005b41 	.word	0x08005b41
 8005ad0:	08005b41 	.word	0x08005b41
 8005ad4:	08005b0b 	.word	0x08005b0b
 8005ad8:	08005b41 	.word	0x08005b41
 8005adc:	08005b41 	.word	0x08005b41
 8005ae0:	08005b41 	.word	0x08005b41
 8005ae4:	08005b1d 	.word	0x08005b1d
 8005ae8:	08005b41 	.word	0x08005b41
 8005aec:	08005b41 	.word	0x08005b41
 8005af0:	08005b41 	.word	0x08005b41
 8005af4:	08005b2f 	.word	0x08005b2f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f042 0202 	orr.w	r2, r2, #2
 8005b06:	60da      	str	r2, [r3, #12]
      break;
 8005b08:	e01d      	b.n	8005b46 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68da      	ldr	r2, [r3, #12]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f042 0204 	orr.w	r2, r2, #4
 8005b18:	60da      	str	r2, [r3, #12]
      break;
 8005b1a:	e014      	b.n	8005b46 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68da      	ldr	r2, [r3, #12]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0208 	orr.w	r2, r2, #8
 8005b2a:	60da      	str	r2, [r3, #12]
      break;
 8005b2c:	e00b      	b.n	8005b46 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68da      	ldr	r2, [r3, #12]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f042 0210 	orr.w	r2, r2, #16
 8005b3c:	60da      	str	r2, [r3, #12]
      break;
 8005b3e:	e002      	b.n	8005b46 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	73fb      	strb	r3, [r7, #15]
      break;
 8005b44:	bf00      	nop
  }

  if (status == HAL_OK)
 8005b46:	7bfb      	ldrb	r3, [r7, #15]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d148      	bne.n	8005bde <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2201      	movs	r2, #1
 8005b52:	6839      	ldr	r1, [r7, #0]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f001 f8c9 	bl	8006cec <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a22      	ldr	r2, [pc, #136]	@ (8005be8 <HAL_TIM_IC_Start_IT+0x234>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d022      	beq.n	8005baa <HAL_TIM_IC_Start_IT+0x1f6>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b6c:	d01d      	beq.n	8005baa <HAL_TIM_IC_Start_IT+0x1f6>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a1e      	ldr	r2, [pc, #120]	@ (8005bec <HAL_TIM_IC_Start_IT+0x238>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d018      	beq.n	8005baa <HAL_TIM_IC_Start_IT+0x1f6>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a1c      	ldr	r2, [pc, #112]	@ (8005bf0 <HAL_TIM_IC_Start_IT+0x23c>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d013      	beq.n	8005baa <HAL_TIM_IC_Start_IT+0x1f6>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a1b      	ldr	r2, [pc, #108]	@ (8005bf4 <HAL_TIM_IC_Start_IT+0x240>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d00e      	beq.n	8005baa <HAL_TIM_IC_Start_IT+0x1f6>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a19      	ldr	r2, [pc, #100]	@ (8005bf8 <HAL_TIM_IC_Start_IT+0x244>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d009      	beq.n	8005baa <HAL_TIM_IC_Start_IT+0x1f6>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a18      	ldr	r2, [pc, #96]	@ (8005bfc <HAL_TIM_IC_Start_IT+0x248>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d004      	beq.n	8005baa <HAL_TIM_IC_Start_IT+0x1f6>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a16      	ldr	r2, [pc, #88]	@ (8005c00 <HAL_TIM_IC_Start_IT+0x24c>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d111      	bne.n	8005bce <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f003 0307 	and.w	r3, r3, #7
 8005bb4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2b06      	cmp	r3, #6
 8005bba:	d010      	beq.n	8005bde <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f042 0201 	orr.w	r2, r2, #1
 8005bca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bcc:	e007      	b.n	8005bde <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f042 0201 	orr.w	r2, r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	40010000 	.word	0x40010000
 8005bec:	40000400 	.word	0x40000400
 8005bf0:	40000800 	.word	0x40000800
 8005bf4:	40000c00 	.word	0x40000c00
 8005bf8:	40010400 	.word	0x40010400
 8005bfc:	40014000 	.word	0x40014000
 8005c00:	40001800 	.word	0x40001800

08005c04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d020      	beq.n	8005c68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f003 0302 	and.w	r3, r3, #2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d01b      	beq.n	8005c68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f06f 0202 	mvn.w	r2, #2
 8005c38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	f003 0303 	and.w	r3, r3, #3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d003      	beq.n	8005c56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7fc fcfc 	bl	800264c <HAL_TIM_IC_CaptureCallback>
 8005c54:	e005      	b.n	8005c62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 fb2e 	bl	80062b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7fb f9b7 	bl	8000fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	f003 0304 	and.w	r3, r3, #4
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d020      	beq.n	8005cb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f003 0304 	and.w	r3, r3, #4
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d01b      	beq.n	8005cb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f06f 0204 	mvn.w	r2, #4
 8005c84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2202      	movs	r2, #2
 8005c8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7fc fcd6 	bl	800264c <HAL_TIM_IC_CaptureCallback>
 8005ca0:	e005      	b.n	8005cae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 fb08 	bl	80062b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7fb f991 	bl	8000fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f003 0308 	and.w	r3, r3, #8
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d020      	beq.n	8005d00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f003 0308 	and.w	r3, r3, #8
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d01b      	beq.n	8005d00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f06f 0208 	mvn.w	r2, #8
 8005cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2204      	movs	r2, #4
 8005cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	69db      	ldr	r3, [r3, #28]
 8005cde:	f003 0303 	and.w	r3, r3, #3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7fc fcb0 	bl	800264c <HAL_TIM_IC_CaptureCallback>
 8005cec:	e005      	b.n	8005cfa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fae2 	bl	80062b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7fb f96b 	bl	8000fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f003 0310 	and.w	r3, r3, #16
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d020      	beq.n	8005d4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f003 0310 	and.w	r3, r3, #16
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d01b      	beq.n	8005d4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f06f 0210 	mvn.w	r2, #16
 8005d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2208      	movs	r2, #8
 8005d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d003      	beq.n	8005d3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7fc fc8a 	bl	800264c <HAL_TIM_IC_CaptureCallback>
 8005d38:	e005      	b.n	8005d46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 fabc 	bl	80062b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7fb f945 	bl	8000fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00c      	beq.n	8005d70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d007      	beq.n	8005d70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f06f 0201 	mvn.w	r2, #1
 8005d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7fc fd62 	bl	8002834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00c      	beq.n	8005d94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d007      	beq.n	8005d94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f001 f8aa 	bl	8006ee8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00c      	beq.n	8005db8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d007      	beq.n	8005db8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 fa94 	bl	80062e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f003 0320 	and.w	r3, r3, #32
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00c      	beq.n	8005ddc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f003 0320 	and.w	r3, r3, #32
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d007      	beq.n	8005ddc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f06f 0220 	mvn.w	r2, #32
 8005dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f001 f87c 	bl	8006ed4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ddc:	bf00      	nop
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d101      	bne.n	8005e02 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005dfe:	2302      	movs	r3, #2
 8005e00:	e088      	b.n	8005f14 <HAL_TIM_IC_ConfigChannel+0x130>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d11b      	bne.n	8005e48 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005e20:	f000 fda0 	bl	8006964 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699a      	ldr	r2, [r3, #24]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 020c 	bic.w	r2, r2, #12
 8005e32:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	6999      	ldr	r1, [r3, #24]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	689a      	ldr	r2, [r3, #8]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	619a      	str	r2, [r3, #24]
 8005e46:	e060      	b.n	8005f0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b04      	cmp	r3, #4
 8005e4c:	d11c      	bne.n	8005e88 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005e5e:	f000 fe24 	bl	8006aaa <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	699a      	ldr	r2, [r3, #24]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005e70:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	6999      	ldr	r1, [r3, #24]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	021a      	lsls	r2, r3, #8
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	430a      	orrs	r2, r1
 8005e84:	619a      	str	r2, [r3, #24]
 8005e86:	e040      	b.n	8005f0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2b08      	cmp	r3, #8
 8005e8c:	d11b      	bne.n	8005ec6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005e9e:	f000 fe71 	bl	8006b84 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69da      	ldr	r2, [r3, #28]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f022 020c 	bic.w	r2, r2, #12
 8005eb0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69d9      	ldr	r1, [r3, #28]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	689a      	ldr	r2, [r3, #8]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	61da      	str	r2, [r3, #28]
 8005ec4:	e021      	b.n	8005f0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b0c      	cmp	r3, #12
 8005eca:	d11c      	bne.n	8005f06 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005edc:	f000 fe8e 	bl	8006bfc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	69da      	ldr	r2, [r3, #28]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005eee:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	69d9      	ldr	r1, [r3, #28]
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	021a      	lsls	r2, r3, #8
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	430a      	orrs	r2, r1
 8005f02:	61da      	str	r2, [r3, #28]
 8005f04:	e001      	b.n	8005f0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3718      	adds	r7, #24
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f36:	2302      	movs	r3, #2
 8005f38:	e0ae      	b.n	8006098 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b0c      	cmp	r3, #12
 8005f46:	f200 809f 	bhi.w	8006088 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f50:	08005f85 	.word	0x08005f85
 8005f54:	08006089 	.word	0x08006089
 8005f58:	08006089 	.word	0x08006089
 8005f5c:	08006089 	.word	0x08006089
 8005f60:	08005fc5 	.word	0x08005fc5
 8005f64:	08006089 	.word	0x08006089
 8005f68:	08006089 	.word	0x08006089
 8005f6c:	08006089 	.word	0x08006089
 8005f70:	08006007 	.word	0x08006007
 8005f74:	08006089 	.word	0x08006089
 8005f78:	08006089 	.word	0x08006089
 8005f7c:	08006089 	.word	0x08006089
 8005f80:	08006047 	.word	0x08006047
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68b9      	ldr	r1, [r7, #8]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f000 fb3a 	bl	8006604 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	699a      	ldr	r2, [r3, #24]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f042 0208 	orr.w	r2, r2, #8
 8005f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	699a      	ldr	r2, [r3, #24]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0204 	bic.w	r2, r2, #4
 8005fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6999      	ldr	r1, [r3, #24]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	691a      	ldr	r2, [r3, #16]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	619a      	str	r2, [r3, #24]
      break;
 8005fc2:	e064      	b.n	800608e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68b9      	ldr	r1, [r7, #8]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 fb8a 	bl	80066e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	699a      	ldr	r2, [r3, #24]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	699a      	ldr	r2, [r3, #24]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6999      	ldr	r1, [r3, #24]
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	021a      	lsls	r2, r3, #8
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	619a      	str	r2, [r3, #24]
      break;
 8006004:	e043      	b.n	800608e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68b9      	ldr	r1, [r7, #8]
 800600c:	4618      	mov	r0, r3
 800600e:	f000 fbdf 	bl	80067d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	69da      	ldr	r2, [r3, #28]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f042 0208 	orr.w	r2, r2, #8
 8006020:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	69da      	ldr	r2, [r3, #28]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 0204 	bic.w	r2, r2, #4
 8006030:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	69d9      	ldr	r1, [r3, #28]
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	691a      	ldr	r2, [r3, #16]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	61da      	str	r2, [r3, #28]
      break;
 8006044:	e023      	b.n	800608e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68b9      	ldr	r1, [r7, #8]
 800604c:	4618      	mov	r0, r3
 800604e:	f000 fc33 	bl	80068b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69da      	ldr	r2, [r3, #28]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006060:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	69da      	ldr	r2, [r3, #28]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006070:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69d9      	ldr	r1, [r3, #28]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	021a      	lsls	r2, r3, #8
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	430a      	orrs	r2, r1
 8006084:	61da      	str	r2, [r3, #28]
      break;
 8006086:	e002      	b.n	800608e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	75fb      	strb	r3, [r7, #23]
      break;
 800608c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006096:	7dfb      	ldrb	r3, [r7, #23]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3718      	adds	r7, #24
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d101      	bne.n	80060bc <HAL_TIM_ConfigClockSource+0x1c>
 80060b8:	2302      	movs	r3, #2
 80060ba:	e0b4      	b.n	8006226 <HAL_TIM_ConfigClockSource+0x186>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2202      	movs	r2, #2
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80060da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80060e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060f4:	d03e      	beq.n	8006174 <HAL_TIM_ConfigClockSource+0xd4>
 80060f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060fa:	f200 8087 	bhi.w	800620c <HAL_TIM_ConfigClockSource+0x16c>
 80060fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006102:	f000 8086 	beq.w	8006212 <HAL_TIM_ConfigClockSource+0x172>
 8006106:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800610a:	d87f      	bhi.n	800620c <HAL_TIM_ConfigClockSource+0x16c>
 800610c:	2b70      	cmp	r3, #112	@ 0x70
 800610e:	d01a      	beq.n	8006146 <HAL_TIM_ConfigClockSource+0xa6>
 8006110:	2b70      	cmp	r3, #112	@ 0x70
 8006112:	d87b      	bhi.n	800620c <HAL_TIM_ConfigClockSource+0x16c>
 8006114:	2b60      	cmp	r3, #96	@ 0x60
 8006116:	d050      	beq.n	80061ba <HAL_TIM_ConfigClockSource+0x11a>
 8006118:	2b60      	cmp	r3, #96	@ 0x60
 800611a:	d877      	bhi.n	800620c <HAL_TIM_ConfigClockSource+0x16c>
 800611c:	2b50      	cmp	r3, #80	@ 0x50
 800611e:	d03c      	beq.n	800619a <HAL_TIM_ConfigClockSource+0xfa>
 8006120:	2b50      	cmp	r3, #80	@ 0x50
 8006122:	d873      	bhi.n	800620c <HAL_TIM_ConfigClockSource+0x16c>
 8006124:	2b40      	cmp	r3, #64	@ 0x40
 8006126:	d058      	beq.n	80061da <HAL_TIM_ConfigClockSource+0x13a>
 8006128:	2b40      	cmp	r3, #64	@ 0x40
 800612a:	d86f      	bhi.n	800620c <HAL_TIM_ConfigClockSource+0x16c>
 800612c:	2b30      	cmp	r3, #48	@ 0x30
 800612e:	d064      	beq.n	80061fa <HAL_TIM_ConfigClockSource+0x15a>
 8006130:	2b30      	cmp	r3, #48	@ 0x30
 8006132:	d86b      	bhi.n	800620c <HAL_TIM_ConfigClockSource+0x16c>
 8006134:	2b20      	cmp	r3, #32
 8006136:	d060      	beq.n	80061fa <HAL_TIM_ConfigClockSource+0x15a>
 8006138:	2b20      	cmp	r3, #32
 800613a:	d867      	bhi.n	800620c <HAL_TIM_ConfigClockSource+0x16c>
 800613c:	2b00      	cmp	r3, #0
 800613e:	d05c      	beq.n	80061fa <HAL_TIM_ConfigClockSource+0x15a>
 8006140:	2b10      	cmp	r3, #16
 8006142:	d05a      	beq.n	80061fa <HAL_TIM_ConfigClockSource+0x15a>
 8006144:	e062      	b.n	800620c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006156:	f000 fda9 	bl	8006cac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006168:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	609a      	str	r2, [r3, #8]
      break;
 8006172:	e04f      	b.n	8006214 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006184:	f000 fd92 	bl	8006cac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689a      	ldr	r2, [r3, #8]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006196:	609a      	str	r2, [r3, #8]
      break;
 8006198:	e03c      	b.n	8006214 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061a6:	461a      	mov	r2, r3
 80061a8:	f000 fc50 	bl	8006a4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2150      	movs	r1, #80	@ 0x50
 80061b2:	4618      	mov	r0, r3
 80061b4:	f000 fd5f 	bl	8006c76 <TIM_ITRx_SetConfig>
      break;
 80061b8:	e02c      	b.n	8006214 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061c6:	461a      	mov	r2, r3
 80061c8:	f000 fcac 	bl	8006b24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2160      	movs	r1, #96	@ 0x60
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 fd4f 	bl	8006c76 <TIM_ITRx_SetConfig>
      break;
 80061d8:	e01c      	b.n	8006214 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061e6:	461a      	mov	r2, r3
 80061e8:	f000 fc30 	bl	8006a4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2140      	movs	r1, #64	@ 0x40
 80061f2:	4618      	mov	r0, r3
 80061f4:	f000 fd3f 	bl	8006c76 <TIM_ITRx_SetConfig>
      break;
 80061f8:	e00c      	b.n	8006214 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4619      	mov	r1, r3
 8006204:	4610      	mov	r0, r2
 8006206:	f000 fd36 	bl	8006c76 <TIM_ITRx_SetConfig>
      break;
 800620a:	e003      	b.n	8006214 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	73fb      	strb	r3, [r7, #15]
      break;
 8006210:	e000      	b.n	8006214 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006212:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006224:	7bfb      	ldrb	r3, [r7, #15]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
	...

08006230 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800623a:	2300      	movs	r3, #0
 800623c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b0c      	cmp	r3, #12
 8006242:	d831      	bhi.n	80062a8 <HAL_TIM_ReadCapturedValue+0x78>
 8006244:	a201      	add	r2, pc, #4	@ (adr r2, 800624c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624a:	bf00      	nop
 800624c:	08006281 	.word	0x08006281
 8006250:	080062a9 	.word	0x080062a9
 8006254:	080062a9 	.word	0x080062a9
 8006258:	080062a9 	.word	0x080062a9
 800625c:	0800628b 	.word	0x0800628b
 8006260:	080062a9 	.word	0x080062a9
 8006264:	080062a9 	.word	0x080062a9
 8006268:	080062a9 	.word	0x080062a9
 800626c:	08006295 	.word	0x08006295
 8006270:	080062a9 	.word	0x080062a9
 8006274:	080062a9 	.word	0x080062a9
 8006278:	080062a9 	.word	0x080062a9
 800627c:	0800629f 	.word	0x0800629f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006286:	60fb      	str	r3, [r7, #12]

      break;
 8006288:	e00f      	b.n	80062aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006290:	60fb      	str	r3, [r7, #12]

      break;
 8006292:	e00a      	b.n	80062aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800629a:	60fb      	str	r3, [r7, #12]

      break;
 800629c:	e005      	b.n	80062aa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a4:	60fb      	str	r3, [r7, #12]

      break;
 80062a6:	e000      	b.n	80062aa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80062a8:	bf00      	nop
  }

  return tmpreg;
 80062aa:	68fb      	ldr	r3, [r7, #12]
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3714      	adds	r7, #20
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006314:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	429a      	cmp	r2, r3
 800631e:	d107      	bne.n	8006330 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2201      	movs	r2, #1
 8006324:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800632e:	e02a      	b.n	8006386 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	429a      	cmp	r2, r3
 8006338:	d107      	bne.n	800634a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2202      	movs	r2, #2
 800633e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006348:	e01d      	b.n	8006386 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	429a      	cmp	r2, r3
 8006352:	d107      	bne.n	8006364 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2204      	movs	r2, #4
 8006358:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006362:	e010      	b.n	8006386 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	429a      	cmp	r2, r3
 800636c:	d107      	bne.n	800637e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2208      	movs	r2, #8
 8006372:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800637c:	e003      	b.n	8006386 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f7ff ffb4 	bl	80062f4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	771a      	strb	r2, [r3, #28]
}
 8006392:	bf00      	nop
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b084      	sub	sp, #16
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d10b      	bne.n	80063ca <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2201      	movs	r2, #1
 80063b6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	69db      	ldr	r3, [r3, #28]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d136      	bne.n	800642e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063c8:	e031      	b.n	800642e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d10b      	bne.n	80063ec <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2202      	movs	r2, #2
 80063d8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	69db      	ldr	r3, [r3, #28]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d125      	bne.n	800642e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063ea:	e020      	b.n	800642e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d10b      	bne.n	800640e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2204      	movs	r2, #4
 80063fa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	69db      	ldr	r3, [r3, #28]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d114      	bne.n	800642e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800640c:	e00f      	b.n	800642e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	429a      	cmp	r2, r3
 8006416:	d10a      	bne.n	800642e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2208      	movs	r2, #8
 800641c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d103      	bne.n	800642e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f7fa fdce 	bl	8000fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	771a      	strb	r2, [r3, #28]
}
 800643a:	bf00      	nop
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b084      	sub	sp, #16
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800644e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	429a      	cmp	r2, r3
 8006458:	d103      	bne.n	8006462 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2201      	movs	r2, #1
 800645e:	771a      	strb	r2, [r3, #28]
 8006460:	e019      	b.n	8006496 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	429a      	cmp	r2, r3
 800646a:	d103      	bne.n	8006474 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2202      	movs	r2, #2
 8006470:	771a      	strb	r2, [r3, #28]
 8006472:	e010      	b.n	8006496 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	429a      	cmp	r2, r3
 800647c:	d103      	bne.n	8006486 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2204      	movs	r2, #4
 8006482:	771a      	strb	r2, [r3, #28]
 8006484:	e007      	b.n	8006496 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	429a      	cmp	r2, r3
 800648e:	d102      	bne.n	8006496 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2208      	movs	r2, #8
 8006494:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f7ff ff18 	bl	80062cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	771a      	strb	r2, [r3, #28]
}
 80064a2:	bf00      	nop
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
	...

080064ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b085      	sub	sp, #20
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a46      	ldr	r2, [pc, #280]	@ (80065d8 <TIM_Base_SetConfig+0x12c>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d013      	beq.n	80064ec <TIM_Base_SetConfig+0x40>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064ca:	d00f      	beq.n	80064ec <TIM_Base_SetConfig+0x40>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a43      	ldr	r2, [pc, #268]	@ (80065dc <TIM_Base_SetConfig+0x130>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d00b      	beq.n	80064ec <TIM_Base_SetConfig+0x40>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a42      	ldr	r2, [pc, #264]	@ (80065e0 <TIM_Base_SetConfig+0x134>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d007      	beq.n	80064ec <TIM_Base_SetConfig+0x40>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a41      	ldr	r2, [pc, #260]	@ (80065e4 <TIM_Base_SetConfig+0x138>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d003      	beq.n	80064ec <TIM_Base_SetConfig+0x40>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a40      	ldr	r2, [pc, #256]	@ (80065e8 <TIM_Base_SetConfig+0x13c>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d108      	bne.n	80064fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a35      	ldr	r2, [pc, #212]	@ (80065d8 <TIM_Base_SetConfig+0x12c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d02b      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800650c:	d027      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a32      	ldr	r2, [pc, #200]	@ (80065dc <TIM_Base_SetConfig+0x130>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d023      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a31      	ldr	r2, [pc, #196]	@ (80065e0 <TIM_Base_SetConfig+0x134>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d01f      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a30      	ldr	r2, [pc, #192]	@ (80065e4 <TIM_Base_SetConfig+0x138>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d01b      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a2f      	ldr	r2, [pc, #188]	@ (80065e8 <TIM_Base_SetConfig+0x13c>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d017      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a2e      	ldr	r2, [pc, #184]	@ (80065ec <TIM_Base_SetConfig+0x140>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d013      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a2d      	ldr	r2, [pc, #180]	@ (80065f0 <TIM_Base_SetConfig+0x144>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d00f      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a2c      	ldr	r2, [pc, #176]	@ (80065f4 <TIM_Base_SetConfig+0x148>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d00b      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a2b      	ldr	r2, [pc, #172]	@ (80065f8 <TIM_Base_SetConfig+0x14c>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d007      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a2a      	ldr	r2, [pc, #168]	@ (80065fc <TIM_Base_SetConfig+0x150>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d003      	beq.n	800655e <TIM_Base_SetConfig+0xb2>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a29      	ldr	r2, [pc, #164]	@ (8006600 <TIM_Base_SetConfig+0x154>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d108      	bne.n	8006570 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006564:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	4313      	orrs	r3, r2
 800656e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	4313      	orrs	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	689a      	ldr	r2, [r3, #8]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a10      	ldr	r2, [pc, #64]	@ (80065d8 <TIM_Base_SetConfig+0x12c>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d003      	beq.n	80065a4 <TIM_Base_SetConfig+0xf8>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a12      	ldr	r2, [pc, #72]	@ (80065e8 <TIM_Base_SetConfig+0x13c>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d103      	bne.n	80065ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	691a      	ldr	r2, [r3, #16]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d105      	bne.n	80065ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f023 0201 	bic.w	r2, r3, #1
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	611a      	str	r2, [r3, #16]
  }
}
 80065ca:	bf00      	nop
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
 80065d6:	bf00      	nop
 80065d8:	40010000 	.word	0x40010000
 80065dc:	40000400 	.word	0x40000400
 80065e0:	40000800 	.word	0x40000800
 80065e4:	40000c00 	.word	0x40000c00
 80065e8:	40010400 	.word	0x40010400
 80065ec:	40014000 	.word	0x40014000
 80065f0:	40014400 	.word	0x40014400
 80065f4:	40014800 	.word	0x40014800
 80065f8:	40001800 	.word	0x40001800
 80065fc:	40001c00 	.word	0x40001c00
 8006600:	40002000 	.word	0x40002000

08006604 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006604:	b480      	push	{r7}
 8006606:	b087      	sub	sp, #28
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a1b      	ldr	r3, [r3, #32]
 8006618:	f023 0201 	bic.w	r2, r3, #1
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 0303 	bic.w	r3, r3, #3
 800663a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	4313      	orrs	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f023 0302 	bic.w	r3, r3, #2
 800664c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	4313      	orrs	r3, r2
 8006656:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a20      	ldr	r2, [pc, #128]	@ (80066dc <TIM_OC1_SetConfig+0xd8>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d003      	beq.n	8006668 <TIM_OC1_SetConfig+0x64>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a1f      	ldr	r2, [pc, #124]	@ (80066e0 <TIM_OC1_SetConfig+0xdc>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d10c      	bne.n	8006682 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f023 0308 	bic.w	r3, r3, #8
 800666e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	4313      	orrs	r3, r2
 8006678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f023 0304 	bic.w	r3, r3, #4
 8006680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a15      	ldr	r2, [pc, #84]	@ (80066dc <TIM_OC1_SetConfig+0xd8>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d003      	beq.n	8006692 <TIM_OC1_SetConfig+0x8e>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a14      	ldr	r2, [pc, #80]	@ (80066e0 <TIM_OC1_SetConfig+0xdc>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d111      	bne.n	80066b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80066a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	695b      	ldr	r3, [r3, #20]
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685a      	ldr	r2, [r3, #4]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	621a      	str	r2, [r3, #32]
}
 80066d0:	bf00      	nop
 80066d2:	371c      	adds	r7, #28
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	40010000 	.word	0x40010000
 80066e0:	40010400 	.word	0x40010400

080066e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	f023 0210 	bic.w	r2, r3, #16
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800671a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	021b      	lsls	r3, r3, #8
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	4313      	orrs	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f023 0320 	bic.w	r3, r3, #32
 800672e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	011b      	lsls	r3, r3, #4
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	4313      	orrs	r3, r2
 800673a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a22      	ldr	r2, [pc, #136]	@ (80067c8 <TIM_OC2_SetConfig+0xe4>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d003      	beq.n	800674c <TIM_OC2_SetConfig+0x68>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a21      	ldr	r2, [pc, #132]	@ (80067cc <TIM_OC2_SetConfig+0xe8>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d10d      	bne.n	8006768 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006752:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	011b      	lsls	r3, r3, #4
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	4313      	orrs	r3, r2
 800675e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006766:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a17      	ldr	r2, [pc, #92]	@ (80067c8 <TIM_OC2_SetConfig+0xe4>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d003      	beq.n	8006778 <TIM_OC2_SetConfig+0x94>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a16      	ldr	r2, [pc, #88]	@ (80067cc <TIM_OC2_SetConfig+0xe8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d113      	bne.n	80067a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800677e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006786:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	4313      	orrs	r3, r2
 8006792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	4313      	orrs	r3, r2
 800679e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	621a      	str	r2, [r3, #32]
}
 80067ba:	bf00      	nop
 80067bc:	371c      	adds	r7, #28
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	40010000 	.word	0x40010000
 80067cc:	40010400 	.word	0x40010400

080067d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b087      	sub	sp, #28
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f023 0303 	bic.w	r3, r3, #3
 8006806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	4313      	orrs	r3, r2
 8006810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	021b      	lsls	r3, r3, #8
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	4313      	orrs	r3, r2
 8006824:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a21      	ldr	r2, [pc, #132]	@ (80068b0 <TIM_OC3_SetConfig+0xe0>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d003      	beq.n	8006836 <TIM_OC3_SetConfig+0x66>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a20      	ldr	r2, [pc, #128]	@ (80068b4 <TIM_OC3_SetConfig+0xe4>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d10d      	bne.n	8006852 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800683c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	021b      	lsls	r3, r3, #8
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	4313      	orrs	r3, r2
 8006848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a16      	ldr	r2, [pc, #88]	@ (80068b0 <TIM_OC3_SetConfig+0xe0>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d003      	beq.n	8006862 <TIM_OC3_SetConfig+0x92>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a15      	ldr	r2, [pc, #84]	@ (80068b4 <TIM_OC3_SetConfig+0xe4>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d113      	bne.n	800688a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	011b      	lsls	r3, r3, #4
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	4313      	orrs	r3, r2
 800687c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	011b      	lsls	r3, r3, #4
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	4313      	orrs	r3, r2
 8006888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	685a      	ldr	r2, [r3, #4]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	621a      	str	r2, [r3, #32]
}
 80068a4:	bf00      	nop
 80068a6:	371c      	adds	r7, #28
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	40010000 	.word	0x40010000
 80068b4:	40010400 	.word	0x40010400

080068b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b087      	sub	sp, #28
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a1b      	ldr	r3, [r3, #32]
 80068cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	69db      	ldr	r3, [r3, #28]
 80068de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	021b      	lsls	r3, r3, #8
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	031b      	lsls	r3, r3, #12
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	4313      	orrs	r3, r2
 800690e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a12      	ldr	r2, [pc, #72]	@ (800695c <TIM_OC4_SetConfig+0xa4>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d003      	beq.n	8006920 <TIM_OC4_SetConfig+0x68>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a11      	ldr	r2, [pc, #68]	@ (8006960 <TIM_OC4_SetConfig+0xa8>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d109      	bne.n	8006934 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006926:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	019b      	lsls	r3, r3, #6
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	4313      	orrs	r3, r2
 8006932:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	685a      	ldr	r2, [r3, #4]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	621a      	str	r2, [r3, #32]
}
 800694e:	bf00      	nop
 8006950:	371c      	adds	r7, #28
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	40010000 	.word	0x40010000
 8006960:	40010400 	.word	0x40010400

08006964 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006964:	b480      	push	{r7}
 8006966:	b087      	sub	sp, #28
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
 8006970:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6a1b      	ldr	r3, [r3, #32]
 800697c:	f023 0201 	bic.w	r2, r3, #1
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	4a28      	ldr	r2, [pc, #160]	@ (8006a30 <TIM_TI1_SetConfig+0xcc>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d01b      	beq.n	80069ca <TIM_TI1_SetConfig+0x66>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006998:	d017      	beq.n	80069ca <TIM_TI1_SetConfig+0x66>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	4a25      	ldr	r2, [pc, #148]	@ (8006a34 <TIM_TI1_SetConfig+0xd0>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d013      	beq.n	80069ca <TIM_TI1_SetConfig+0x66>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	4a24      	ldr	r2, [pc, #144]	@ (8006a38 <TIM_TI1_SetConfig+0xd4>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d00f      	beq.n	80069ca <TIM_TI1_SetConfig+0x66>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	4a23      	ldr	r2, [pc, #140]	@ (8006a3c <TIM_TI1_SetConfig+0xd8>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d00b      	beq.n	80069ca <TIM_TI1_SetConfig+0x66>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	4a22      	ldr	r2, [pc, #136]	@ (8006a40 <TIM_TI1_SetConfig+0xdc>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d007      	beq.n	80069ca <TIM_TI1_SetConfig+0x66>
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	4a21      	ldr	r2, [pc, #132]	@ (8006a44 <TIM_TI1_SetConfig+0xe0>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d003      	beq.n	80069ca <TIM_TI1_SetConfig+0x66>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	4a20      	ldr	r2, [pc, #128]	@ (8006a48 <TIM_TI1_SetConfig+0xe4>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d101      	bne.n	80069ce <TIM_TI1_SetConfig+0x6a>
 80069ca:	2301      	movs	r3, #1
 80069cc:	e000      	b.n	80069d0 <TIM_TI1_SetConfig+0x6c>
 80069ce:	2300      	movs	r3, #0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d008      	beq.n	80069e6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	f023 0303 	bic.w	r3, r3, #3
 80069da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	617b      	str	r3, [r7, #20]
 80069e4:	e003      	b.n	80069ee <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f043 0301 	orr.w	r3, r3, #1
 80069ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	011b      	lsls	r3, r3, #4
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	f023 030a 	bic.w	r3, r3, #10
 8006a08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	f003 030a 	and.w	r3, r3, #10
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	697a      	ldr	r2, [r7, #20]
 8006a1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	621a      	str	r2, [r3, #32]
}
 8006a22:	bf00      	nop
 8006a24:	371c      	adds	r7, #28
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	40010000 	.word	0x40010000
 8006a34:	40000400 	.word	0x40000400
 8006a38:	40000800 	.word	0x40000800
 8006a3c:	40000c00 	.word	0x40000c00
 8006a40:	40010400 	.word	0x40010400
 8006a44:	40014000 	.word	0x40014000
 8006a48:	40001800 	.word	0x40001800

08006a4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b087      	sub	sp, #28
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6a1b      	ldr	r3, [r3, #32]
 8006a5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6a1b      	ldr	r3, [r3, #32]
 8006a62:	f023 0201 	bic.w	r2, r3, #1
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	011b      	lsls	r3, r3, #4
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f023 030a 	bic.w	r3, r3, #10
 8006a88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	693a      	ldr	r2, [r7, #16]
 8006a96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	621a      	str	r2, [r3, #32]
}
 8006a9e:	bf00      	nop
 8006aa0:	371c      	adds	r7, #28
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b087      	sub	sp, #28
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	60f8      	str	r0, [r7, #12]
 8006ab2:	60b9      	str	r1, [r7, #8]
 8006ab4:	607a      	str	r2, [r7, #4]
 8006ab6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	f023 0210 	bic.w	r2, r3, #16
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ad6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	021b      	lsls	r3, r3, #8
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ae8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	031b      	lsls	r3, r3, #12
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006afc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	011b      	lsls	r3, r3, #4
 8006b02:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	621a      	str	r2, [r3, #32]
}
 8006b18:	bf00      	nop
 8006b1a:	371c      	adds	r7, #28
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6a1b      	ldr	r3, [r3, #32]
 8006b34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6a1b      	ldr	r3, [r3, #32]
 8006b3a:	f023 0210 	bic.w	r2, r3, #16
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	031b      	lsls	r3, r3, #12
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b60:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	011b      	lsls	r3, r3, #4
 8006b66:	697a      	ldr	r2, [r7, #20]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	621a      	str	r2, [r3, #32]
}
 8006b78:	bf00      	nop
 8006b7a:	371c      	adds	r7, #28
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b087      	sub	sp, #28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
 8006b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6a1b      	ldr	r3, [r3, #32]
 8006b96:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6a1b      	ldr	r3, [r3, #32]
 8006b9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	69db      	ldr	r3, [r3, #28]
 8006ba8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f023 0303 	bic.w	r3, r3, #3
 8006bb0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006bb2:	693a      	ldr	r2, [r7, #16]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006bc0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	011b      	lsls	r3, r3, #4
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	693a      	ldr	r2, [r7, #16]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006bd4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	021b      	lsls	r3, r3, #8
 8006bda:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	693a      	ldr	r2, [r7, #16]
 8006be8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	621a      	str	r2, [r3, #32]
}
 8006bf0:	bf00      	nop
 8006bf2:	371c      	adds	r7, #28
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
 8006c08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6a1b      	ldr	r3, [r3, #32]
 8006c14:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c28:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	021b      	lsls	r3, r3, #8
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c3a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	031b      	lsls	r3, r3, #12
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006c4e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	031b      	lsls	r3, r3, #12
 8006c54:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	621a      	str	r2, [r3, #32]
}
 8006c6a:	bf00      	nop
 8006c6c:	371c      	adds	r7, #28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b085      	sub	sp, #20
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
 8006c7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006c8e:	683a      	ldr	r2, [r7, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	f043 0307 	orr.w	r3, r3, #7
 8006c98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	609a      	str	r2, [r3, #8]
}
 8006ca0:	bf00      	nop
 8006ca2:	3714      	adds	r7, #20
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b087      	sub	sp, #28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
 8006cb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006cc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	021a      	lsls	r2, r3, #8
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	609a      	str	r2, [r3, #8]
}
 8006ce0:	bf00      	nop
 8006ce2:	371c      	adds	r7, #28
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b087      	sub	sp, #28
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	f003 031f 	and.w	r3, r3, #31
 8006cfe:	2201      	movs	r2, #1
 8006d00:	fa02 f303 	lsl.w	r3, r2, r3
 8006d04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6a1a      	ldr	r2, [r3, #32]
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	43db      	mvns	r3, r3
 8006d0e:	401a      	ands	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6a1a      	ldr	r2, [r3, #32]
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	f003 031f 	and.w	r3, r3, #31
 8006d1e:	6879      	ldr	r1, [r7, #4]
 8006d20:	fa01 f303 	lsl.w	r3, r1, r3
 8006d24:	431a      	orrs	r2, r3
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	621a      	str	r2, [r3, #32]
}
 8006d2a:	bf00      	nop
 8006d2c:	371c      	adds	r7, #28
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
	...

08006d38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d101      	bne.n	8006d50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	e05a      	b.n	8006e06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a21      	ldr	r2, [pc, #132]	@ (8006e14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d022      	beq.n	8006dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d9c:	d01d      	beq.n	8006dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a1d      	ldr	r2, [pc, #116]	@ (8006e18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d018      	beq.n	8006dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a1b      	ldr	r2, [pc, #108]	@ (8006e1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d013      	beq.n	8006dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a1a      	ldr	r2, [pc, #104]	@ (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d00e      	beq.n	8006dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a18      	ldr	r2, [pc, #96]	@ (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d009      	beq.n	8006dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a17      	ldr	r2, [pc, #92]	@ (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d004      	beq.n	8006dda <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a15      	ldr	r2, [pc, #84]	@ (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d10c      	bne.n	8006df4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006de0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3714      	adds	r7, #20
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	40010000 	.word	0x40010000
 8006e18:	40000400 	.word	0x40000400
 8006e1c:	40000800 	.word	0x40000800
 8006e20:	40000c00 	.word	0x40000c00
 8006e24:	40010400 	.word	0x40010400
 8006e28:	40014000 	.word	0x40014000
 8006e2c:	40001800 	.word	0x40001800

08006e30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d101      	bne.n	8006e4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006e48:	2302      	movs	r3, #2
 8006e4a:	e03d      	b.n	8006ec8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	695b      	ldr	r3, [r3, #20]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d101      	bne.n	8006f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e042      	b.n	8006f94 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d106      	bne.n	8006f28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f7fc f8fa 	bl	800311c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2224      	movs	r2, #36	@ 0x24
 8006f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68da      	ldr	r2, [r3, #12]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fde9 	bl	8007b18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	691a      	ldr	r2, [r3, #16]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	695a      	ldr	r2, [r3, #20]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68da      	ldr	r2, [r3, #12]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2220      	movs	r2, #32
 8006f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3708      	adds	r7, #8
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b08a      	sub	sp, #40	@ 0x28
 8006fa0:	af02      	add	r7, sp, #8
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	603b      	str	r3, [r7, #0]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006fac:	2300      	movs	r3, #0
 8006fae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	2b20      	cmp	r3, #32
 8006fba:	d175      	bne.n	80070a8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d002      	beq.n	8006fc8 <HAL_UART_Transmit+0x2c>
 8006fc2:	88fb      	ldrh	r3, [r7, #6]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d101      	bne.n	8006fcc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e06e      	b.n	80070aa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2221      	movs	r2, #33	@ 0x21
 8006fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fda:	f7fc fab9 	bl	8003550 <HAL_GetTick>
 8006fde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	88fa      	ldrh	r2, [r7, #6]
 8006fe4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	88fa      	ldrh	r2, [r7, #6]
 8006fea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ff4:	d108      	bne.n	8007008 <HAL_UART_Transmit+0x6c>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d104      	bne.n	8007008 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006ffe:	2300      	movs	r3, #0
 8007000:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	61bb      	str	r3, [r7, #24]
 8007006:	e003      	b.n	8007010 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800700c:	2300      	movs	r3, #0
 800700e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007010:	e02e      	b.n	8007070 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	2200      	movs	r2, #0
 800701a:	2180      	movs	r1, #128	@ 0x80
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f000 fb4b 	bl	80076b8 <UART_WaitOnFlagUntilTimeout>
 8007022:	4603      	mov	r3, r0
 8007024:	2b00      	cmp	r3, #0
 8007026:	d005      	beq.n	8007034 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2220      	movs	r2, #32
 800702c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e03a      	b.n	80070aa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10b      	bne.n	8007052 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	881b      	ldrh	r3, [r3, #0]
 800703e:	461a      	mov	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007048:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	3302      	adds	r3, #2
 800704e:	61bb      	str	r3, [r7, #24]
 8007050:	e007      	b.n	8007062 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	781a      	ldrb	r2, [r3, #0]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	3301      	adds	r3, #1
 8007060:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007066:	b29b      	uxth	r3, r3
 8007068:	3b01      	subs	r3, #1
 800706a:	b29a      	uxth	r2, r3
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007074:	b29b      	uxth	r3, r3
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1cb      	bne.n	8007012 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	2200      	movs	r2, #0
 8007082:	2140      	movs	r1, #64	@ 0x40
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f000 fb17 	bl	80076b8 <UART_WaitOnFlagUntilTimeout>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d005      	beq.n	800709c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2220      	movs	r2, #32
 8007094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e006      	b.n	80070aa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2220      	movs	r2, #32
 80070a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	e000      	b.n	80070aa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80070a8:	2302      	movs	r3, #2
  }
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3720      	adds	r7, #32
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b085      	sub	sp, #20
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	60f8      	str	r0, [r7, #12]
 80070ba:	60b9      	str	r1, [r7, #8]
 80070bc:	4613      	mov	r3, r2
 80070be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b20      	cmp	r3, #32
 80070ca:	d121      	bne.n	8007110 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d002      	beq.n	80070d8 <HAL_UART_Transmit_IT+0x26>
 80070d2:	88fb      	ldrh	r3, [r7, #6]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d101      	bne.n	80070dc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80070d8:	2301      	movs	r3, #1
 80070da:	e01a      	b.n	8007112 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	88fa      	ldrh	r2, [r7, #6]
 80070e6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	88fa      	ldrh	r2, [r7, #6]
 80070ec:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2221      	movs	r2, #33	@ 0x21
 80070f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68da      	ldr	r2, [r3, #12]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800710a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800710c:	2300      	movs	r3, #0
 800710e:	e000      	b.n	8007112 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8007110:	2302      	movs	r3, #2
  }
}
 8007112:	4618      	mov	r0, r3
 8007114:	3714      	adds	r7, #20
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr

0800711e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b084      	sub	sp, #16
 8007122:	af00      	add	r7, sp, #0
 8007124:	60f8      	str	r0, [r7, #12]
 8007126:	60b9      	str	r1, [r7, #8]
 8007128:	4613      	mov	r3, r2
 800712a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b20      	cmp	r3, #32
 8007136:	d112      	bne.n	800715e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d002      	beq.n	8007144 <HAL_UART_Receive_IT+0x26>
 800713e:	88fb      	ldrh	r3, [r7, #6]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d101      	bne.n	8007148 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e00b      	b.n	8007160 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800714e:	88fb      	ldrh	r3, [r7, #6]
 8007150:	461a      	mov	r2, r3
 8007152:	68b9      	ldr	r1, [r7, #8]
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 fb08 	bl	800776a <UART_Start_Receive_IT>
 800715a:	4603      	mov	r3, r0
 800715c:	e000      	b.n	8007160 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800715e:	2302      	movs	r3, #2
  }
}
 8007160:	4618      	mov	r0, r3
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b0ba      	sub	sp, #232	@ 0xe8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800718e:	2300      	movs	r3, #0
 8007190:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007194:	2300      	movs	r3, #0
 8007196:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800719a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800719e:	f003 030f 	and.w	r3, r3, #15
 80071a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80071a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10f      	bne.n	80071ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071b2:	f003 0320 	and.w	r3, r3, #32
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d009      	beq.n	80071ce <HAL_UART_IRQHandler+0x66>
 80071ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071be:	f003 0320 	and.w	r3, r3, #32
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d003      	beq.n	80071ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fbe8 	bl	800799c <UART_Receive_IT>
      return;
 80071cc:	e25b      	b.n	8007686 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80071ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f000 80de 	beq.w	8007394 <HAL_UART_IRQHandler+0x22c>
 80071d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071dc:	f003 0301 	and.w	r3, r3, #1
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d106      	bne.n	80071f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80071e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071e8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f000 80d1 	beq.w	8007394 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80071f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071f6:	f003 0301 	and.w	r3, r3, #1
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00b      	beq.n	8007216 <HAL_UART_IRQHandler+0xae>
 80071fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007206:	2b00      	cmp	r3, #0
 8007208:	d005      	beq.n	8007216 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800720e:	f043 0201 	orr.w	r2, r3, #1
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800721a:	f003 0304 	and.w	r3, r3, #4
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00b      	beq.n	800723a <HAL_UART_IRQHandler+0xd2>
 8007222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	2b00      	cmp	r3, #0
 800722c:	d005      	beq.n	800723a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007232:	f043 0202 	orr.w	r2, r3, #2
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800723a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00b      	beq.n	800725e <HAL_UART_IRQHandler+0xf6>
 8007246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	2b00      	cmp	r3, #0
 8007250:	d005      	beq.n	800725e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007256:	f043 0204 	orr.w	r2, r3, #4
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800725e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007262:	f003 0308 	and.w	r3, r3, #8
 8007266:	2b00      	cmp	r3, #0
 8007268:	d011      	beq.n	800728e <HAL_UART_IRQHandler+0x126>
 800726a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800726e:	f003 0320 	and.w	r3, r3, #32
 8007272:	2b00      	cmp	r3, #0
 8007274:	d105      	bne.n	8007282 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b00      	cmp	r3, #0
 8007280:	d005      	beq.n	800728e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007286:	f043 0208 	orr.w	r2, r3, #8
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007292:	2b00      	cmp	r3, #0
 8007294:	f000 81f2 	beq.w	800767c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800729c:	f003 0320 	and.w	r3, r3, #32
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d008      	beq.n	80072b6 <HAL_UART_IRQHandler+0x14e>
 80072a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072a8:	f003 0320 	and.w	r3, r3, #32
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d002      	beq.n	80072b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fb73 	bl	800799c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	695b      	ldr	r3, [r3, #20]
 80072bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072c0:	2b40      	cmp	r3, #64	@ 0x40
 80072c2:	bf0c      	ite	eq
 80072c4:	2301      	moveq	r3, #1
 80072c6:	2300      	movne	r3, #0
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072d2:	f003 0308 	and.w	r3, r3, #8
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d103      	bne.n	80072e2 <HAL_UART_IRQHandler+0x17a>
 80072da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d04f      	beq.n	8007382 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fa7b 	bl	80077de <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072f2:	2b40      	cmp	r3, #64	@ 0x40
 80072f4:	d141      	bne.n	800737a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	3314      	adds	r3, #20
 80072fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007300:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007304:	e853 3f00 	ldrex	r3, [r3]
 8007308:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800730c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007310:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007314:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	3314      	adds	r3, #20
 800731e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007322:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007326:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800732e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007332:	e841 2300 	strex	r3, r2, [r1]
 8007336:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800733a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1d9      	bne.n	80072f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007346:	2b00      	cmp	r3, #0
 8007348:	d013      	beq.n	8007372 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800734e:	4a7e      	ldr	r2, [pc, #504]	@ (8007548 <HAL_UART_IRQHandler+0x3e0>)
 8007350:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007356:	4618      	mov	r0, r3
 8007358:	f7fc fbc0 	bl	8003adc <HAL_DMA_Abort_IT>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d016      	beq.n	8007390 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800736c:	4610      	mov	r0, r2
 800736e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007370:	e00e      	b.n	8007390 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f98a 	bl	800768c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007378:	e00a      	b.n	8007390 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f986 	bl	800768c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007380:	e006      	b.n	8007390 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f982 	bl	800768c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800738e:	e175      	b.n	800767c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007390:	bf00      	nop
    return;
 8007392:	e173      	b.n	800767c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007398:	2b01      	cmp	r3, #1
 800739a:	f040 814f 	bne.w	800763c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800739e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073a2:	f003 0310 	and.w	r3, r3, #16
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f000 8148 	beq.w	800763c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80073ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073b0:	f003 0310 	and.w	r3, r3, #16
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 8141 	beq.w	800763c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073ba:	2300      	movs	r3, #0
 80073bc:	60bb      	str	r3, [r7, #8]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	60bb      	str	r3, [r7, #8]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	60bb      	str	r3, [r7, #8]
 80073ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073da:	2b40      	cmp	r3, #64	@ 0x40
 80073dc:	f040 80b6 	bne.w	800754c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80073ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 8145 	beq.w	8007680 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80073fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80073fe:	429a      	cmp	r2, r3
 8007400:	f080 813e 	bcs.w	8007680 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800740a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007416:	f000 8088 	beq.w	800752a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	330c      	adds	r3, #12
 8007420:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007424:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007428:	e853 3f00 	ldrex	r3, [r3]
 800742c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007430:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007434:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007438:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	330c      	adds	r3, #12
 8007442:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007446:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800744a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007452:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007456:	e841 2300 	strex	r3, r2, [r1]
 800745a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800745e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1d9      	bne.n	800741a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	3314      	adds	r3, #20
 800746c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007470:	e853 3f00 	ldrex	r3, [r3]
 8007474:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007476:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007478:	f023 0301 	bic.w	r3, r3, #1
 800747c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	3314      	adds	r3, #20
 8007486:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800748a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800748e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007490:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007492:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007496:	e841 2300 	strex	r3, r2, [r1]
 800749a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800749c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d1e1      	bne.n	8007466 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	3314      	adds	r3, #20
 80074a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80074ac:	e853 3f00 	ldrex	r3, [r3]
 80074b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80074b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	3314      	adds	r3, #20
 80074c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80074c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80074c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80074cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80074ce:	e841 2300 	strex	r3, r2, [r1]
 80074d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80074d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1e3      	bne.n	80074a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2220      	movs	r2, #32
 80074de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	330c      	adds	r3, #12
 80074ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074f2:	e853 3f00 	ldrex	r3, [r3]
 80074f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80074f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074fa:	f023 0310 	bic.w	r3, r3, #16
 80074fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	330c      	adds	r3, #12
 8007508:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800750c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800750e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007510:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007512:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007514:	e841 2300 	strex	r3, r2, [r1]
 8007518:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800751a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1e3      	bne.n	80074e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007524:	4618      	mov	r0, r3
 8007526:	f7fc fa69 	bl	80039fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2202      	movs	r2, #2
 800752e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007538:	b29b      	uxth	r3, r3
 800753a:	1ad3      	subs	r3, r2, r3
 800753c:	b29b      	uxth	r3, r3
 800753e:	4619      	mov	r1, r3
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f8ad 	bl	80076a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007546:	e09b      	b.n	8007680 <HAL_UART_IRQHandler+0x518>
 8007548:	080078a5 	.word	0x080078a5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007554:	b29b      	uxth	r3, r3
 8007556:	1ad3      	subs	r3, r2, r3
 8007558:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007560:	b29b      	uxth	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	f000 808e 	beq.w	8007684 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007568:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800756c:	2b00      	cmp	r3, #0
 800756e:	f000 8089 	beq.w	8007684 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	330c      	adds	r3, #12
 8007578:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800757c:	e853 3f00 	ldrex	r3, [r3]
 8007580:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007584:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007588:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	330c      	adds	r3, #12
 8007592:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007596:	647a      	str	r2, [r7, #68]	@ 0x44
 8007598:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800759c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800759e:	e841 2300 	strex	r3, r2, [r1]
 80075a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80075a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1e3      	bne.n	8007572 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	3314      	adds	r3, #20
 80075b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b4:	e853 3f00 	ldrex	r3, [r3]
 80075b8:	623b      	str	r3, [r7, #32]
   return(result);
 80075ba:	6a3b      	ldr	r3, [r7, #32]
 80075bc:	f023 0301 	bic.w	r3, r3, #1
 80075c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	3314      	adds	r3, #20
 80075ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80075ce:	633a      	str	r2, [r7, #48]	@ 0x30
 80075d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075d6:	e841 2300 	strex	r3, r2, [r1]
 80075da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d1e3      	bne.n	80075aa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2220      	movs	r2, #32
 80075e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	330c      	adds	r3, #12
 80075f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	e853 3f00 	ldrex	r3, [r3]
 80075fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f023 0310 	bic.w	r3, r3, #16
 8007606:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	330c      	adds	r3, #12
 8007610:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007614:	61fa      	str	r2, [r7, #28]
 8007616:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007618:	69b9      	ldr	r1, [r7, #24]
 800761a:	69fa      	ldr	r2, [r7, #28]
 800761c:	e841 2300 	strex	r3, r2, [r1]
 8007620:	617b      	str	r3, [r7, #20]
   return(result);
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1e3      	bne.n	80075f0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2202      	movs	r2, #2
 800762c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800762e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 f833 	bl	80076a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800763a:	e023      	b.n	8007684 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800763c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007640:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007644:	2b00      	cmp	r3, #0
 8007646:	d009      	beq.n	800765c <HAL_UART_IRQHandler+0x4f4>
 8007648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800764c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007650:	2b00      	cmp	r3, #0
 8007652:	d003      	beq.n	800765c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f939 	bl	80078cc <UART_Transmit_IT>
    return;
 800765a:	e014      	b.n	8007686 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800765c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00e      	beq.n	8007686 <HAL_UART_IRQHandler+0x51e>
 8007668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800766c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007670:	2b00      	cmp	r3, #0
 8007672:	d008      	beq.n	8007686 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 f979 	bl	800796c <UART_EndTransmit_IT>
    return;
 800767a:	e004      	b.n	8007686 <HAL_UART_IRQHandler+0x51e>
    return;
 800767c:	bf00      	nop
 800767e:	e002      	b.n	8007686 <HAL_UART_IRQHandler+0x51e>
      return;
 8007680:	bf00      	nop
 8007682:	e000      	b.n	8007686 <HAL_UART_IRQHandler+0x51e>
      return;
 8007684:	bf00      	nop
  }
}
 8007686:	37e8      	adds	r7, #232	@ 0xe8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007694:	bf00      	nop
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	460b      	mov	r3, r1
 80076aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	603b      	str	r3, [r7, #0]
 80076c4:	4613      	mov	r3, r2
 80076c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076c8:	e03b      	b.n	8007742 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076ca:	6a3b      	ldr	r3, [r7, #32]
 80076cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076d0:	d037      	beq.n	8007742 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076d2:	f7fb ff3d 	bl	8003550 <HAL_GetTick>
 80076d6:	4602      	mov	r2, r0
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	1ad3      	subs	r3, r2, r3
 80076dc:	6a3a      	ldr	r2, [r7, #32]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d302      	bcc.n	80076e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80076e2:	6a3b      	ldr	r3, [r7, #32]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d101      	bne.n	80076ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	e03a      	b.n	8007762 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f003 0304 	and.w	r3, r3, #4
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d023      	beq.n	8007742 <UART_WaitOnFlagUntilTimeout+0x8a>
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	2b80      	cmp	r3, #128	@ 0x80
 80076fe:	d020      	beq.n	8007742 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2b40      	cmp	r3, #64	@ 0x40
 8007704:	d01d      	beq.n	8007742 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0308 	and.w	r3, r3, #8
 8007710:	2b08      	cmp	r3, #8
 8007712:	d116      	bne.n	8007742 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007714:	2300      	movs	r3, #0
 8007716:	617b      	str	r3, [r7, #20]
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	617b      	str	r3, [r7, #20]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	617b      	str	r3, [r7, #20]
 8007728:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f000 f857 	bl	80077de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2208      	movs	r2, #8
 8007734:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e00f      	b.n	8007762 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	4013      	ands	r3, r2
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	429a      	cmp	r2, r3
 8007750:	bf0c      	ite	eq
 8007752:	2301      	moveq	r3, #1
 8007754:	2300      	movne	r3, #0
 8007756:	b2db      	uxtb	r3, r3
 8007758:	461a      	mov	r2, r3
 800775a:	79fb      	ldrb	r3, [r7, #7]
 800775c:	429a      	cmp	r2, r3
 800775e:	d0b4      	beq.n	80076ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3718      	adds	r7, #24
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800776a:	b480      	push	{r7}
 800776c:	b085      	sub	sp, #20
 800776e:	af00      	add	r7, sp, #0
 8007770:	60f8      	str	r0, [r7, #12]
 8007772:	60b9      	str	r1, [r7, #8]
 8007774:	4613      	mov	r3, r2
 8007776:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	88fa      	ldrh	r2, [r7, #6]
 8007782:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	88fa      	ldrh	r2, [r7, #6]
 8007788:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2222      	movs	r2, #34	@ 0x22
 8007794:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d007      	beq.n	80077b0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68da      	ldr	r2, [r3, #12]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80077ae:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	695a      	ldr	r2, [r3, #20]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f042 0201 	orr.w	r2, r2, #1
 80077be:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68da      	ldr	r2, [r3, #12]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f042 0220 	orr.w	r2, r2, #32
 80077ce:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr

080077de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077de:	b480      	push	{r7}
 80077e0:	b095      	sub	sp, #84	@ 0x54
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	330c      	adds	r3, #12
 80077ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077f0:	e853 3f00 	ldrex	r3, [r3]
 80077f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	330c      	adds	r3, #12
 8007804:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007806:	643a      	str	r2, [r7, #64]	@ 0x40
 8007808:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800780c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800780e:	e841 2300 	strex	r3, r2, [r1]
 8007812:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1e5      	bne.n	80077e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3314      	adds	r3, #20
 8007820:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007822:	6a3b      	ldr	r3, [r7, #32]
 8007824:	e853 3f00 	ldrex	r3, [r3]
 8007828:	61fb      	str	r3, [r7, #28]
   return(result);
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	f023 0301 	bic.w	r3, r3, #1
 8007830:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	3314      	adds	r3, #20
 8007838:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800783a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800783c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007840:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007842:	e841 2300 	strex	r3, r2, [r1]
 8007846:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1e5      	bne.n	800781a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007852:	2b01      	cmp	r3, #1
 8007854:	d119      	bne.n	800788a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	330c      	adds	r3, #12
 800785c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	e853 3f00 	ldrex	r3, [r3]
 8007864:	60bb      	str	r3, [r7, #8]
   return(result);
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	f023 0310 	bic.w	r3, r3, #16
 800786c:	647b      	str	r3, [r7, #68]	@ 0x44
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	330c      	adds	r3, #12
 8007874:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007876:	61ba      	str	r2, [r7, #24]
 8007878:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787a:	6979      	ldr	r1, [r7, #20]
 800787c:	69ba      	ldr	r2, [r7, #24]
 800787e:	e841 2300 	strex	r3, r2, [r1]
 8007882:	613b      	str	r3, [r7, #16]
   return(result);
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d1e5      	bne.n	8007856 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2220      	movs	r2, #32
 800788e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007898:	bf00      	nop
 800789a:	3754      	adds	r7, #84	@ 0x54
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f7ff fee4 	bl	800768c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078c4:	bf00      	nop
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	2b21      	cmp	r3, #33	@ 0x21
 80078de:	d13e      	bne.n	800795e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078e8:	d114      	bne.n	8007914 <UART_Transmit_IT+0x48>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d110      	bne.n	8007914 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a1b      	ldr	r3, [r3, #32]
 80078f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	881b      	ldrh	r3, [r3, #0]
 80078fc:	461a      	mov	r2, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007906:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a1b      	ldr	r3, [r3, #32]
 800790c:	1c9a      	adds	r2, r3, #2
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	621a      	str	r2, [r3, #32]
 8007912:	e008      	b.n	8007926 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a1b      	ldr	r3, [r3, #32]
 8007918:	1c59      	adds	r1, r3, #1
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	6211      	str	r1, [r2, #32]
 800791e:	781a      	ldrb	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800792a:	b29b      	uxth	r3, r3
 800792c:	3b01      	subs	r3, #1
 800792e:	b29b      	uxth	r3, r3
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	4619      	mov	r1, r3
 8007934:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10f      	bne.n	800795a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68da      	ldr	r2, [r3, #12]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007948:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68da      	ldr	r2, [r3, #12]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007958:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800795a:	2300      	movs	r3, #0
 800795c:	e000      	b.n	8007960 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800795e:	2302      	movs	r3, #2
  }
}
 8007960:	4618      	mov	r0, r3
 8007962:	3714      	adds	r7, #20
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68da      	ldr	r2, [r3, #12]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007982:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2220      	movs	r2, #32
 8007988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f7f9 fd19 	bl	80013c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b08c      	sub	sp, #48	@ 0x30
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b22      	cmp	r3, #34	@ 0x22
 80079ae:	f040 80ae 	bne.w	8007b0e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079ba:	d117      	bne.n	80079ec <UART_Receive_IT+0x50>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d113      	bne.n	80079ec <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80079c4:	2300      	movs	r3, #0
 80079c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079da:	b29a      	uxth	r2, r3
 80079dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079de:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e4:	1c9a      	adds	r2, r3, #2
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	629a      	str	r2, [r3, #40]	@ 0x28
 80079ea:	e026      	b.n	8007a3a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80079f2:	2300      	movs	r3, #0
 80079f4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079fe:	d007      	beq.n	8007a10 <UART_Receive_IT+0x74>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10a      	bne.n	8007a1e <UART_Receive_IT+0x82>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d106      	bne.n	8007a1e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	b2da      	uxtb	r2, r3
 8007a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a1a:	701a      	strb	r2, [r3, #0]
 8007a1c:	e008      	b.n	8007a30 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a2a:	b2da      	uxtb	r2, r3
 8007a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a2e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a34:	1c5a      	adds	r2, r3, #1
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	3b01      	subs	r3, #1
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	4619      	mov	r1, r3
 8007a48:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d15d      	bne.n	8007b0a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68da      	ldr	r2, [r3, #12]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f022 0220 	bic.w	r2, r2, #32
 8007a5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68da      	ldr	r2, [r3, #12]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007a6c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	695a      	ldr	r2, [r3, #20]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f022 0201 	bic.w	r2, r2, #1
 8007a7c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2220      	movs	r2, #32
 8007a82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d135      	bne.n	8007b00 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	330c      	adds	r3, #12
 8007aa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	e853 3f00 	ldrex	r3, [r3]
 8007aa8:	613b      	str	r3, [r7, #16]
   return(result);
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	f023 0310 	bic.w	r3, r3, #16
 8007ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	330c      	adds	r3, #12
 8007ab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aba:	623a      	str	r2, [r7, #32]
 8007abc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abe:	69f9      	ldr	r1, [r7, #28]
 8007ac0:	6a3a      	ldr	r2, [r7, #32]
 8007ac2:	e841 2300 	strex	r3, r2, [r1]
 8007ac6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1e5      	bne.n	8007a9a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0310 	and.w	r3, r3, #16
 8007ad8:	2b10      	cmp	r3, #16
 8007ada:	d10a      	bne.n	8007af2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007adc:	2300      	movs	r3, #0
 8007ade:	60fb      	str	r3, [r7, #12]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	60fb      	str	r3, [r7, #12]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	60fb      	str	r3, [r7, #12]
 8007af0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f7ff fdd1 	bl	80076a0 <HAL_UARTEx_RxEventCallback>
 8007afe:	e002      	b.n	8007b06 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f7f9 fc93 	bl	800142c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	e002      	b.n	8007b10 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	e000      	b.n	8007b10 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007b0e:	2302      	movs	r3, #2
  }
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3730      	adds	r7, #48	@ 0x30
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b1c:	b0c0      	sub	sp, #256	@ 0x100
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b34:	68d9      	ldr	r1, [r3, #12]
 8007b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	ea40 0301 	orr.w	r3, r0, r1
 8007b40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b46:	689a      	ldr	r2, [r3, #8]
 8007b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b54:	695b      	ldr	r3, [r3, #20]
 8007b56:	431a      	orrs	r2, r3
 8007b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b5c:	69db      	ldr	r3, [r3, #28]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007b70:	f021 010c 	bic.w	r1, r1, #12
 8007b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007b7e:	430b      	orrs	r3, r1
 8007b80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	695b      	ldr	r3, [r3, #20]
 8007b8a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b92:	6999      	ldr	r1, [r3, #24]
 8007b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	ea40 0301 	orr.w	r3, r0, r1
 8007b9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	4b8f      	ldr	r3, [pc, #572]	@ (8007de4 <UART_SetConfig+0x2cc>)
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d005      	beq.n	8007bb8 <UART_SetConfig+0xa0>
 8007bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	4b8d      	ldr	r3, [pc, #564]	@ (8007de8 <UART_SetConfig+0x2d0>)
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d104      	bne.n	8007bc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007bb8:	f7fc fd20 	bl	80045fc <HAL_RCC_GetPCLK2Freq>
 8007bbc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007bc0:	e003      	b.n	8007bca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007bc2:	f7fc fd07 	bl	80045d4 <HAL_RCC_GetPCLK1Freq>
 8007bc6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bce:	69db      	ldr	r3, [r3, #28]
 8007bd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bd4:	f040 810c 	bne.w	8007df0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007bd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007be2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007be6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007bea:	4622      	mov	r2, r4
 8007bec:	462b      	mov	r3, r5
 8007bee:	1891      	adds	r1, r2, r2
 8007bf0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007bf2:	415b      	adcs	r3, r3
 8007bf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007bf6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007bfa:	4621      	mov	r1, r4
 8007bfc:	eb12 0801 	adds.w	r8, r2, r1
 8007c00:	4629      	mov	r1, r5
 8007c02:	eb43 0901 	adc.w	r9, r3, r1
 8007c06:	f04f 0200 	mov.w	r2, #0
 8007c0a:	f04f 0300 	mov.w	r3, #0
 8007c0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c1a:	4690      	mov	r8, r2
 8007c1c:	4699      	mov	r9, r3
 8007c1e:	4623      	mov	r3, r4
 8007c20:	eb18 0303 	adds.w	r3, r8, r3
 8007c24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007c28:	462b      	mov	r3, r5
 8007c2a:	eb49 0303 	adc.w	r3, r9, r3
 8007c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c3e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007c42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007c46:	460b      	mov	r3, r1
 8007c48:	18db      	adds	r3, r3, r3
 8007c4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	eb42 0303 	adc.w	r3, r2, r3
 8007c52:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007c58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007c5c:	f7f8 ffc4 	bl	8000be8 <__aeabi_uldivmod>
 8007c60:	4602      	mov	r2, r0
 8007c62:	460b      	mov	r3, r1
 8007c64:	4b61      	ldr	r3, [pc, #388]	@ (8007dec <UART_SetConfig+0x2d4>)
 8007c66:	fba3 2302 	umull	r2, r3, r3, r2
 8007c6a:	095b      	lsrs	r3, r3, #5
 8007c6c:	011c      	lsls	r4, r3, #4
 8007c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c72:	2200      	movs	r2, #0
 8007c74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c78:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007c7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007c80:	4642      	mov	r2, r8
 8007c82:	464b      	mov	r3, r9
 8007c84:	1891      	adds	r1, r2, r2
 8007c86:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007c88:	415b      	adcs	r3, r3
 8007c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007c90:	4641      	mov	r1, r8
 8007c92:	eb12 0a01 	adds.w	sl, r2, r1
 8007c96:	4649      	mov	r1, r9
 8007c98:	eb43 0b01 	adc.w	fp, r3, r1
 8007c9c:	f04f 0200 	mov.w	r2, #0
 8007ca0:	f04f 0300 	mov.w	r3, #0
 8007ca4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ca8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007cac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cb0:	4692      	mov	sl, r2
 8007cb2:	469b      	mov	fp, r3
 8007cb4:	4643      	mov	r3, r8
 8007cb6:	eb1a 0303 	adds.w	r3, sl, r3
 8007cba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007cbe:	464b      	mov	r3, r9
 8007cc0:	eb4b 0303 	adc.w	r3, fp, r3
 8007cc4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007cd4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007cd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	18db      	adds	r3, r3, r3
 8007ce0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	eb42 0303 	adc.w	r3, r2, r3
 8007ce8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007cee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007cf2:	f7f8 ff79 	bl	8000be8 <__aeabi_uldivmod>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	4611      	mov	r1, r2
 8007cfc:	4b3b      	ldr	r3, [pc, #236]	@ (8007dec <UART_SetConfig+0x2d4>)
 8007cfe:	fba3 2301 	umull	r2, r3, r3, r1
 8007d02:	095b      	lsrs	r3, r3, #5
 8007d04:	2264      	movs	r2, #100	@ 0x64
 8007d06:	fb02 f303 	mul.w	r3, r2, r3
 8007d0a:	1acb      	subs	r3, r1, r3
 8007d0c:	00db      	lsls	r3, r3, #3
 8007d0e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007d12:	4b36      	ldr	r3, [pc, #216]	@ (8007dec <UART_SetConfig+0x2d4>)
 8007d14:	fba3 2302 	umull	r2, r3, r3, r2
 8007d18:	095b      	lsrs	r3, r3, #5
 8007d1a:	005b      	lsls	r3, r3, #1
 8007d1c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007d20:	441c      	add	r4, r3
 8007d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d26:	2200      	movs	r2, #0
 8007d28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d2c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007d30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007d34:	4642      	mov	r2, r8
 8007d36:	464b      	mov	r3, r9
 8007d38:	1891      	adds	r1, r2, r2
 8007d3a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007d3c:	415b      	adcs	r3, r3
 8007d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007d44:	4641      	mov	r1, r8
 8007d46:	1851      	adds	r1, r2, r1
 8007d48:	6339      	str	r1, [r7, #48]	@ 0x30
 8007d4a:	4649      	mov	r1, r9
 8007d4c:	414b      	adcs	r3, r1
 8007d4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d50:	f04f 0200 	mov.w	r2, #0
 8007d54:	f04f 0300 	mov.w	r3, #0
 8007d58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007d5c:	4659      	mov	r1, fp
 8007d5e:	00cb      	lsls	r3, r1, #3
 8007d60:	4651      	mov	r1, sl
 8007d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d66:	4651      	mov	r1, sl
 8007d68:	00ca      	lsls	r2, r1, #3
 8007d6a:	4610      	mov	r0, r2
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	4603      	mov	r3, r0
 8007d70:	4642      	mov	r2, r8
 8007d72:	189b      	adds	r3, r3, r2
 8007d74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d78:	464b      	mov	r3, r9
 8007d7a:	460a      	mov	r2, r1
 8007d7c:	eb42 0303 	adc.w	r3, r2, r3
 8007d80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007d90:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007d94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007d98:	460b      	mov	r3, r1
 8007d9a:	18db      	adds	r3, r3, r3
 8007d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d9e:	4613      	mov	r3, r2
 8007da0:	eb42 0303 	adc.w	r3, r2, r3
 8007da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007da6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007daa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007dae:	f7f8 ff1b 	bl	8000be8 <__aeabi_uldivmod>
 8007db2:	4602      	mov	r2, r0
 8007db4:	460b      	mov	r3, r1
 8007db6:	4b0d      	ldr	r3, [pc, #52]	@ (8007dec <UART_SetConfig+0x2d4>)
 8007db8:	fba3 1302 	umull	r1, r3, r3, r2
 8007dbc:	095b      	lsrs	r3, r3, #5
 8007dbe:	2164      	movs	r1, #100	@ 0x64
 8007dc0:	fb01 f303 	mul.w	r3, r1, r3
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	00db      	lsls	r3, r3, #3
 8007dc8:	3332      	adds	r3, #50	@ 0x32
 8007dca:	4a08      	ldr	r2, [pc, #32]	@ (8007dec <UART_SetConfig+0x2d4>)
 8007dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd0:	095b      	lsrs	r3, r3, #5
 8007dd2:	f003 0207 	and.w	r2, r3, #7
 8007dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4422      	add	r2, r4
 8007dde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007de0:	e106      	b.n	8007ff0 <UART_SetConfig+0x4d8>
 8007de2:	bf00      	nop
 8007de4:	40011000 	.word	0x40011000
 8007de8:	40011400 	.word	0x40011400
 8007dec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007df4:	2200      	movs	r2, #0
 8007df6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007dfa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007dfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007e02:	4642      	mov	r2, r8
 8007e04:	464b      	mov	r3, r9
 8007e06:	1891      	adds	r1, r2, r2
 8007e08:	6239      	str	r1, [r7, #32]
 8007e0a:	415b      	adcs	r3, r3
 8007e0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e12:	4641      	mov	r1, r8
 8007e14:	1854      	adds	r4, r2, r1
 8007e16:	4649      	mov	r1, r9
 8007e18:	eb43 0501 	adc.w	r5, r3, r1
 8007e1c:	f04f 0200 	mov.w	r2, #0
 8007e20:	f04f 0300 	mov.w	r3, #0
 8007e24:	00eb      	lsls	r3, r5, #3
 8007e26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e2a:	00e2      	lsls	r2, r4, #3
 8007e2c:	4614      	mov	r4, r2
 8007e2e:	461d      	mov	r5, r3
 8007e30:	4643      	mov	r3, r8
 8007e32:	18e3      	adds	r3, r4, r3
 8007e34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007e38:	464b      	mov	r3, r9
 8007e3a:	eb45 0303 	adc.w	r3, r5, r3
 8007e3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007e4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007e52:	f04f 0200 	mov.w	r2, #0
 8007e56:	f04f 0300 	mov.w	r3, #0
 8007e5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007e5e:	4629      	mov	r1, r5
 8007e60:	008b      	lsls	r3, r1, #2
 8007e62:	4621      	mov	r1, r4
 8007e64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e68:	4621      	mov	r1, r4
 8007e6a:	008a      	lsls	r2, r1, #2
 8007e6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007e70:	f7f8 feba 	bl	8000be8 <__aeabi_uldivmod>
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	4b60      	ldr	r3, [pc, #384]	@ (8007ffc <UART_SetConfig+0x4e4>)
 8007e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8007e7e:	095b      	lsrs	r3, r3, #5
 8007e80:	011c      	lsls	r4, r3, #4
 8007e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e86:	2200      	movs	r2, #0
 8007e88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e8c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007e90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007e94:	4642      	mov	r2, r8
 8007e96:	464b      	mov	r3, r9
 8007e98:	1891      	adds	r1, r2, r2
 8007e9a:	61b9      	str	r1, [r7, #24]
 8007e9c:	415b      	adcs	r3, r3
 8007e9e:	61fb      	str	r3, [r7, #28]
 8007ea0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ea4:	4641      	mov	r1, r8
 8007ea6:	1851      	adds	r1, r2, r1
 8007ea8:	6139      	str	r1, [r7, #16]
 8007eaa:	4649      	mov	r1, r9
 8007eac:	414b      	adcs	r3, r1
 8007eae:	617b      	str	r3, [r7, #20]
 8007eb0:	f04f 0200 	mov.w	r2, #0
 8007eb4:	f04f 0300 	mov.w	r3, #0
 8007eb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ebc:	4659      	mov	r1, fp
 8007ebe:	00cb      	lsls	r3, r1, #3
 8007ec0:	4651      	mov	r1, sl
 8007ec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ec6:	4651      	mov	r1, sl
 8007ec8:	00ca      	lsls	r2, r1, #3
 8007eca:	4610      	mov	r0, r2
 8007ecc:	4619      	mov	r1, r3
 8007ece:	4603      	mov	r3, r0
 8007ed0:	4642      	mov	r2, r8
 8007ed2:	189b      	adds	r3, r3, r2
 8007ed4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ed8:	464b      	mov	r3, r9
 8007eda:	460a      	mov	r2, r1
 8007edc:	eb42 0303 	adc.w	r3, r2, r3
 8007ee0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007eee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007ef0:	f04f 0200 	mov.w	r2, #0
 8007ef4:	f04f 0300 	mov.w	r3, #0
 8007ef8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007efc:	4649      	mov	r1, r9
 8007efe:	008b      	lsls	r3, r1, #2
 8007f00:	4641      	mov	r1, r8
 8007f02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f06:	4641      	mov	r1, r8
 8007f08:	008a      	lsls	r2, r1, #2
 8007f0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007f0e:	f7f8 fe6b 	bl	8000be8 <__aeabi_uldivmod>
 8007f12:	4602      	mov	r2, r0
 8007f14:	460b      	mov	r3, r1
 8007f16:	4611      	mov	r1, r2
 8007f18:	4b38      	ldr	r3, [pc, #224]	@ (8007ffc <UART_SetConfig+0x4e4>)
 8007f1a:	fba3 2301 	umull	r2, r3, r3, r1
 8007f1e:	095b      	lsrs	r3, r3, #5
 8007f20:	2264      	movs	r2, #100	@ 0x64
 8007f22:	fb02 f303 	mul.w	r3, r2, r3
 8007f26:	1acb      	subs	r3, r1, r3
 8007f28:	011b      	lsls	r3, r3, #4
 8007f2a:	3332      	adds	r3, #50	@ 0x32
 8007f2c:	4a33      	ldr	r2, [pc, #204]	@ (8007ffc <UART_SetConfig+0x4e4>)
 8007f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f32:	095b      	lsrs	r3, r3, #5
 8007f34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007f38:	441c      	add	r4, r3
 8007f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f3e:	2200      	movs	r2, #0
 8007f40:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f42:	677a      	str	r2, [r7, #116]	@ 0x74
 8007f44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007f48:	4642      	mov	r2, r8
 8007f4a:	464b      	mov	r3, r9
 8007f4c:	1891      	adds	r1, r2, r2
 8007f4e:	60b9      	str	r1, [r7, #8]
 8007f50:	415b      	adcs	r3, r3
 8007f52:	60fb      	str	r3, [r7, #12]
 8007f54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f58:	4641      	mov	r1, r8
 8007f5a:	1851      	adds	r1, r2, r1
 8007f5c:	6039      	str	r1, [r7, #0]
 8007f5e:	4649      	mov	r1, r9
 8007f60:	414b      	adcs	r3, r1
 8007f62:	607b      	str	r3, [r7, #4]
 8007f64:	f04f 0200 	mov.w	r2, #0
 8007f68:	f04f 0300 	mov.w	r3, #0
 8007f6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007f70:	4659      	mov	r1, fp
 8007f72:	00cb      	lsls	r3, r1, #3
 8007f74:	4651      	mov	r1, sl
 8007f76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f7a:	4651      	mov	r1, sl
 8007f7c:	00ca      	lsls	r2, r1, #3
 8007f7e:	4610      	mov	r0, r2
 8007f80:	4619      	mov	r1, r3
 8007f82:	4603      	mov	r3, r0
 8007f84:	4642      	mov	r2, r8
 8007f86:	189b      	adds	r3, r3, r2
 8007f88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f8a:	464b      	mov	r3, r9
 8007f8c:	460a      	mov	r2, r1
 8007f8e:	eb42 0303 	adc.w	r3, r2, r3
 8007f92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f9e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007fa0:	f04f 0200 	mov.w	r2, #0
 8007fa4:	f04f 0300 	mov.w	r3, #0
 8007fa8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007fac:	4649      	mov	r1, r9
 8007fae:	008b      	lsls	r3, r1, #2
 8007fb0:	4641      	mov	r1, r8
 8007fb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fb6:	4641      	mov	r1, r8
 8007fb8:	008a      	lsls	r2, r1, #2
 8007fba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007fbe:	f7f8 fe13 	bl	8000be8 <__aeabi_uldivmod>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8007ffc <UART_SetConfig+0x4e4>)
 8007fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8007fcc:	095b      	lsrs	r3, r3, #5
 8007fce:	2164      	movs	r1, #100	@ 0x64
 8007fd0:	fb01 f303 	mul.w	r3, r1, r3
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	011b      	lsls	r3, r3, #4
 8007fd8:	3332      	adds	r3, #50	@ 0x32
 8007fda:	4a08      	ldr	r2, [pc, #32]	@ (8007ffc <UART_SetConfig+0x4e4>)
 8007fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8007fe0:	095b      	lsrs	r3, r3, #5
 8007fe2:	f003 020f 	and.w	r2, r3, #15
 8007fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4422      	add	r2, r4
 8007fee:	609a      	str	r2, [r3, #8]
}
 8007ff0:	bf00      	nop
 8007ff2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ffc:	51eb851f 	.word	0x51eb851f

08008000 <__cvt>:
 8008000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008004:	ec57 6b10 	vmov	r6, r7, d0
 8008008:	2f00      	cmp	r7, #0
 800800a:	460c      	mov	r4, r1
 800800c:	4619      	mov	r1, r3
 800800e:	463b      	mov	r3, r7
 8008010:	bfbb      	ittet	lt
 8008012:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008016:	461f      	movlt	r7, r3
 8008018:	2300      	movge	r3, #0
 800801a:	232d      	movlt	r3, #45	@ 0x2d
 800801c:	700b      	strb	r3, [r1, #0]
 800801e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008020:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008024:	4691      	mov	r9, r2
 8008026:	f023 0820 	bic.w	r8, r3, #32
 800802a:	bfbc      	itt	lt
 800802c:	4632      	movlt	r2, r6
 800802e:	4616      	movlt	r6, r2
 8008030:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008034:	d005      	beq.n	8008042 <__cvt+0x42>
 8008036:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800803a:	d100      	bne.n	800803e <__cvt+0x3e>
 800803c:	3401      	adds	r4, #1
 800803e:	2102      	movs	r1, #2
 8008040:	e000      	b.n	8008044 <__cvt+0x44>
 8008042:	2103      	movs	r1, #3
 8008044:	ab03      	add	r3, sp, #12
 8008046:	9301      	str	r3, [sp, #4]
 8008048:	ab02      	add	r3, sp, #8
 800804a:	9300      	str	r3, [sp, #0]
 800804c:	ec47 6b10 	vmov	d0, r6, r7
 8008050:	4653      	mov	r3, sl
 8008052:	4622      	mov	r2, r4
 8008054:	f000 fe8c 	bl	8008d70 <_dtoa_r>
 8008058:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800805c:	4605      	mov	r5, r0
 800805e:	d119      	bne.n	8008094 <__cvt+0x94>
 8008060:	f019 0f01 	tst.w	r9, #1
 8008064:	d00e      	beq.n	8008084 <__cvt+0x84>
 8008066:	eb00 0904 	add.w	r9, r0, r4
 800806a:	2200      	movs	r2, #0
 800806c:	2300      	movs	r3, #0
 800806e:	4630      	mov	r0, r6
 8008070:	4639      	mov	r1, r7
 8008072:	f7f8 fd49 	bl	8000b08 <__aeabi_dcmpeq>
 8008076:	b108      	cbz	r0, 800807c <__cvt+0x7c>
 8008078:	f8cd 900c 	str.w	r9, [sp, #12]
 800807c:	2230      	movs	r2, #48	@ 0x30
 800807e:	9b03      	ldr	r3, [sp, #12]
 8008080:	454b      	cmp	r3, r9
 8008082:	d31e      	bcc.n	80080c2 <__cvt+0xc2>
 8008084:	9b03      	ldr	r3, [sp, #12]
 8008086:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008088:	1b5b      	subs	r3, r3, r5
 800808a:	4628      	mov	r0, r5
 800808c:	6013      	str	r3, [r2, #0]
 800808e:	b004      	add	sp, #16
 8008090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008094:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008098:	eb00 0904 	add.w	r9, r0, r4
 800809c:	d1e5      	bne.n	800806a <__cvt+0x6a>
 800809e:	7803      	ldrb	r3, [r0, #0]
 80080a0:	2b30      	cmp	r3, #48	@ 0x30
 80080a2:	d10a      	bne.n	80080ba <__cvt+0xba>
 80080a4:	2200      	movs	r2, #0
 80080a6:	2300      	movs	r3, #0
 80080a8:	4630      	mov	r0, r6
 80080aa:	4639      	mov	r1, r7
 80080ac:	f7f8 fd2c 	bl	8000b08 <__aeabi_dcmpeq>
 80080b0:	b918      	cbnz	r0, 80080ba <__cvt+0xba>
 80080b2:	f1c4 0401 	rsb	r4, r4, #1
 80080b6:	f8ca 4000 	str.w	r4, [sl]
 80080ba:	f8da 3000 	ldr.w	r3, [sl]
 80080be:	4499      	add	r9, r3
 80080c0:	e7d3      	b.n	800806a <__cvt+0x6a>
 80080c2:	1c59      	adds	r1, r3, #1
 80080c4:	9103      	str	r1, [sp, #12]
 80080c6:	701a      	strb	r2, [r3, #0]
 80080c8:	e7d9      	b.n	800807e <__cvt+0x7e>

080080ca <__exponent>:
 80080ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080cc:	2900      	cmp	r1, #0
 80080ce:	bfba      	itte	lt
 80080d0:	4249      	neglt	r1, r1
 80080d2:	232d      	movlt	r3, #45	@ 0x2d
 80080d4:	232b      	movge	r3, #43	@ 0x2b
 80080d6:	2909      	cmp	r1, #9
 80080d8:	7002      	strb	r2, [r0, #0]
 80080da:	7043      	strb	r3, [r0, #1]
 80080dc:	dd29      	ble.n	8008132 <__exponent+0x68>
 80080de:	f10d 0307 	add.w	r3, sp, #7
 80080e2:	461d      	mov	r5, r3
 80080e4:	270a      	movs	r7, #10
 80080e6:	461a      	mov	r2, r3
 80080e8:	fbb1 f6f7 	udiv	r6, r1, r7
 80080ec:	fb07 1416 	mls	r4, r7, r6, r1
 80080f0:	3430      	adds	r4, #48	@ 0x30
 80080f2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80080f6:	460c      	mov	r4, r1
 80080f8:	2c63      	cmp	r4, #99	@ 0x63
 80080fa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80080fe:	4631      	mov	r1, r6
 8008100:	dcf1      	bgt.n	80080e6 <__exponent+0x1c>
 8008102:	3130      	adds	r1, #48	@ 0x30
 8008104:	1e94      	subs	r4, r2, #2
 8008106:	f803 1c01 	strb.w	r1, [r3, #-1]
 800810a:	1c41      	adds	r1, r0, #1
 800810c:	4623      	mov	r3, r4
 800810e:	42ab      	cmp	r3, r5
 8008110:	d30a      	bcc.n	8008128 <__exponent+0x5e>
 8008112:	f10d 0309 	add.w	r3, sp, #9
 8008116:	1a9b      	subs	r3, r3, r2
 8008118:	42ac      	cmp	r4, r5
 800811a:	bf88      	it	hi
 800811c:	2300      	movhi	r3, #0
 800811e:	3302      	adds	r3, #2
 8008120:	4403      	add	r3, r0
 8008122:	1a18      	subs	r0, r3, r0
 8008124:	b003      	add	sp, #12
 8008126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008128:	f813 6b01 	ldrb.w	r6, [r3], #1
 800812c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008130:	e7ed      	b.n	800810e <__exponent+0x44>
 8008132:	2330      	movs	r3, #48	@ 0x30
 8008134:	3130      	adds	r1, #48	@ 0x30
 8008136:	7083      	strb	r3, [r0, #2]
 8008138:	70c1      	strb	r1, [r0, #3]
 800813a:	1d03      	adds	r3, r0, #4
 800813c:	e7f1      	b.n	8008122 <__exponent+0x58>
	...

08008140 <_printf_float>:
 8008140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008144:	b08d      	sub	sp, #52	@ 0x34
 8008146:	460c      	mov	r4, r1
 8008148:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800814c:	4616      	mov	r6, r2
 800814e:	461f      	mov	r7, r3
 8008150:	4605      	mov	r5, r0
 8008152:	f000 fcff 	bl	8008b54 <_localeconv_r>
 8008156:	6803      	ldr	r3, [r0, #0]
 8008158:	9304      	str	r3, [sp, #16]
 800815a:	4618      	mov	r0, r3
 800815c:	f7f8 f8a8 	bl	80002b0 <strlen>
 8008160:	2300      	movs	r3, #0
 8008162:	930a      	str	r3, [sp, #40]	@ 0x28
 8008164:	f8d8 3000 	ldr.w	r3, [r8]
 8008168:	9005      	str	r0, [sp, #20]
 800816a:	3307      	adds	r3, #7
 800816c:	f023 0307 	bic.w	r3, r3, #7
 8008170:	f103 0208 	add.w	r2, r3, #8
 8008174:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008178:	f8d4 b000 	ldr.w	fp, [r4]
 800817c:	f8c8 2000 	str.w	r2, [r8]
 8008180:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008184:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008188:	9307      	str	r3, [sp, #28]
 800818a:	f8cd 8018 	str.w	r8, [sp, #24]
 800818e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008192:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008196:	4b9c      	ldr	r3, [pc, #624]	@ (8008408 <_printf_float+0x2c8>)
 8008198:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800819c:	f7f8 fce6 	bl	8000b6c <__aeabi_dcmpun>
 80081a0:	bb70      	cbnz	r0, 8008200 <_printf_float+0xc0>
 80081a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80081a6:	4b98      	ldr	r3, [pc, #608]	@ (8008408 <_printf_float+0x2c8>)
 80081a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80081ac:	f7f8 fcc0 	bl	8000b30 <__aeabi_dcmple>
 80081b0:	bb30      	cbnz	r0, 8008200 <_printf_float+0xc0>
 80081b2:	2200      	movs	r2, #0
 80081b4:	2300      	movs	r3, #0
 80081b6:	4640      	mov	r0, r8
 80081b8:	4649      	mov	r1, r9
 80081ba:	f7f8 fcaf 	bl	8000b1c <__aeabi_dcmplt>
 80081be:	b110      	cbz	r0, 80081c6 <_printf_float+0x86>
 80081c0:	232d      	movs	r3, #45	@ 0x2d
 80081c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081c6:	4a91      	ldr	r2, [pc, #580]	@ (800840c <_printf_float+0x2cc>)
 80081c8:	4b91      	ldr	r3, [pc, #580]	@ (8008410 <_printf_float+0x2d0>)
 80081ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80081ce:	bf94      	ite	ls
 80081d0:	4690      	movls	r8, r2
 80081d2:	4698      	movhi	r8, r3
 80081d4:	2303      	movs	r3, #3
 80081d6:	6123      	str	r3, [r4, #16]
 80081d8:	f02b 0304 	bic.w	r3, fp, #4
 80081dc:	6023      	str	r3, [r4, #0]
 80081de:	f04f 0900 	mov.w	r9, #0
 80081e2:	9700      	str	r7, [sp, #0]
 80081e4:	4633      	mov	r3, r6
 80081e6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80081e8:	4621      	mov	r1, r4
 80081ea:	4628      	mov	r0, r5
 80081ec:	f000 f9d2 	bl	8008594 <_printf_common>
 80081f0:	3001      	adds	r0, #1
 80081f2:	f040 808d 	bne.w	8008310 <_printf_float+0x1d0>
 80081f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081fa:	b00d      	add	sp, #52	@ 0x34
 80081fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008200:	4642      	mov	r2, r8
 8008202:	464b      	mov	r3, r9
 8008204:	4640      	mov	r0, r8
 8008206:	4649      	mov	r1, r9
 8008208:	f7f8 fcb0 	bl	8000b6c <__aeabi_dcmpun>
 800820c:	b140      	cbz	r0, 8008220 <_printf_float+0xe0>
 800820e:	464b      	mov	r3, r9
 8008210:	2b00      	cmp	r3, #0
 8008212:	bfbc      	itt	lt
 8008214:	232d      	movlt	r3, #45	@ 0x2d
 8008216:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800821a:	4a7e      	ldr	r2, [pc, #504]	@ (8008414 <_printf_float+0x2d4>)
 800821c:	4b7e      	ldr	r3, [pc, #504]	@ (8008418 <_printf_float+0x2d8>)
 800821e:	e7d4      	b.n	80081ca <_printf_float+0x8a>
 8008220:	6863      	ldr	r3, [r4, #4]
 8008222:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008226:	9206      	str	r2, [sp, #24]
 8008228:	1c5a      	adds	r2, r3, #1
 800822a:	d13b      	bne.n	80082a4 <_printf_float+0x164>
 800822c:	2306      	movs	r3, #6
 800822e:	6063      	str	r3, [r4, #4]
 8008230:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008234:	2300      	movs	r3, #0
 8008236:	6022      	str	r2, [r4, #0]
 8008238:	9303      	str	r3, [sp, #12]
 800823a:	ab0a      	add	r3, sp, #40	@ 0x28
 800823c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008240:	ab09      	add	r3, sp, #36	@ 0x24
 8008242:	9300      	str	r3, [sp, #0]
 8008244:	6861      	ldr	r1, [r4, #4]
 8008246:	ec49 8b10 	vmov	d0, r8, r9
 800824a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800824e:	4628      	mov	r0, r5
 8008250:	f7ff fed6 	bl	8008000 <__cvt>
 8008254:	9b06      	ldr	r3, [sp, #24]
 8008256:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008258:	2b47      	cmp	r3, #71	@ 0x47
 800825a:	4680      	mov	r8, r0
 800825c:	d129      	bne.n	80082b2 <_printf_float+0x172>
 800825e:	1cc8      	adds	r0, r1, #3
 8008260:	db02      	blt.n	8008268 <_printf_float+0x128>
 8008262:	6863      	ldr	r3, [r4, #4]
 8008264:	4299      	cmp	r1, r3
 8008266:	dd41      	ble.n	80082ec <_printf_float+0x1ac>
 8008268:	f1aa 0a02 	sub.w	sl, sl, #2
 800826c:	fa5f fa8a 	uxtb.w	sl, sl
 8008270:	3901      	subs	r1, #1
 8008272:	4652      	mov	r2, sl
 8008274:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008278:	9109      	str	r1, [sp, #36]	@ 0x24
 800827a:	f7ff ff26 	bl	80080ca <__exponent>
 800827e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008280:	1813      	adds	r3, r2, r0
 8008282:	2a01      	cmp	r2, #1
 8008284:	4681      	mov	r9, r0
 8008286:	6123      	str	r3, [r4, #16]
 8008288:	dc02      	bgt.n	8008290 <_printf_float+0x150>
 800828a:	6822      	ldr	r2, [r4, #0]
 800828c:	07d2      	lsls	r2, r2, #31
 800828e:	d501      	bpl.n	8008294 <_printf_float+0x154>
 8008290:	3301      	adds	r3, #1
 8008292:	6123      	str	r3, [r4, #16]
 8008294:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008298:	2b00      	cmp	r3, #0
 800829a:	d0a2      	beq.n	80081e2 <_printf_float+0xa2>
 800829c:	232d      	movs	r3, #45	@ 0x2d
 800829e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082a2:	e79e      	b.n	80081e2 <_printf_float+0xa2>
 80082a4:	9a06      	ldr	r2, [sp, #24]
 80082a6:	2a47      	cmp	r2, #71	@ 0x47
 80082a8:	d1c2      	bne.n	8008230 <_printf_float+0xf0>
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1c0      	bne.n	8008230 <_printf_float+0xf0>
 80082ae:	2301      	movs	r3, #1
 80082b0:	e7bd      	b.n	800822e <_printf_float+0xee>
 80082b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80082b6:	d9db      	bls.n	8008270 <_printf_float+0x130>
 80082b8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80082bc:	d118      	bne.n	80082f0 <_printf_float+0x1b0>
 80082be:	2900      	cmp	r1, #0
 80082c0:	6863      	ldr	r3, [r4, #4]
 80082c2:	dd0b      	ble.n	80082dc <_printf_float+0x19c>
 80082c4:	6121      	str	r1, [r4, #16]
 80082c6:	b913      	cbnz	r3, 80082ce <_printf_float+0x18e>
 80082c8:	6822      	ldr	r2, [r4, #0]
 80082ca:	07d0      	lsls	r0, r2, #31
 80082cc:	d502      	bpl.n	80082d4 <_printf_float+0x194>
 80082ce:	3301      	adds	r3, #1
 80082d0:	440b      	add	r3, r1
 80082d2:	6123      	str	r3, [r4, #16]
 80082d4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80082d6:	f04f 0900 	mov.w	r9, #0
 80082da:	e7db      	b.n	8008294 <_printf_float+0x154>
 80082dc:	b913      	cbnz	r3, 80082e4 <_printf_float+0x1a4>
 80082de:	6822      	ldr	r2, [r4, #0]
 80082e0:	07d2      	lsls	r2, r2, #31
 80082e2:	d501      	bpl.n	80082e8 <_printf_float+0x1a8>
 80082e4:	3302      	adds	r3, #2
 80082e6:	e7f4      	b.n	80082d2 <_printf_float+0x192>
 80082e8:	2301      	movs	r3, #1
 80082ea:	e7f2      	b.n	80082d2 <_printf_float+0x192>
 80082ec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80082f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082f2:	4299      	cmp	r1, r3
 80082f4:	db05      	blt.n	8008302 <_printf_float+0x1c2>
 80082f6:	6823      	ldr	r3, [r4, #0]
 80082f8:	6121      	str	r1, [r4, #16]
 80082fa:	07d8      	lsls	r0, r3, #31
 80082fc:	d5ea      	bpl.n	80082d4 <_printf_float+0x194>
 80082fe:	1c4b      	adds	r3, r1, #1
 8008300:	e7e7      	b.n	80082d2 <_printf_float+0x192>
 8008302:	2900      	cmp	r1, #0
 8008304:	bfd4      	ite	le
 8008306:	f1c1 0202 	rsble	r2, r1, #2
 800830a:	2201      	movgt	r2, #1
 800830c:	4413      	add	r3, r2
 800830e:	e7e0      	b.n	80082d2 <_printf_float+0x192>
 8008310:	6823      	ldr	r3, [r4, #0]
 8008312:	055a      	lsls	r2, r3, #21
 8008314:	d407      	bmi.n	8008326 <_printf_float+0x1e6>
 8008316:	6923      	ldr	r3, [r4, #16]
 8008318:	4642      	mov	r2, r8
 800831a:	4631      	mov	r1, r6
 800831c:	4628      	mov	r0, r5
 800831e:	47b8      	blx	r7
 8008320:	3001      	adds	r0, #1
 8008322:	d12b      	bne.n	800837c <_printf_float+0x23c>
 8008324:	e767      	b.n	80081f6 <_printf_float+0xb6>
 8008326:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800832a:	f240 80dd 	bls.w	80084e8 <_printf_float+0x3a8>
 800832e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008332:	2200      	movs	r2, #0
 8008334:	2300      	movs	r3, #0
 8008336:	f7f8 fbe7 	bl	8000b08 <__aeabi_dcmpeq>
 800833a:	2800      	cmp	r0, #0
 800833c:	d033      	beq.n	80083a6 <_printf_float+0x266>
 800833e:	4a37      	ldr	r2, [pc, #220]	@ (800841c <_printf_float+0x2dc>)
 8008340:	2301      	movs	r3, #1
 8008342:	4631      	mov	r1, r6
 8008344:	4628      	mov	r0, r5
 8008346:	47b8      	blx	r7
 8008348:	3001      	adds	r0, #1
 800834a:	f43f af54 	beq.w	80081f6 <_printf_float+0xb6>
 800834e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008352:	4543      	cmp	r3, r8
 8008354:	db02      	blt.n	800835c <_printf_float+0x21c>
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	07d8      	lsls	r0, r3, #31
 800835a:	d50f      	bpl.n	800837c <_printf_float+0x23c>
 800835c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008360:	4631      	mov	r1, r6
 8008362:	4628      	mov	r0, r5
 8008364:	47b8      	blx	r7
 8008366:	3001      	adds	r0, #1
 8008368:	f43f af45 	beq.w	80081f6 <_printf_float+0xb6>
 800836c:	f04f 0900 	mov.w	r9, #0
 8008370:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008374:	f104 0a1a 	add.w	sl, r4, #26
 8008378:	45c8      	cmp	r8, r9
 800837a:	dc09      	bgt.n	8008390 <_printf_float+0x250>
 800837c:	6823      	ldr	r3, [r4, #0]
 800837e:	079b      	lsls	r3, r3, #30
 8008380:	f100 8103 	bmi.w	800858a <_printf_float+0x44a>
 8008384:	68e0      	ldr	r0, [r4, #12]
 8008386:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008388:	4298      	cmp	r0, r3
 800838a:	bfb8      	it	lt
 800838c:	4618      	movlt	r0, r3
 800838e:	e734      	b.n	80081fa <_printf_float+0xba>
 8008390:	2301      	movs	r3, #1
 8008392:	4652      	mov	r2, sl
 8008394:	4631      	mov	r1, r6
 8008396:	4628      	mov	r0, r5
 8008398:	47b8      	blx	r7
 800839a:	3001      	adds	r0, #1
 800839c:	f43f af2b 	beq.w	80081f6 <_printf_float+0xb6>
 80083a0:	f109 0901 	add.w	r9, r9, #1
 80083a4:	e7e8      	b.n	8008378 <_printf_float+0x238>
 80083a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	dc39      	bgt.n	8008420 <_printf_float+0x2e0>
 80083ac:	4a1b      	ldr	r2, [pc, #108]	@ (800841c <_printf_float+0x2dc>)
 80083ae:	2301      	movs	r3, #1
 80083b0:	4631      	mov	r1, r6
 80083b2:	4628      	mov	r0, r5
 80083b4:	47b8      	blx	r7
 80083b6:	3001      	adds	r0, #1
 80083b8:	f43f af1d 	beq.w	80081f6 <_printf_float+0xb6>
 80083bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80083c0:	ea59 0303 	orrs.w	r3, r9, r3
 80083c4:	d102      	bne.n	80083cc <_printf_float+0x28c>
 80083c6:	6823      	ldr	r3, [r4, #0]
 80083c8:	07d9      	lsls	r1, r3, #31
 80083ca:	d5d7      	bpl.n	800837c <_printf_float+0x23c>
 80083cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083d0:	4631      	mov	r1, r6
 80083d2:	4628      	mov	r0, r5
 80083d4:	47b8      	blx	r7
 80083d6:	3001      	adds	r0, #1
 80083d8:	f43f af0d 	beq.w	80081f6 <_printf_float+0xb6>
 80083dc:	f04f 0a00 	mov.w	sl, #0
 80083e0:	f104 0b1a 	add.w	fp, r4, #26
 80083e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083e6:	425b      	negs	r3, r3
 80083e8:	4553      	cmp	r3, sl
 80083ea:	dc01      	bgt.n	80083f0 <_printf_float+0x2b0>
 80083ec:	464b      	mov	r3, r9
 80083ee:	e793      	b.n	8008318 <_printf_float+0x1d8>
 80083f0:	2301      	movs	r3, #1
 80083f2:	465a      	mov	r2, fp
 80083f4:	4631      	mov	r1, r6
 80083f6:	4628      	mov	r0, r5
 80083f8:	47b8      	blx	r7
 80083fa:	3001      	adds	r0, #1
 80083fc:	f43f aefb 	beq.w	80081f6 <_printf_float+0xb6>
 8008400:	f10a 0a01 	add.w	sl, sl, #1
 8008404:	e7ee      	b.n	80083e4 <_printf_float+0x2a4>
 8008406:	bf00      	nop
 8008408:	7fefffff 	.word	0x7fefffff
 800840c:	0800afb1 	.word	0x0800afb1
 8008410:	0800afb5 	.word	0x0800afb5
 8008414:	0800afb9 	.word	0x0800afb9
 8008418:	0800afbd 	.word	0x0800afbd
 800841c:	0800afc1 	.word	0x0800afc1
 8008420:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008422:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008426:	4553      	cmp	r3, sl
 8008428:	bfa8      	it	ge
 800842a:	4653      	movge	r3, sl
 800842c:	2b00      	cmp	r3, #0
 800842e:	4699      	mov	r9, r3
 8008430:	dc36      	bgt.n	80084a0 <_printf_float+0x360>
 8008432:	f04f 0b00 	mov.w	fp, #0
 8008436:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800843a:	f104 021a 	add.w	r2, r4, #26
 800843e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008440:	9306      	str	r3, [sp, #24]
 8008442:	eba3 0309 	sub.w	r3, r3, r9
 8008446:	455b      	cmp	r3, fp
 8008448:	dc31      	bgt.n	80084ae <_printf_float+0x36e>
 800844a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800844c:	459a      	cmp	sl, r3
 800844e:	dc3a      	bgt.n	80084c6 <_printf_float+0x386>
 8008450:	6823      	ldr	r3, [r4, #0]
 8008452:	07da      	lsls	r2, r3, #31
 8008454:	d437      	bmi.n	80084c6 <_printf_float+0x386>
 8008456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008458:	ebaa 0903 	sub.w	r9, sl, r3
 800845c:	9b06      	ldr	r3, [sp, #24]
 800845e:	ebaa 0303 	sub.w	r3, sl, r3
 8008462:	4599      	cmp	r9, r3
 8008464:	bfa8      	it	ge
 8008466:	4699      	movge	r9, r3
 8008468:	f1b9 0f00 	cmp.w	r9, #0
 800846c:	dc33      	bgt.n	80084d6 <_printf_float+0x396>
 800846e:	f04f 0800 	mov.w	r8, #0
 8008472:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008476:	f104 0b1a 	add.w	fp, r4, #26
 800847a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800847c:	ebaa 0303 	sub.w	r3, sl, r3
 8008480:	eba3 0309 	sub.w	r3, r3, r9
 8008484:	4543      	cmp	r3, r8
 8008486:	f77f af79 	ble.w	800837c <_printf_float+0x23c>
 800848a:	2301      	movs	r3, #1
 800848c:	465a      	mov	r2, fp
 800848e:	4631      	mov	r1, r6
 8008490:	4628      	mov	r0, r5
 8008492:	47b8      	blx	r7
 8008494:	3001      	adds	r0, #1
 8008496:	f43f aeae 	beq.w	80081f6 <_printf_float+0xb6>
 800849a:	f108 0801 	add.w	r8, r8, #1
 800849e:	e7ec      	b.n	800847a <_printf_float+0x33a>
 80084a0:	4642      	mov	r2, r8
 80084a2:	4631      	mov	r1, r6
 80084a4:	4628      	mov	r0, r5
 80084a6:	47b8      	blx	r7
 80084a8:	3001      	adds	r0, #1
 80084aa:	d1c2      	bne.n	8008432 <_printf_float+0x2f2>
 80084ac:	e6a3      	b.n	80081f6 <_printf_float+0xb6>
 80084ae:	2301      	movs	r3, #1
 80084b0:	4631      	mov	r1, r6
 80084b2:	4628      	mov	r0, r5
 80084b4:	9206      	str	r2, [sp, #24]
 80084b6:	47b8      	blx	r7
 80084b8:	3001      	adds	r0, #1
 80084ba:	f43f ae9c 	beq.w	80081f6 <_printf_float+0xb6>
 80084be:	9a06      	ldr	r2, [sp, #24]
 80084c0:	f10b 0b01 	add.w	fp, fp, #1
 80084c4:	e7bb      	b.n	800843e <_printf_float+0x2fe>
 80084c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084ca:	4631      	mov	r1, r6
 80084cc:	4628      	mov	r0, r5
 80084ce:	47b8      	blx	r7
 80084d0:	3001      	adds	r0, #1
 80084d2:	d1c0      	bne.n	8008456 <_printf_float+0x316>
 80084d4:	e68f      	b.n	80081f6 <_printf_float+0xb6>
 80084d6:	9a06      	ldr	r2, [sp, #24]
 80084d8:	464b      	mov	r3, r9
 80084da:	4442      	add	r2, r8
 80084dc:	4631      	mov	r1, r6
 80084de:	4628      	mov	r0, r5
 80084e0:	47b8      	blx	r7
 80084e2:	3001      	adds	r0, #1
 80084e4:	d1c3      	bne.n	800846e <_printf_float+0x32e>
 80084e6:	e686      	b.n	80081f6 <_printf_float+0xb6>
 80084e8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80084ec:	f1ba 0f01 	cmp.w	sl, #1
 80084f0:	dc01      	bgt.n	80084f6 <_printf_float+0x3b6>
 80084f2:	07db      	lsls	r3, r3, #31
 80084f4:	d536      	bpl.n	8008564 <_printf_float+0x424>
 80084f6:	2301      	movs	r3, #1
 80084f8:	4642      	mov	r2, r8
 80084fa:	4631      	mov	r1, r6
 80084fc:	4628      	mov	r0, r5
 80084fe:	47b8      	blx	r7
 8008500:	3001      	adds	r0, #1
 8008502:	f43f ae78 	beq.w	80081f6 <_printf_float+0xb6>
 8008506:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800850a:	4631      	mov	r1, r6
 800850c:	4628      	mov	r0, r5
 800850e:	47b8      	blx	r7
 8008510:	3001      	adds	r0, #1
 8008512:	f43f ae70 	beq.w	80081f6 <_printf_float+0xb6>
 8008516:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800851a:	2200      	movs	r2, #0
 800851c:	2300      	movs	r3, #0
 800851e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008522:	f7f8 faf1 	bl	8000b08 <__aeabi_dcmpeq>
 8008526:	b9c0      	cbnz	r0, 800855a <_printf_float+0x41a>
 8008528:	4653      	mov	r3, sl
 800852a:	f108 0201 	add.w	r2, r8, #1
 800852e:	4631      	mov	r1, r6
 8008530:	4628      	mov	r0, r5
 8008532:	47b8      	blx	r7
 8008534:	3001      	adds	r0, #1
 8008536:	d10c      	bne.n	8008552 <_printf_float+0x412>
 8008538:	e65d      	b.n	80081f6 <_printf_float+0xb6>
 800853a:	2301      	movs	r3, #1
 800853c:	465a      	mov	r2, fp
 800853e:	4631      	mov	r1, r6
 8008540:	4628      	mov	r0, r5
 8008542:	47b8      	blx	r7
 8008544:	3001      	adds	r0, #1
 8008546:	f43f ae56 	beq.w	80081f6 <_printf_float+0xb6>
 800854a:	f108 0801 	add.w	r8, r8, #1
 800854e:	45d0      	cmp	r8, sl
 8008550:	dbf3      	blt.n	800853a <_printf_float+0x3fa>
 8008552:	464b      	mov	r3, r9
 8008554:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008558:	e6df      	b.n	800831a <_printf_float+0x1da>
 800855a:	f04f 0800 	mov.w	r8, #0
 800855e:	f104 0b1a 	add.w	fp, r4, #26
 8008562:	e7f4      	b.n	800854e <_printf_float+0x40e>
 8008564:	2301      	movs	r3, #1
 8008566:	4642      	mov	r2, r8
 8008568:	e7e1      	b.n	800852e <_printf_float+0x3ee>
 800856a:	2301      	movs	r3, #1
 800856c:	464a      	mov	r2, r9
 800856e:	4631      	mov	r1, r6
 8008570:	4628      	mov	r0, r5
 8008572:	47b8      	blx	r7
 8008574:	3001      	adds	r0, #1
 8008576:	f43f ae3e 	beq.w	80081f6 <_printf_float+0xb6>
 800857a:	f108 0801 	add.w	r8, r8, #1
 800857e:	68e3      	ldr	r3, [r4, #12]
 8008580:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008582:	1a5b      	subs	r3, r3, r1
 8008584:	4543      	cmp	r3, r8
 8008586:	dcf0      	bgt.n	800856a <_printf_float+0x42a>
 8008588:	e6fc      	b.n	8008384 <_printf_float+0x244>
 800858a:	f04f 0800 	mov.w	r8, #0
 800858e:	f104 0919 	add.w	r9, r4, #25
 8008592:	e7f4      	b.n	800857e <_printf_float+0x43e>

08008594 <_printf_common>:
 8008594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008598:	4616      	mov	r6, r2
 800859a:	4698      	mov	r8, r3
 800859c:	688a      	ldr	r2, [r1, #8]
 800859e:	690b      	ldr	r3, [r1, #16]
 80085a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80085a4:	4293      	cmp	r3, r2
 80085a6:	bfb8      	it	lt
 80085a8:	4613      	movlt	r3, r2
 80085aa:	6033      	str	r3, [r6, #0]
 80085ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80085b0:	4607      	mov	r7, r0
 80085b2:	460c      	mov	r4, r1
 80085b4:	b10a      	cbz	r2, 80085ba <_printf_common+0x26>
 80085b6:	3301      	adds	r3, #1
 80085b8:	6033      	str	r3, [r6, #0]
 80085ba:	6823      	ldr	r3, [r4, #0]
 80085bc:	0699      	lsls	r1, r3, #26
 80085be:	bf42      	ittt	mi
 80085c0:	6833      	ldrmi	r3, [r6, #0]
 80085c2:	3302      	addmi	r3, #2
 80085c4:	6033      	strmi	r3, [r6, #0]
 80085c6:	6825      	ldr	r5, [r4, #0]
 80085c8:	f015 0506 	ands.w	r5, r5, #6
 80085cc:	d106      	bne.n	80085dc <_printf_common+0x48>
 80085ce:	f104 0a19 	add.w	sl, r4, #25
 80085d2:	68e3      	ldr	r3, [r4, #12]
 80085d4:	6832      	ldr	r2, [r6, #0]
 80085d6:	1a9b      	subs	r3, r3, r2
 80085d8:	42ab      	cmp	r3, r5
 80085da:	dc26      	bgt.n	800862a <_printf_common+0x96>
 80085dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80085e0:	6822      	ldr	r2, [r4, #0]
 80085e2:	3b00      	subs	r3, #0
 80085e4:	bf18      	it	ne
 80085e6:	2301      	movne	r3, #1
 80085e8:	0692      	lsls	r2, r2, #26
 80085ea:	d42b      	bmi.n	8008644 <_printf_common+0xb0>
 80085ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80085f0:	4641      	mov	r1, r8
 80085f2:	4638      	mov	r0, r7
 80085f4:	47c8      	blx	r9
 80085f6:	3001      	adds	r0, #1
 80085f8:	d01e      	beq.n	8008638 <_printf_common+0xa4>
 80085fa:	6823      	ldr	r3, [r4, #0]
 80085fc:	6922      	ldr	r2, [r4, #16]
 80085fe:	f003 0306 	and.w	r3, r3, #6
 8008602:	2b04      	cmp	r3, #4
 8008604:	bf02      	ittt	eq
 8008606:	68e5      	ldreq	r5, [r4, #12]
 8008608:	6833      	ldreq	r3, [r6, #0]
 800860a:	1aed      	subeq	r5, r5, r3
 800860c:	68a3      	ldr	r3, [r4, #8]
 800860e:	bf0c      	ite	eq
 8008610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008614:	2500      	movne	r5, #0
 8008616:	4293      	cmp	r3, r2
 8008618:	bfc4      	itt	gt
 800861a:	1a9b      	subgt	r3, r3, r2
 800861c:	18ed      	addgt	r5, r5, r3
 800861e:	2600      	movs	r6, #0
 8008620:	341a      	adds	r4, #26
 8008622:	42b5      	cmp	r5, r6
 8008624:	d11a      	bne.n	800865c <_printf_common+0xc8>
 8008626:	2000      	movs	r0, #0
 8008628:	e008      	b.n	800863c <_printf_common+0xa8>
 800862a:	2301      	movs	r3, #1
 800862c:	4652      	mov	r2, sl
 800862e:	4641      	mov	r1, r8
 8008630:	4638      	mov	r0, r7
 8008632:	47c8      	blx	r9
 8008634:	3001      	adds	r0, #1
 8008636:	d103      	bne.n	8008640 <_printf_common+0xac>
 8008638:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800863c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008640:	3501      	adds	r5, #1
 8008642:	e7c6      	b.n	80085d2 <_printf_common+0x3e>
 8008644:	18e1      	adds	r1, r4, r3
 8008646:	1c5a      	adds	r2, r3, #1
 8008648:	2030      	movs	r0, #48	@ 0x30
 800864a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800864e:	4422      	add	r2, r4
 8008650:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008654:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008658:	3302      	adds	r3, #2
 800865a:	e7c7      	b.n	80085ec <_printf_common+0x58>
 800865c:	2301      	movs	r3, #1
 800865e:	4622      	mov	r2, r4
 8008660:	4641      	mov	r1, r8
 8008662:	4638      	mov	r0, r7
 8008664:	47c8      	blx	r9
 8008666:	3001      	adds	r0, #1
 8008668:	d0e6      	beq.n	8008638 <_printf_common+0xa4>
 800866a:	3601      	adds	r6, #1
 800866c:	e7d9      	b.n	8008622 <_printf_common+0x8e>
	...

08008670 <_printf_i>:
 8008670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008674:	7e0f      	ldrb	r7, [r1, #24]
 8008676:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008678:	2f78      	cmp	r7, #120	@ 0x78
 800867a:	4691      	mov	r9, r2
 800867c:	4680      	mov	r8, r0
 800867e:	460c      	mov	r4, r1
 8008680:	469a      	mov	sl, r3
 8008682:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008686:	d807      	bhi.n	8008698 <_printf_i+0x28>
 8008688:	2f62      	cmp	r7, #98	@ 0x62
 800868a:	d80a      	bhi.n	80086a2 <_printf_i+0x32>
 800868c:	2f00      	cmp	r7, #0
 800868e:	f000 80d2 	beq.w	8008836 <_printf_i+0x1c6>
 8008692:	2f58      	cmp	r7, #88	@ 0x58
 8008694:	f000 80b9 	beq.w	800880a <_printf_i+0x19a>
 8008698:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800869c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80086a0:	e03a      	b.n	8008718 <_printf_i+0xa8>
 80086a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80086a6:	2b15      	cmp	r3, #21
 80086a8:	d8f6      	bhi.n	8008698 <_printf_i+0x28>
 80086aa:	a101      	add	r1, pc, #4	@ (adr r1, 80086b0 <_printf_i+0x40>)
 80086ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086b0:	08008709 	.word	0x08008709
 80086b4:	0800871d 	.word	0x0800871d
 80086b8:	08008699 	.word	0x08008699
 80086bc:	08008699 	.word	0x08008699
 80086c0:	08008699 	.word	0x08008699
 80086c4:	08008699 	.word	0x08008699
 80086c8:	0800871d 	.word	0x0800871d
 80086cc:	08008699 	.word	0x08008699
 80086d0:	08008699 	.word	0x08008699
 80086d4:	08008699 	.word	0x08008699
 80086d8:	08008699 	.word	0x08008699
 80086dc:	0800881d 	.word	0x0800881d
 80086e0:	08008747 	.word	0x08008747
 80086e4:	080087d7 	.word	0x080087d7
 80086e8:	08008699 	.word	0x08008699
 80086ec:	08008699 	.word	0x08008699
 80086f0:	0800883f 	.word	0x0800883f
 80086f4:	08008699 	.word	0x08008699
 80086f8:	08008747 	.word	0x08008747
 80086fc:	08008699 	.word	0x08008699
 8008700:	08008699 	.word	0x08008699
 8008704:	080087df 	.word	0x080087df
 8008708:	6833      	ldr	r3, [r6, #0]
 800870a:	1d1a      	adds	r2, r3, #4
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	6032      	str	r2, [r6, #0]
 8008710:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008714:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008718:	2301      	movs	r3, #1
 800871a:	e09d      	b.n	8008858 <_printf_i+0x1e8>
 800871c:	6833      	ldr	r3, [r6, #0]
 800871e:	6820      	ldr	r0, [r4, #0]
 8008720:	1d19      	adds	r1, r3, #4
 8008722:	6031      	str	r1, [r6, #0]
 8008724:	0606      	lsls	r6, r0, #24
 8008726:	d501      	bpl.n	800872c <_printf_i+0xbc>
 8008728:	681d      	ldr	r5, [r3, #0]
 800872a:	e003      	b.n	8008734 <_printf_i+0xc4>
 800872c:	0645      	lsls	r5, r0, #25
 800872e:	d5fb      	bpl.n	8008728 <_printf_i+0xb8>
 8008730:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008734:	2d00      	cmp	r5, #0
 8008736:	da03      	bge.n	8008740 <_printf_i+0xd0>
 8008738:	232d      	movs	r3, #45	@ 0x2d
 800873a:	426d      	negs	r5, r5
 800873c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008740:	4859      	ldr	r0, [pc, #356]	@ (80088a8 <_printf_i+0x238>)
 8008742:	230a      	movs	r3, #10
 8008744:	e011      	b.n	800876a <_printf_i+0xfa>
 8008746:	6821      	ldr	r1, [r4, #0]
 8008748:	6833      	ldr	r3, [r6, #0]
 800874a:	0608      	lsls	r0, r1, #24
 800874c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008750:	d402      	bmi.n	8008758 <_printf_i+0xe8>
 8008752:	0649      	lsls	r1, r1, #25
 8008754:	bf48      	it	mi
 8008756:	b2ad      	uxthmi	r5, r5
 8008758:	2f6f      	cmp	r7, #111	@ 0x6f
 800875a:	4853      	ldr	r0, [pc, #332]	@ (80088a8 <_printf_i+0x238>)
 800875c:	6033      	str	r3, [r6, #0]
 800875e:	bf14      	ite	ne
 8008760:	230a      	movne	r3, #10
 8008762:	2308      	moveq	r3, #8
 8008764:	2100      	movs	r1, #0
 8008766:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800876a:	6866      	ldr	r6, [r4, #4]
 800876c:	60a6      	str	r6, [r4, #8]
 800876e:	2e00      	cmp	r6, #0
 8008770:	bfa2      	ittt	ge
 8008772:	6821      	ldrge	r1, [r4, #0]
 8008774:	f021 0104 	bicge.w	r1, r1, #4
 8008778:	6021      	strge	r1, [r4, #0]
 800877a:	b90d      	cbnz	r5, 8008780 <_printf_i+0x110>
 800877c:	2e00      	cmp	r6, #0
 800877e:	d04b      	beq.n	8008818 <_printf_i+0x1a8>
 8008780:	4616      	mov	r6, r2
 8008782:	fbb5 f1f3 	udiv	r1, r5, r3
 8008786:	fb03 5711 	mls	r7, r3, r1, r5
 800878a:	5dc7      	ldrb	r7, [r0, r7]
 800878c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008790:	462f      	mov	r7, r5
 8008792:	42bb      	cmp	r3, r7
 8008794:	460d      	mov	r5, r1
 8008796:	d9f4      	bls.n	8008782 <_printf_i+0x112>
 8008798:	2b08      	cmp	r3, #8
 800879a:	d10b      	bne.n	80087b4 <_printf_i+0x144>
 800879c:	6823      	ldr	r3, [r4, #0]
 800879e:	07df      	lsls	r7, r3, #31
 80087a0:	d508      	bpl.n	80087b4 <_printf_i+0x144>
 80087a2:	6923      	ldr	r3, [r4, #16]
 80087a4:	6861      	ldr	r1, [r4, #4]
 80087a6:	4299      	cmp	r1, r3
 80087a8:	bfde      	ittt	le
 80087aa:	2330      	movle	r3, #48	@ 0x30
 80087ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80087b0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80087b4:	1b92      	subs	r2, r2, r6
 80087b6:	6122      	str	r2, [r4, #16]
 80087b8:	f8cd a000 	str.w	sl, [sp]
 80087bc:	464b      	mov	r3, r9
 80087be:	aa03      	add	r2, sp, #12
 80087c0:	4621      	mov	r1, r4
 80087c2:	4640      	mov	r0, r8
 80087c4:	f7ff fee6 	bl	8008594 <_printf_common>
 80087c8:	3001      	adds	r0, #1
 80087ca:	d14a      	bne.n	8008862 <_printf_i+0x1f2>
 80087cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087d0:	b004      	add	sp, #16
 80087d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087d6:	6823      	ldr	r3, [r4, #0]
 80087d8:	f043 0320 	orr.w	r3, r3, #32
 80087dc:	6023      	str	r3, [r4, #0]
 80087de:	4833      	ldr	r0, [pc, #204]	@ (80088ac <_printf_i+0x23c>)
 80087e0:	2778      	movs	r7, #120	@ 0x78
 80087e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80087e6:	6823      	ldr	r3, [r4, #0]
 80087e8:	6831      	ldr	r1, [r6, #0]
 80087ea:	061f      	lsls	r7, r3, #24
 80087ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80087f0:	d402      	bmi.n	80087f8 <_printf_i+0x188>
 80087f2:	065f      	lsls	r7, r3, #25
 80087f4:	bf48      	it	mi
 80087f6:	b2ad      	uxthmi	r5, r5
 80087f8:	6031      	str	r1, [r6, #0]
 80087fa:	07d9      	lsls	r1, r3, #31
 80087fc:	bf44      	itt	mi
 80087fe:	f043 0320 	orrmi.w	r3, r3, #32
 8008802:	6023      	strmi	r3, [r4, #0]
 8008804:	b11d      	cbz	r5, 800880e <_printf_i+0x19e>
 8008806:	2310      	movs	r3, #16
 8008808:	e7ac      	b.n	8008764 <_printf_i+0xf4>
 800880a:	4827      	ldr	r0, [pc, #156]	@ (80088a8 <_printf_i+0x238>)
 800880c:	e7e9      	b.n	80087e2 <_printf_i+0x172>
 800880e:	6823      	ldr	r3, [r4, #0]
 8008810:	f023 0320 	bic.w	r3, r3, #32
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	e7f6      	b.n	8008806 <_printf_i+0x196>
 8008818:	4616      	mov	r6, r2
 800881a:	e7bd      	b.n	8008798 <_printf_i+0x128>
 800881c:	6833      	ldr	r3, [r6, #0]
 800881e:	6825      	ldr	r5, [r4, #0]
 8008820:	6961      	ldr	r1, [r4, #20]
 8008822:	1d18      	adds	r0, r3, #4
 8008824:	6030      	str	r0, [r6, #0]
 8008826:	062e      	lsls	r6, r5, #24
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	d501      	bpl.n	8008830 <_printf_i+0x1c0>
 800882c:	6019      	str	r1, [r3, #0]
 800882e:	e002      	b.n	8008836 <_printf_i+0x1c6>
 8008830:	0668      	lsls	r0, r5, #25
 8008832:	d5fb      	bpl.n	800882c <_printf_i+0x1bc>
 8008834:	8019      	strh	r1, [r3, #0]
 8008836:	2300      	movs	r3, #0
 8008838:	6123      	str	r3, [r4, #16]
 800883a:	4616      	mov	r6, r2
 800883c:	e7bc      	b.n	80087b8 <_printf_i+0x148>
 800883e:	6833      	ldr	r3, [r6, #0]
 8008840:	1d1a      	adds	r2, r3, #4
 8008842:	6032      	str	r2, [r6, #0]
 8008844:	681e      	ldr	r6, [r3, #0]
 8008846:	6862      	ldr	r2, [r4, #4]
 8008848:	2100      	movs	r1, #0
 800884a:	4630      	mov	r0, r6
 800884c:	f7f7 fce0 	bl	8000210 <memchr>
 8008850:	b108      	cbz	r0, 8008856 <_printf_i+0x1e6>
 8008852:	1b80      	subs	r0, r0, r6
 8008854:	6060      	str	r0, [r4, #4]
 8008856:	6863      	ldr	r3, [r4, #4]
 8008858:	6123      	str	r3, [r4, #16]
 800885a:	2300      	movs	r3, #0
 800885c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008860:	e7aa      	b.n	80087b8 <_printf_i+0x148>
 8008862:	6923      	ldr	r3, [r4, #16]
 8008864:	4632      	mov	r2, r6
 8008866:	4649      	mov	r1, r9
 8008868:	4640      	mov	r0, r8
 800886a:	47d0      	blx	sl
 800886c:	3001      	adds	r0, #1
 800886e:	d0ad      	beq.n	80087cc <_printf_i+0x15c>
 8008870:	6823      	ldr	r3, [r4, #0]
 8008872:	079b      	lsls	r3, r3, #30
 8008874:	d413      	bmi.n	800889e <_printf_i+0x22e>
 8008876:	68e0      	ldr	r0, [r4, #12]
 8008878:	9b03      	ldr	r3, [sp, #12]
 800887a:	4298      	cmp	r0, r3
 800887c:	bfb8      	it	lt
 800887e:	4618      	movlt	r0, r3
 8008880:	e7a6      	b.n	80087d0 <_printf_i+0x160>
 8008882:	2301      	movs	r3, #1
 8008884:	4632      	mov	r2, r6
 8008886:	4649      	mov	r1, r9
 8008888:	4640      	mov	r0, r8
 800888a:	47d0      	blx	sl
 800888c:	3001      	adds	r0, #1
 800888e:	d09d      	beq.n	80087cc <_printf_i+0x15c>
 8008890:	3501      	adds	r5, #1
 8008892:	68e3      	ldr	r3, [r4, #12]
 8008894:	9903      	ldr	r1, [sp, #12]
 8008896:	1a5b      	subs	r3, r3, r1
 8008898:	42ab      	cmp	r3, r5
 800889a:	dcf2      	bgt.n	8008882 <_printf_i+0x212>
 800889c:	e7eb      	b.n	8008876 <_printf_i+0x206>
 800889e:	2500      	movs	r5, #0
 80088a0:	f104 0619 	add.w	r6, r4, #25
 80088a4:	e7f5      	b.n	8008892 <_printf_i+0x222>
 80088a6:	bf00      	nop
 80088a8:	0800afc3 	.word	0x0800afc3
 80088ac:	0800afd4 	.word	0x0800afd4

080088b0 <std>:
 80088b0:	2300      	movs	r3, #0
 80088b2:	b510      	push	{r4, lr}
 80088b4:	4604      	mov	r4, r0
 80088b6:	e9c0 3300 	strd	r3, r3, [r0]
 80088ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088be:	6083      	str	r3, [r0, #8]
 80088c0:	8181      	strh	r1, [r0, #12]
 80088c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80088c4:	81c2      	strh	r2, [r0, #14]
 80088c6:	6183      	str	r3, [r0, #24]
 80088c8:	4619      	mov	r1, r3
 80088ca:	2208      	movs	r2, #8
 80088cc:	305c      	adds	r0, #92	@ 0x5c
 80088ce:	f000 f938 	bl	8008b42 <memset>
 80088d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008908 <std+0x58>)
 80088d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80088d6:	4b0d      	ldr	r3, [pc, #52]	@ (800890c <std+0x5c>)
 80088d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80088da:	4b0d      	ldr	r3, [pc, #52]	@ (8008910 <std+0x60>)
 80088dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80088de:	4b0d      	ldr	r3, [pc, #52]	@ (8008914 <std+0x64>)
 80088e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80088e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008918 <std+0x68>)
 80088e4:	6224      	str	r4, [r4, #32]
 80088e6:	429c      	cmp	r4, r3
 80088e8:	d006      	beq.n	80088f8 <std+0x48>
 80088ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80088ee:	4294      	cmp	r4, r2
 80088f0:	d002      	beq.n	80088f8 <std+0x48>
 80088f2:	33d0      	adds	r3, #208	@ 0xd0
 80088f4:	429c      	cmp	r4, r3
 80088f6:	d105      	bne.n	8008904 <std+0x54>
 80088f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80088fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008900:	f000 b99c 	b.w	8008c3c <__retarget_lock_init_recursive>
 8008904:	bd10      	pop	{r4, pc}
 8008906:	bf00      	nop
 8008908:	08008a9d 	.word	0x08008a9d
 800890c:	08008abf 	.word	0x08008abf
 8008910:	08008af7 	.word	0x08008af7
 8008914:	08008b1b 	.word	0x08008b1b
 8008918:	2000508c 	.word	0x2000508c

0800891c <stdio_exit_handler>:
 800891c:	4a02      	ldr	r2, [pc, #8]	@ (8008928 <stdio_exit_handler+0xc>)
 800891e:	4903      	ldr	r1, [pc, #12]	@ (800892c <stdio_exit_handler+0x10>)
 8008920:	4803      	ldr	r0, [pc, #12]	@ (8008930 <stdio_exit_handler+0x14>)
 8008922:	f000 b869 	b.w	80089f8 <_fwalk_sglue>
 8008926:	bf00      	nop
 8008928:	2000000c 	.word	0x2000000c
 800892c:	0800a5b5 	.word	0x0800a5b5
 8008930:	2000001c 	.word	0x2000001c

08008934 <cleanup_stdio>:
 8008934:	6841      	ldr	r1, [r0, #4]
 8008936:	4b0c      	ldr	r3, [pc, #48]	@ (8008968 <cleanup_stdio+0x34>)
 8008938:	4299      	cmp	r1, r3
 800893a:	b510      	push	{r4, lr}
 800893c:	4604      	mov	r4, r0
 800893e:	d001      	beq.n	8008944 <cleanup_stdio+0x10>
 8008940:	f001 fe38 	bl	800a5b4 <_fflush_r>
 8008944:	68a1      	ldr	r1, [r4, #8]
 8008946:	4b09      	ldr	r3, [pc, #36]	@ (800896c <cleanup_stdio+0x38>)
 8008948:	4299      	cmp	r1, r3
 800894a:	d002      	beq.n	8008952 <cleanup_stdio+0x1e>
 800894c:	4620      	mov	r0, r4
 800894e:	f001 fe31 	bl	800a5b4 <_fflush_r>
 8008952:	68e1      	ldr	r1, [r4, #12]
 8008954:	4b06      	ldr	r3, [pc, #24]	@ (8008970 <cleanup_stdio+0x3c>)
 8008956:	4299      	cmp	r1, r3
 8008958:	d004      	beq.n	8008964 <cleanup_stdio+0x30>
 800895a:	4620      	mov	r0, r4
 800895c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008960:	f001 be28 	b.w	800a5b4 <_fflush_r>
 8008964:	bd10      	pop	{r4, pc}
 8008966:	bf00      	nop
 8008968:	2000508c 	.word	0x2000508c
 800896c:	200050f4 	.word	0x200050f4
 8008970:	2000515c 	.word	0x2000515c

08008974 <global_stdio_init.part.0>:
 8008974:	b510      	push	{r4, lr}
 8008976:	4b0b      	ldr	r3, [pc, #44]	@ (80089a4 <global_stdio_init.part.0+0x30>)
 8008978:	4c0b      	ldr	r4, [pc, #44]	@ (80089a8 <global_stdio_init.part.0+0x34>)
 800897a:	4a0c      	ldr	r2, [pc, #48]	@ (80089ac <global_stdio_init.part.0+0x38>)
 800897c:	601a      	str	r2, [r3, #0]
 800897e:	4620      	mov	r0, r4
 8008980:	2200      	movs	r2, #0
 8008982:	2104      	movs	r1, #4
 8008984:	f7ff ff94 	bl	80088b0 <std>
 8008988:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800898c:	2201      	movs	r2, #1
 800898e:	2109      	movs	r1, #9
 8008990:	f7ff ff8e 	bl	80088b0 <std>
 8008994:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008998:	2202      	movs	r2, #2
 800899a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800899e:	2112      	movs	r1, #18
 80089a0:	f7ff bf86 	b.w	80088b0 <std>
 80089a4:	200051c4 	.word	0x200051c4
 80089a8:	2000508c 	.word	0x2000508c
 80089ac:	0800891d 	.word	0x0800891d

080089b0 <__sfp_lock_acquire>:
 80089b0:	4801      	ldr	r0, [pc, #4]	@ (80089b8 <__sfp_lock_acquire+0x8>)
 80089b2:	f000 b944 	b.w	8008c3e <__retarget_lock_acquire_recursive>
 80089b6:	bf00      	nop
 80089b8:	200051cd 	.word	0x200051cd

080089bc <__sfp_lock_release>:
 80089bc:	4801      	ldr	r0, [pc, #4]	@ (80089c4 <__sfp_lock_release+0x8>)
 80089be:	f000 b93f 	b.w	8008c40 <__retarget_lock_release_recursive>
 80089c2:	bf00      	nop
 80089c4:	200051cd 	.word	0x200051cd

080089c8 <__sinit>:
 80089c8:	b510      	push	{r4, lr}
 80089ca:	4604      	mov	r4, r0
 80089cc:	f7ff fff0 	bl	80089b0 <__sfp_lock_acquire>
 80089d0:	6a23      	ldr	r3, [r4, #32]
 80089d2:	b11b      	cbz	r3, 80089dc <__sinit+0x14>
 80089d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089d8:	f7ff bff0 	b.w	80089bc <__sfp_lock_release>
 80089dc:	4b04      	ldr	r3, [pc, #16]	@ (80089f0 <__sinit+0x28>)
 80089de:	6223      	str	r3, [r4, #32]
 80089e0:	4b04      	ldr	r3, [pc, #16]	@ (80089f4 <__sinit+0x2c>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1f5      	bne.n	80089d4 <__sinit+0xc>
 80089e8:	f7ff ffc4 	bl	8008974 <global_stdio_init.part.0>
 80089ec:	e7f2      	b.n	80089d4 <__sinit+0xc>
 80089ee:	bf00      	nop
 80089f0:	08008935 	.word	0x08008935
 80089f4:	200051c4 	.word	0x200051c4

080089f8 <_fwalk_sglue>:
 80089f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089fc:	4607      	mov	r7, r0
 80089fe:	4688      	mov	r8, r1
 8008a00:	4614      	mov	r4, r2
 8008a02:	2600      	movs	r6, #0
 8008a04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a08:	f1b9 0901 	subs.w	r9, r9, #1
 8008a0c:	d505      	bpl.n	8008a1a <_fwalk_sglue+0x22>
 8008a0e:	6824      	ldr	r4, [r4, #0]
 8008a10:	2c00      	cmp	r4, #0
 8008a12:	d1f7      	bne.n	8008a04 <_fwalk_sglue+0xc>
 8008a14:	4630      	mov	r0, r6
 8008a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a1a:	89ab      	ldrh	r3, [r5, #12]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d907      	bls.n	8008a30 <_fwalk_sglue+0x38>
 8008a20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a24:	3301      	adds	r3, #1
 8008a26:	d003      	beq.n	8008a30 <_fwalk_sglue+0x38>
 8008a28:	4629      	mov	r1, r5
 8008a2a:	4638      	mov	r0, r7
 8008a2c:	47c0      	blx	r8
 8008a2e:	4306      	orrs	r6, r0
 8008a30:	3568      	adds	r5, #104	@ 0x68
 8008a32:	e7e9      	b.n	8008a08 <_fwalk_sglue+0x10>

08008a34 <sniprintf>:
 8008a34:	b40c      	push	{r2, r3}
 8008a36:	b530      	push	{r4, r5, lr}
 8008a38:	4b17      	ldr	r3, [pc, #92]	@ (8008a98 <sniprintf+0x64>)
 8008a3a:	1e0c      	subs	r4, r1, #0
 8008a3c:	681d      	ldr	r5, [r3, #0]
 8008a3e:	b09d      	sub	sp, #116	@ 0x74
 8008a40:	da08      	bge.n	8008a54 <sniprintf+0x20>
 8008a42:	238b      	movs	r3, #139	@ 0x8b
 8008a44:	602b      	str	r3, [r5, #0]
 8008a46:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a4a:	b01d      	add	sp, #116	@ 0x74
 8008a4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a50:	b002      	add	sp, #8
 8008a52:	4770      	bx	lr
 8008a54:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008a58:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008a5c:	bf14      	ite	ne
 8008a5e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8008a62:	4623      	moveq	r3, r4
 8008a64:	9304      	str	r3, [sp, #16]
 8008a66:	9307      	str	r3, [sp, #28]
 8008a68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008a6c:	9002      	str	r0, [sp, #8]
 8008a6e:	9006      	str	r0, [sp, #24]
 8008a70:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008a74:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008a76:	ab21      	add	r3, sp, #132	@ 0x84
 8008a78:	a902      	add	r1, sp, #8
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	9301      	str	r3, [sp, #4]
 8008a7e:	f001 fc19 	bl	800a2b4 <_svfiprintf_r>
 8008a82:	1c43      	adds	r3, r0, #1
 8008a84:	bfbc      	itt	lt
 8008a86:	238b      	movlt	r3, #139	@ 0x8b
 8008a88:	602b      	strlt	r3, [r5, #0]
 8008a8a:	2c00      	cmp	r4, #0
 8008a8c:	d0dd      	beq.n	8008a4a <sniprintf+0x16>
 8008a8e:	9b02      	ldr	r3, [sp, #8]
 8008a90:	2200      	movs	r2, #0
 8008a92:	701a      	strb	r2, [r3, #0]
 8008a94:	e7d9      	b.n	8008a4a <sniprintf+0x16>
 8008a96:	bf00      	nop
 8008a98:	20000018 	.word	0x20000018

08008a9c <__sread>:
 8008a9c:	b510      	push	{r4, lr}
 8008a9e:	460c      	mov	r4, r1
 8008aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aa4:	f000 f87c 	bl	8008ba0 <_read_r>
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	bfab      	itete	ge
 8008aac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008aae:	89a3      	ldrhlt	r3, [r4, #12]
 8008ab0:	181b      	addge	r3, r3, r0
 8008ab2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008ab6:	bfac      	ite	ge
 8008ab8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008aba:	81a3      	strhlt	r3, [r4, #12]
 8008abc:	bd10      	pop	{r4, pc}

08008abe <__swrite>:
 8008abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ac2:	461f      	mov	r7, r3
 8008ac4:	898b      	ldrh	r3, [r1, #12]
 8008ac6:	05db      	lsls	r3, r3, #23
 8008ac8:	4605      	mov	r5, r0
 8008aca:	460c      	mov	r4, r1
 8008acc:	4616      	mov	r6, r2
 8008ace:	d505      	bpl.n	8008adc <__swrite+0x1e>
 8008ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ad4:	2302      	movs	r3, #2
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f000 f850 	bl	8008b7c <_lseek_r>
 8008adc:	89a3      	ldrh	r3, [r4, #12]
 8008ade:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ae2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ae6:	81a3      	strh	r3, [r4, #12]
 8008ae8:	4632      	mov	r2, r6
 8008aea:	463b      	mov	r3, r7
 8008aec:	4628      	mov	r0, r5
 8008aee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008af2:	f000 b867 	b.w	8008bc4 <_write_r>

08008af6 <__sseek>:
 8008af6:	b510      	push	{r4, lr}
 8008af8:	460c      	mov	r4, r1
 8008afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008afe:	f000 f83d 	bl	8008b7c <_lseek_r>
 8008b02:	1c43      	adds	r3, r0, #1
 8008b04:	89a3      	ldrh	r3, [r4, #12]
 8008b06:	bf15      	itete	ne
 8008b08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008b0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008b0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008b12:	81a3      	strheq	r3, [r4, #12]
 8008b14:	bf18      	it	ne
 8008b16:	81a3      	strhne	r3, [r4, #12]
 8008b18:	bd10      	pop	{r4, pc}

08008b1a <__sclose>:
 8008b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b1e:	f000 b81d 	b.w	8008b5c <_close_r>

08008b22 <memcmp>:
 8008b22:	b510      	push	{r4, lr}
 8008b24:	3901      	subs	r1, #1
 8008b26:	4402      	add	r2, r0
 8008b28:	4290      	cmp	r0, r2
 8008b2a:	d101      	bne.n	8008b30 <memcmp+0xe>
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	e005      	b.n	8008b3c <memcmp+0x1a>
 8008b30:	7803      	ldrb	r3, [r0, #0]
 8008b32:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008b36:	42a3      	cmp	r3, r4
 8008b38:	d001      	beq.n	8008b3e <memcmp+0x1c>
 8008b3a:	1b18      	subs	r0, r3, r4
 8008b3c:	bd10      	pop	{r4, pc}
 8008b3e:	3001      	adds	r0, #1
 8008b40:	e7f2      	b.n	8008b28 <memcmp+0x6>

08008b42 <memset>:
 8008b42:	4402      	add	r2, r0
 8008b44:	4603      	mov	r3, r0
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d100      	bne.n	8008b4c <memset+0xa>
 8008b4a:	4770      	bx	lr
 8008b4c:	f803 1b01 	strb.w	r1, [r3], #1
 8008b50:	e7f9      	b.n	8008b46 <memset+0x4>
	...

08008b54 <_localeconv_r>:
 8008b54:	4800      	ldr	r0, [pc, #0]	@ (8008b58 <_localeconv_r+0x4>)
 8008b56:	4770      	bx	lr
 8008b58:	20000158 	.word	0x20000158

08008b5c <_close_r>:
 8008b5c:	b538      	push	{r3, r4, r5, lr}
 8008b5e:	4d06      	ldr	r5, [pc, #24]	@ (8008b78 <_close_r+0x1c>)
 8008b60:	2300      	movs	r3, #0
 8008b62:	4604      	mov	r4, r0
 8008b64:	4608      	mov	r0, r1
 8008b66:	602b      	str	r3, [r5, #0]
 8008b68:	f7fa fbe6 	bl	8003338 <_close>
 8008b6c:	1c43      	adds	r3, r0, #1
 8008b6e:	d102      	bne.n	8008b76 <_close_r+0x1a>
 8008b70:	682b      	ldr	r3, [r5, #0]
 8008b72:	b103      	cbz	r3, 8008b76 <_close_r+0x1a>
 8008b74:	6023      	str	r3, [r4, #0]
 8008b76:	bd38      	pop	{r3, r4, r5, pc}
 8008b78:	200051c8 	.word	0x200051c8

08008b7c <_lseek_r>:
 8008b7c:	b538      	push	{r3, r4, r5, lr}
 8008b7e:	4d07      	ldr	r5, [pc, #28]	@ (8008b9c <_lseek_r+0x20>)
 8008b80:	4604      	mov	r4, r0
 8008b82:	4608      	mov	r0, r1
 8008b84:	4611      	mov	r1, r2
 8008b86:	2200      	movs	r2, #0
 8008b88:	602a      	str	r2, [r5, #0]
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	f7fa fbfb 	bl	8003386 <_lseek>
 8008b90:	1c43      	adds	r3, r0, #1
 8008b92:	d102      	bne.n	8008b9a <_lseek_r+0x1e>
 8008b94:	682b      	ldr	r3, [r5, #0]
 8008b96:	b103      	cbz	r3, 8008b9a <_lseek_r+0x1e>
 8008b98:	6023      	str	r3, [r4, #0]
 8008b9a:	bd38      	pop	{r3, r4, r5, pc}
 8008b9c:	200051c8 	.word	0x200051c8

08008ba0 <_read_r>:
 8008ba0:	b538      	push	{r3, r4, r5, lr}
 8008ba2:	4d07      	ldr	r5, [pc, #28]	@ (8008bc0 <_read_r+0x20>)
 8008ba4:	4604      	mov	r4, r0
 8008ba6:	4608      	mov	r0, r1
 8008ba8:	4611      	mov	r1, r2
 8008baa:	2200      	movs	r2, #0
 8008bac:	602a      	str	r2, [r5, #0]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	f7fa fb89 	bl	80032c6 <_read>
 8008bb4:	1c43      	adds	r3, r0, #1
 8008bb6:	d102      	bne.n	8008bbe <_read_r+0x1e>
 8008bb8:	682b      	ldr	r3, [r5, #0]
 8008bba:	b103      	cbz	r3, 8008bbe <_read_r+0x1e>
 8008bbc:	6023      	str	r3, [r4, #0]
 8008bbe:	bd38      	pop	{r3, r4, r5, pc}
 8008bc0:	200051c8 	.word	0x200051c8

08008bc4 <_write_r>:
 8008bc4:	b538      	push	{r3, r4, r5, lr}
 8008bc6:	4d07      	ldr	r5, [pc, #28]	@ (8008be4 <_write_r+0x20>)
 8008bc8:	4604      	mov	r4, r0
 8008bca:	4608      	mov	r0, r1
 8008bcc:	4611      	mov	r1, r2
 8008bce:	2200      	movs	r2, #0
 8008bd0:	602a      	str	r2, [r5, #0]
 8008bd2:	461a      	mov	r2, r3
 8008bd4:	f7fa fb94 	bl	8003300 <_write>
 8008bd8:	1c43      	adds	r3, r0, #1
 8008bda:	d102      	bne.n	8008be2 <_write_r+0x1e>
 8008bdc:	682b      	ldr	r3, [r5, #0]
 8008bde:	b103      	cbz	r3, 8008be2 <_write_r+0x1e>
 8008be0:	6023      	str	r3, [r4, #0]
 8008be2:	bd38      	pop	{r3, r4, r5, pc}
 8008be4:	200051c8 	.word	0x200051c8

08008be8 <__errno>:
 8008be8:	4b01      	ldr	r3, [pc, #4]	@ (8008bf0 <__errno+0x8>)
 8008bea:	6818      	ldr	r0, [r3, #0]
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	20000018 	.word	0x20000018

08008bf4 <__libc_init_array>:
 8008bf4:	b570      	push	{r4, r5, r6, lr}
 8008bf6:	4d0d      	ldr	r5, [pc, #52]	@ (8008c2c <__libc_init_array+0x38>)
 8008bf8:	4c0d      	ldr	r4, [pc, #52]	@ (8008c30 <__libc_init_array+0x3c>)
 8008bfa:	1b64      	subs	r4, r4, r5
 8008bfc:	10a4      	asrs	r4, r4, #2
 8008bfe:	2600      	movs	r6, #0
 8008c00:	42a6      	cmp	r6, r4
 8008c02:	d109      	bne.n	8008c18 <__libc_init_array+0x24>
 8008c04:	4d0b      	ldr	r5, [pc, #44]	@ (8008c34 <__libc_init_array+0x40>)
 8008c06:	4c0c      	ldr	r4, [pc, #48]	@ (8008c38 <__libc_init_array+0x44>)
 8008c08:	f002 f888 	bl	800ad1c <_init>
 8008c0c:	1b64      	subs	r4, r4, r5
 8008c0e:	10a4      	asrs	r4, r4, #2
 8008c10:	2600      	movs	r6, #0
 8008c12:	42a6      	cmp	r6, r4
 8008c14:	d105      	bne.n	8008c22 <__libc_init_array+0x2e>
 8008c16:	bd70      	pop	{r4, r5, r6, pc}
 8008c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c1c:	4798      	blx	r3
 8008c1e:	3601      	adds	r6, #1
 8008c20:	e7ee      	b.n	8008c00 <__libc_init_array+0xc>
 8008c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c26:	4798      	blx	r3
 8008c28:	3601      	adds	r6, #1
 8008c2a:	e7f2      	b.n	8008c12 <__libc_init_array+0x1e>
 8008c2c:	0800b228 	.word	0x0800b228
 8008c30:	0800b228 	.word	0x0800b228
 8008c34:	0800b228 	.word	0x0800b228
 8008c38:	0800b22c 	.word	0x0800b22c

08008c3c <__retarget_lock_init_recursive>:
 8008c3c:	4770      	bx	lr

08008c3e <__retarget_lock_acquire_recursive>:
 8008c3e:	4770      	bx	lr

08008c40 <__retarget_lock_release_recursive>:
 8008c40:	4770      	bx	lr

08008c42 <memcpy>:
 8008c42:	440a      	add	r2, r1
 8008c44:	4291      	cmp	r1, r2
 8008c46:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008c4a:	d100      	bne.n	8008c4e <memcpy+0xc>
 8008c4c:	4770      	bx	lr
 8008c4e:	b510      	push	{r4, lr}
 8008c50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c58:	4291      	cmp	r1, r2
 8008c5a:	d1f9      	bne.n	8008c50 <memcpy+0xe>
 8008c5c:	bd10      	pop	{r4, pc}

08008c5e <quorem>:
 8008c5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c62:	6903      	ldr	r3, [r0, #16]
 8008c64:	690c      	ldr	r4, [r1, #16]
 8008c66:	42a3      	cmp	r3, r4
 8008c68:	4607      	mov	r7, r0
 8008c6a:	db7e      	blt.n	8008d6a <quorem+0x10c>
 8008c6c:	3c01      	subs	r4, #1
 8008c6e:	f101 0814 	add.w	r8, r1, #20
 8008c72:	00a3      	lsls	r3, r4, #2
 8008c74:	f100 0514 	add.w	r5, r0, #20
 8008c78:	9300      	str	r3, [sp, #0]
 8008c7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c7e:	9301      	str	r3, [sp, #4]
 8008c80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c90:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c94:	d32e      	bcc.n	8008cf4 <quorem+0x96>
 8008c96:	f04f 0a00 	mov.w	sl, #0
 8008c9a:	46c4      	mov	ip, r8
 8008c9c:	46ae      	mov	lr, r5
 8008c9e:	46d3      	mov	fp, sl
 8008ca0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008ca4:	b298      	uxth	r0, r3
 8008ca6:	fb06 a000 	mla	r0, r6, r0, sl
 8008caa:	0c02      	lsrs	r2, r0, #16
 8008cac:	0c1b      	lsrs	r3, r3, #16
 8008cae:	fb06 2303 	mla	r3, r6, r3, r2
 8008cb2:	f8de 2000 	ldr.w	r2, [lr]
 8008cb6:	b280      	uxth	r0, r0
 8008cb8:	b292      	uxth	r2, r2
 8008cba:	1a12      	subs	r2, r2, r0
 8008cbc:	445a      	add	r2, fp
 8008cbe:	f8de 0000 	ldr.w	r0, [lr]
 8008cc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008ccc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008cd0:	b292      	uxth	r2, r2
 8008cd2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008cd6:	45e1      	cmp	r9, ip
 8008cd8:	f84e 2b04 	str.w	r2, [lr], #4
 8008cdc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008ce0:	d2de      	bcs.n	8008ca0 <quorem+0x42>
 8008ce2:	9b00      	ldr	r3, [sp, #0]
 8008ce4:	58eb      	ldr	r3, [r5, r3]
 8008ce6:	b92b      	cbnz	r3, 8008cf4 <quorem+0x96>
 8008ce8:	9b01      	ldr	r3, [sp, #4]
 8008cea:	3b04      	subs	r3, #4
 8008cec:	429d      	cmp	r5, r3
 8008cee:	461a      	mov	r2, r3
 8008cf0:	d32f      	bcc.n	8008d52 <quorem+0xf4>
 8008cf2:	613c      	str	r4, [r7, #16]
 8008cf4:	4638      	mov	r0, r7
 8008cf6:	f001 f979 	bl	8009fec <__mcmp>
 8008cfa:	2800      	cmp	r0, #0
 8008cfc:	db25      	blt.n	8008d4a <quorem+0xec>
 8008cfe:	4629      	mov	r1, r5
 8008d00:	2000      	movs	r0, #0
 8008d02:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d06:	f8d1 c000 	ldr.w	ip, [r1]
 8008d0a:	fa1f fe82 	uxth.w	lr, r2
 8008d0e:	fa1f f38c 	uxth.w	r3, ip
 8008d12:	eba3 030e 	sub.w	r3, r3, lr
 8008d16:	4403      	add	r3, r0
 8008d18:	0c12      	lsrs	r2, r2, #16
 8008d1a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008d1e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d28:	45c1      	cmp	r9, r8
 8008d2a:	f841 3b04 	str.w	r3, [r1], #4
 8008d2e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008d32:	d2e6      	bcs.n	8008d02 <quorem+0xa4>
 8008d34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d3c:	b922      	cbnz	r2, 8008d48 <quorem+0xea>
 8008d3e:	3b04      	subs	r3, #4
 8008d40:	429d      	cmp	r5, r3
 8008d42:	461a      	mov	r2, r3
 8008d44:	d30b      	bcc.n	8008d5e <quorem+0x100>
 8008d46:	613c      	str	r4, [r7, #16]
 8008d48:	3601      	adds	r6, #1
 8008d4a:	4630      	mov	r0, r6
 8008d4c:	b003      	add	sp, #12
 8008d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d52:	6812      	ldr	r2, [r2, #0]
 8008d54:	3b04      	subs	r3, #4
 8008d56:	2a00      	cmp	r2, #0
 8008d58:	d1cb      	bne.n	8008cf2 <quorem+0x94>
 8008d5a:	3c01      	subs	r4, #1
 8008d5c:	e7c6      	b.n	8008cec <quorem+0x8e>
 8008d5e:	6812      	ldr	r2, [r2, #0]
 8008d60:	3b04      	subs	r3, #4
 8008d62:	2a00      	cmp	r2, #0
 8008d64:	d1ef      	bne.n	8008d46 <quorem+0xe8>
 8008d66:	3c01      	subs	r4, #1
 8008d68:	e7ea      	b.n	8008d40 <quorem+0xe2>
 8008d6a:	2000      	movs	r0, #0
 8008d6c:	e7ee      	b.n	8008d4c <quorem+0xee>
	...

08008d70 <_dtoa_r>:
 8008d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d74:	69c7      	ldr	r7, [r0, #28]
 8008d76:	b099      	sub	sp, #100	@ 0x64
 8008d78:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008d7c:	ec55 4b10 	vmov	r4, r5, d0
 8008d80:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008d82:	9109      	str	r1, [sp, #36]	@ 0x24
 8008d84:	4683      	mov	fp, r0
 8008d86:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d88:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008d8a:	b97f      	cbnz	r7, 8008dac <_dtoa_r+0x3c>
 8008d8c:	2010      	movs	r0, #16
 8008d8e:	f000 fdfd 	bl	800998c <malloc>
 8008d92:	4602      	mov	r2, r0
 8008d94:	f8cb 001c 	str.w	r0, [fp, #28]
 8008d98:	b920      	cbnz	r0, 8008da4 <_dtoa_r+0x34>
 8008d9a:	4ba7      	ldr	r3, [pc, #668]	@ (8009038 <_dtoa_r+0x2c8>)
 8008d9c:	21ef      	movs	r1, #239	@ 0xef
 8008d9e:	48a7      	ldr	r0, [pc, #668]	@ (800903c <_dtoa_r+0x2cc>)
 8008da0:	f001 fc5a 	bl	800a658 <__assert_func>
 8008da4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008da8:	6007      	str	r7, [r0, #0]
 8008daa:	60c7      	str	r7, [r0, #12]
 8008dac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008db0:	6819      	ldr	r1, [r3, #0]
 8008db2:	b159      	cbz	r1, 8008dcc <_dtoa_r+0x5c>
 8008db4:	685a      	ldr	r2, [r3, #4]
 8008db6:	604a      	str	r2, [r1, #4]
 8008db8:	2301      	movs	r3, #1
 8008dba:	4093      	lsls	r3, r2
 8008dbc:	608b      	str	r3, [r1, #8]
 8008dbe:	4658      	mov	r0, fp
 8008dc0:	f000 feda 	bl	8009b78 <_Bfree>
 8008dc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	601a      	str	r2, [r3, #0]
 8008dcc:	1e2b      	subs	r3, r5, #0
 8008dce:	bfb9      	ittee	lt
 8008dd0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008dd4:	9303      	strlt	r3, [sp, #12]
 8008dd6:	2300      	movge	r3, #0
 8008dd8:	6033      	strge	r3, [r6, #0]
 8008dda:	9f03      	ldr	r7, [sp, #12]
 8008ddc:	4b98      	ldr	r3, [pc, #608]	@ (8009040 <_dtoa_r+0x2d0>)
 8008dde:	bfbc      	itt	lt
 8008de0:	2201      	movlt	r2, #1
 8008de2:	6032      	strlt	r2, [r6, #0]
 8008de4:	43bb      	bics	r3, r7
 8008de6:	d112      	bne.n	8008e0e <_dtoa_r+0x9e>
 8008de8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008dea:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008dee:	6013      	str	r3, [r2, #0]
 8008df0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008df4:	4323      	orrs	r3, r4
 8008df6:	f000 854d 	beq.w	8009894 <_dtoa_r+0xb24>
 8008dfa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008dfc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009054 <_dtoa_r+0x2e4>
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 854f 	beq.w	80098a4 <_dtoa_r+0xb34>
 8008e06:	f10a 0303 	add.w	r3, sl, #3
 8008e0a:	f000 bd49 	b.w	80098a0 <_dtoa_r+0xb30>
 8008e0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e12:	2200      	movs	r2, #0
 8008e14:	ec51 0b17 	vmov	r0, r1, d7
 8008e18:	2300      	movs	r3, #0
 8008e1a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008e1e:	f7f7 fe73 	bl	8000b08 <__aeabi_dcmpeq>
 8008e22:	4680      	mov	r8, r0
 8008e24:	b158      	cbz	r0, 8008e3e <_dtoa_r+0xce>
 8008e26:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008e28:	2301      	movs	r3, #1
 8008e2a:	6013      	str	r3, [r2, #0]
 8008e2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e2e:	b113      	cbz	r3, 8008e36 <_dtoa_r+0xc6>
 8008e30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008e32:	4b84      	ldr	r3, [pc, #528]	@ (8009044 <_dtoa_r+0x2d4>)
 8008e34:	6013      	str	r3, [r2, #0]
 8008e36:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009058 <_dtoa_r+0x2e8>
 8008e3a:	f000 bd33 	b.w	80098a4 <_dtoa_r+0xb34>
 8008e3e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008e42:	aa16      	add	r2, sp, #88	@ 0x58
 8008e44:	a917      	add	r1, sp, #92	@ 0x5c
 8008e46:	4658      	mov	r0, fp
 8008e48:	f001 f980 	bl	800a14c <__d2b>
 8008e4c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008e50:	4681      	mov	r9, r0
 8008e52:	2e00      	cmp	r6, #0
 8008e54:	d077      	beq.n	8008f46 <_dtoa_r+0x1d6>
 8008e56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e58:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008e5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e64:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008e68:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008e6c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008e70:	4619      	mov	r1, r3
 8008e72:	2200      	movs	r2, #0
 8008e74:	4b74      	ldr	r3, [pc, #464]	@ (8009048 <_dtoa_r+0x2d8>)
 8008e76:	f7f7 fa27 	bl	80002c8 <__aeabi_dsub>
 8008e7a:	a369      	add	r3, pc, #420	@ (adr r3, 8009020 <_dtoa_r+0x2b0>)
 8008e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e80:	f7f7 fbda 	bl	8000638 <__aeabi_dmul>
 8008e84:	a368      	add	r3, pc, #416	@ (adr r3, 8009028 <_dtoa_r+0x2b8>)
 8008e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8a:	f7f7 fa1f 	bl	80002cc <__adddf3>
 8008e8e:	4604      	mov	r4, r0
 8008e90:	4630      	mov	r0, r6
 8008e92:	460d      	mov	r5, r1
 8008e94:	f7f7 fb66 	bl	8000564 <__aeabi_i2d>
 8008e98:	a365      	add	r3, pc, #404	@ (adr r3, 8009030 <_dtoa_r+0x2c0>)
 8008e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9e:	f7f7 fbcb 	bl	8000638 <__aeabi_dmul>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	4620      	mov	r0, r4
 8008ea8:	4629      	mov	r1, r5
 8008eaa:	f7f7 fa0f 	bl	80002cc <__adddf3>
 8008eae:	4604      	mov	r4, r0
 8008eb0:	460d      	mov	r5, r1
 8008eb2:	f7f7 fe71 	bl	8000b98 <__aeabi_d2iz>
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	4607      	mov	r7, r0
 8008eba:	2300      	movs	r3, #0
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	4629      	mov	r1, r5
 8008ec0:	f7f7 fe2c 	bl	8000b1c <__aeabi_dcmplt>
 8008ec4:	b140      	cbz	r0, 8008ed8 <_dtoa_r+0x168>
 8008ec6:	4638      	mov	r0, r7
 8008ec8:	f7f7 fb4c 	bl	8000564 <__aeabi_i2d>
 8008ecc:	4622      	mov	r2, r4
 8008ece:	462b      	mov	r3, r5
 8008ed0:	f7f7 fe1a 	bl	8000b08 <__aeabi_dcmpeq>
 8008ed4:	b900      	cbnz	r0, 8008ed8 <_dtoa_r+0x168>
 8008ed6:	3f01      	subs	r7, #1
 8008ed8:	2f16      	cmp	r7, #22
 8008eda:	d851      	bhi.n	8008f80 <_dtoa_r+0x210>
 8008edc:	4b5b      	ldr	r3, [pc, #364]	@ (800904c <_dtoa_r+0x2dc>)
 8008ede:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008eea:	f7f7 fe17 	bl	8000b1c <__aeabi_dcmplt>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	d048      	beq.n	8008f84 <_dtoa_r+0x214>
 8008ef2:	3f01      	subs	r7, #1
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	9312      	str	r3, [sp, #72]	@ 0x48
 8008ef8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008efa:	1b9b      	subs	r3, r3, r6
 8008efc:	1e5a      	subs	r2, r3, #1
 8008efe:	bf44      	itt	mi
 8008f00:	f1c3 0801 	rsbmi	r8, r3, #1
 8008f04:	2300      	movmi	r3, #0
 8008f06:	9208      	str	r2, [sp, #32]
 8008f08:	bf54      	ite	pl
 8008f0a:	f04f 0800 	movpl.w	r8, #0
 8008f0e:	9308      	strmi	r3, [sp, #32]
 8008f10:	2f00      	cmp	r7, #0
 8008f12:	db39      	blt.n	8008f88 <_dtoa_r+0x218>
 8008f14:	9b08      	ldr	r3, [sp, #32]
 8008f16:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008f18:	443b      	add	r3, r7
 8008f1a:	9308      	str	r3, [sp, #32]
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f22:	2b09      	cmp	r3, #9
 8008f24:	d864      	bhi.n	8008ff0 <_dtoa_r+0x280>
 8008f26:	2b05      	cmp	r3, #5
 8008f28:	bfc4      	itt	gt
 8008f2a:	3b04      	subgt	r3, #4
 8008f2c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f30:	f1a3 0302 	sub.w	r3, r3, #2
 8008f34:	bfcc      	ite	gt
 8008f36:	2400      	movgt	r4, #0
 8008f38:	2401      	movle	r4, #1
 8008f3a:	2b03      	cmp	r3, #3
 8008f3c:	d863      	bhi.n	8009006 <_dtoa_r+0x296>
 8008f3e:	e8df f003 	tbb	[pc, r3]
 8008f42:	372a      	.short	0x372a
 8008f44:	5535      	.short	0x5535
 8008f46:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008f4a:	441e      	add	r6, r3
 8008f4c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008f50:	2b20      	cmp	r3, #32
 8008f52:	bfc1      	itttt	gt
 8008f54:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008f58:	409f      	lslgt	r7, r3
 8008f5a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008f5e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008f62:	bfd6      	itet	le
 8008f64:	f1c3 0320 	rsble	r3, r3, #32
 8008f68:	ea47 0003 	orrgt.w	r0, r7, r3
 8008f6c:	fa04 f003 	lslle.w	r0, r4, r3
 8008f70:	f7f7 fae8 	bl	8000544 <__aeabi_ui2d>
 8008f74:	2201      	movs	r2, #1
 8008f76:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008f7a:	3e01      	subs	r6, #1
 8008f7c:	9214      	str	r2, [sp, #80]	@ 0x50
 8008f7e:	e777      	b.n	8008e70 <_dtoa_r+0x100>
 8008f80:	2301      	movs	r3, #1
 8008f82:	e7b8      	b.n	8008ef6 <_dtoa_r+0x186>
 8008f84:	9012      	str	r0, [sp, #72]	@ 0x48
 8008f86:	e7b7      	b.n	8008ef8 <_dtoa_r+0x188>
 8008f88:	427b      	negs	r3, r7
 8008f8a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	eba8 0807 	sub.w	r8, r8, r7
 8008f92:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008f94:	e7c4      	b.n	8008f20 <_dtoa_r+0x1b0>
 8008f96:	2300      	movs	r3, #0
 8008f98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	dc35      	bgt.n	800900c <_dtoa_r+0x29c>
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	9300      	str	r3, [sp, #0]
 8008fa4:	9307      	str	r3, [sp, #28]
 8008fa6:	461a      	mov	r2, r3
 8008fa8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008faa:	e00b      	b.n	8008fc4 <_dtoa_r+0x254>
 8008fac:	2301      	movs	r3, #1
 8008fae:	e7f3      	b.n	8008f98 <_dtoa_r+0x228>
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008fb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fb6:	18fb      	adds	r3, r7, r3
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	9307      	str	r3, [sp, #28]
 8008fc0:	bfb8      	it	lt
 8008fc2:	2301      	movlt	r3, #1
 8008fc4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008fc8:	2100      	movs	r1, #0
 8008fca:	2204      	movs	r2, #4
 8008fcc:	f102 0514 	add.w	r5, r2, #20
 8008fd0:	429d      	cmp	r5, r3
 8008fd2:	d91f      	bls.n	8009014 <_dtoa_r+0x2a4>
 8008fd4:	6041      	str	r1, [r0, #4]
 8008fd6:	4658      	mov	r0, fp
 8008fd8:	f000 fd8e 	bl	8009af8 <_Balloc>
 8008fdc:	4682      	mov	sl, r0
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	d13c      	bne.n	800905c <_dtoa_r+0x2ec>
 8008fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8009050 <_dtoa_r+0x2e0>)
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	f240 11af 	movw	r1, #431	@ 0x1af
 8008fea:	e6d8      	b.n	8008d9e <_dtoa_r+0x2e>
 8008fec:	2301      	movs	r3, #1
 8008fee:	e7e0      	b.n	8008fb2 <_dtoa_r+0x242>
 8008ff0:	2401      	movs	r4, #1
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ff6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008ff8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008ffc:	9300      	str	r3, [sp, #0]
 8008ffe:	9307      	str	r3, [sp, #28]
 8009000:	2200      	movs	r2, #0
 8009002:	2312      	movs	r3, #18
 8009004:	e7d0      	b.n	8008fa8 <_dtoa_r+0x238>
 8009006:	2301      	movs	r3, #1
 8009008:	930b      	str	r3, [sp, #44]	@ 0x2c
 800900a:	e7f5      	b.n	8008ff8 <_dtoa_r+0x288>
 800900c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800900e:	9300      	str	r3, [sp, #0]
 8009010:	9307      	str	r3, [sp, #28]
 8009012:	e7d7      	b.n	8008fc4 <_dtoa_r+0x254>
 8009014:	3101      	adds	r1, #1
 8009016:	0052      	lsls	r2, r2, #1
 8009018:	e7d8      	b.n	8008fcc <_dtoa_r+0x25c>
 800901a:	bf00      	nop
 800901c:	f3af 8000 	nop.w
 8009020:	636f4361 	.word	0x636f4361
 8009024:	3fd287a7 	.word	0x3fd287a7
 8009028:	8b60c8b3 	.word	0x8b60c8b3
 800902c:	3fc68a28 	.word	0x3fc68a28
 8009030:	509f79fb 	.word	0x509f79fb
 8009034:	3fd34413 	.word	0x3fd34413
 8009038:	0800aff2 	.word	0x0800aff2
 800903c:	0800b009 	.word	0x0800b009
 8009040:	7ff00000 	.word	0x7ff00000
 8009044:	0800afc2 	.word	0x0800afc2
 8009048:	3ff80000 	.word	0x3ff80000
 800904c:	0800b100 	.word	0x0800b100
 8009050:	0800b061 	.word	0x0800b061
 8009054:	0800afee 	.word	0x0800afee
 8009058:	0800afc1 	.word	0x0800afc1
 800905c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009060:	6018      	str	r0, [r3, #0]
 8009062:	9b07      	ldr	r3, [sp, #28]
 8009064:	2b0e      	cmp	r3, #14
 8009066:	f200 80a4 	bhi.w	80091b2 <_dtoa_r+0x442>
 800906a:	2c00      	cmp	r4, #0
 800906c:	f000 80a1 	beq.w	80091b2 <_dtoa_r+0x442>
 8009070:	2f00      	cmp	r7, #0
 8009072:	dd33      	ble.n	80090dc <_dtoa_r+0x36c>
 8009074:	4bad      	ldr	r3, [pc, #692]	@ (800932c <_dtoa_r+0x5bc>)
 8009076:	f007 020f 	and.w	r2, r7, #15
 800907a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800907e:	ed93 7b00 	vldr	d7, [r3]
 8009082:	05f8      	lsls	r0, r7, #23
 8009084:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009088:	ea4f 1427 	mov.w	r4, r7, asr #4
 800908c:	d516      	bpl.n	80090bc <_dtoa_r+0x34c>
 800908e:	4ba8      	ldr	r3, [pc, #672]	@ (8009330 <_dtoa_r+0x5c0>)
 8009090:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009094:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009098:	f7f7 fbf8 	bl	800088c <__aeabi_ddiv>
 800909c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090a0:	f004 040f 	and.w	r4, r4, #15
 80090a4:	2603      	movs	r6, #3
 80090a6:	4da2      	ldr	r5, [pc, #648]	@ (8009330 <_dtoa_r+0x5c0>)
 80090a8:	b954      	cbnz	r4, 80090c0 <_dtoa_r+0x350>
 80090aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090b2:	f7f7 fbeb 	bl	800088c <__aeabi_ddiv>
 80090b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090ba:	e028      	b.n	800910e <_dtoa_r+0x39e>
 80090bc:	2602      	movs	r6, #2
 80090be:	e7f2      	b.n	80090a6 <_dtoa_r+0x336>
 80090c0:	07e1      	lsls	r1, r4, #31
 80090c2:	d508      	bpl.n	80090d6 <_dtoa_r+0x366>
 80090c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80090cc:	f7f7 fab4 	bl	8000638 <__aeabi_dmul>
 80090d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090d4:	3601      	adds	r6, #1
 80090d6:	1064      	asrs	r4, r4, #1
 80090d8:	3508      	adds	r5, #8
 80090da:	e7e5      	b.n	80090a8 <_dtoa_r+0x338>
 80090dc:	f000 80d2 	beq.w	8009284 <_dtoa_r+0x514>
 80090e0:	427c      	negs	r4, r7
 80090e2:	4b92      	ldr	r3, [pc, #584]	@ (800932c <_dtoa_r+0x5bc>)
 80090e4:	4d92      	ldr	r5, [pc, #584]	@ (8009330 <_dtoa_r+0x5c0>)
 80090e6:	f004 020f 	and.w	r2, r4, #15
 80090ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090f6:	f7f7 fa9f 	bl	8000638 <__aeabi_dmul>
 80090fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090fe:	1124      	asrs	r4, r4, #4
 8009100:	2300      	movs	r3, #0
 8009102:	2602      	movs	r6, #2
 8009104:	2c00      	cmp	r4, #0
 8009106:	f040 80b2 	bne.w	800926e <_dtoa_r+0x4fe>
 800910a:	2b00      	cmp	r3, #0
 800910c:	d1d3      	bne.n	80090b6 <_dtoa_r+0x346>
 800910e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009110:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009114:	2b00      	cmp	r3, #0
 8009116:	f000 80b7 	beq.w	8009288 <_dtoa_r+0x518>
 800911a:	4b86      	ldr	r3, [pc, #536]	@ (8009334 <_dtoa_r+0x5c4>)
 800911c:	2200      	movs	r2, #0
 800911e:	4620      	mov	r0, r4
 8009120:	4629      	mov	r1, r5
 8009122:	f7f7 fcfb 	bl	8000b1c <__aeabi_dcmplt>
 8009126:	2800      	cmp	r0, #0
 8009128:	f000 80ae 	beq.w	8009288 <_dtoa_r+0x518>
 800912c:	9b07      	ldr	r3, [sp, #28]
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 80aa 	beq.w	8009288 <_dtoa_r+0x518>
 8009134:	9b00      	ldr	r3, [sp, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	dd37      	ble.n	80091aa <_dtoa_r+0x43a>
 800913a:	1e7b      	subs	r3, r7, #1
 800913c:	9304      	str	r3, [sp, #16]
 800913e:	4620      	mov	r0, r4
 8009140:	4b7d      	ldr	r3, [pc, #500]	@ (8009338 <_dtoa_r+0x5c8>)
 8009142:	2200      	movs	r2, #0
 8009144:	4629      	mov	r1, r5
 8009146:	f7f7 fa77 	bl	8000638 <__aeabi_dmul>
 800914a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800914e:	9c00      	ldr	r4, [sp, #0]
 8009150:	3601      	adds	r6, #1
 8009152:	4630      	mov	r0, r6
 8009154:	f7f7 fa06 	bl	8000564 <__aeabi_i2d>
 8009158:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800915c:	f7f7 fa6c 	bl	8000638 <__aeabi_dmul>
 8009160:	4b76      	ldr	r3, [pc, #472]	@ (800933c <_dtoa_r+0x5cc>)
 8009162:	2200      	movs	r2, #0
 8009164:	f7f7 f8b2 	bl	80002cc <__adddf3>
 8009168:	4605      	mov	r5, r0
 800916a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800916e:	2c00      	cmp	r4, #0
 8009170:	f040 808d 	bne.w	800928e <_dtoa_r+0x51e>
 8009174:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009178:	4b71      	ldr	r3, [pc, #452]	@ (8009340 <_dtoa_r+0x5d0>)
 800917a:	2200      	movs	r2, #0
 800917c:	f7f7 f8a4 	bl	80002c8 <__aeabi_dsub>
 8009180:	4602      	mov	r2, r0
 8009182:	460b      	mov	r3, r1
 8009184:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009188:	462a      	mov	r2, r5
 800918a:	4633      	mov	r3, r6
 800918c:	f7f7 fce4 	bl	8000b58 <__aeabi_dcmpgt>
 8009190:	2800      	cmp	r0, #0
 8009192:	f040 828b 	bne.w	80096ac <_dtoa_r+0x93c>
 8009196:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800919a:	462a      	mov	r2, r5
 800919c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80091a0:	f7f7 fcbc 	bl	8000b1c <__aeabi_dcmplt>
 80091a4:	2800      	cmp	r0, #0
 80091a6:	f040 8128 	bne.w	80093fa <_dtoa_r+0x68a>
 80091aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80091ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80091b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f2c0 815a 	blt.w	800946e <_dtoa_r+0x6fe>
 80091ba:	2f0e      	cmp	r7, #14
 80091bc:	f300 8157 	bgt.w	800946e <_dtoa_r+0x6fe>
 80091c0:	4b5a      	ldr	r3, [pc, #360]	@ (800932c <_dtoa_r+0x5bc>)
 80091c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80091c6:	ed93 7b00 	vldr	d7, [r3]
 80091ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	ed8d 7b00 	vstr	d7, [sp]
 80091d2:	da03      	bge.n	80091dc <_dtoa_r+0x46c>
 80091d4:	9b07      	ldr	r3, [sp, #28]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	f340 8101 	ble.w	80093de <_dtoa_r+0x66e>
 80091dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80091e0:	4656      	mov	r6, sl
 80091e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091e6:	4620      	mov	r0, r4
 80091e8:	4629      	mov	r1, r5
 80091ea:	f7f7 fb4f 	bl	800088c <__aeabi_ddiv>
 80091ee:	f7f7 fcd3 	bl	8000b98 <__aeabi_d2iz>
 80091f2:	4680      	mov	r8, r0
 80091f4:	f7f7 f9b6 	bl	8000564 <__aeabi_i2d>
 80091f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091fc:	f7f7 fa1c 	bl	8000638 <__aeabi_dmul>
 8009200:	4602      	mov	r2, r0
 8009202:	460b      	mov	r3, r1
 8009204:	4620      	mov	r0, r4
 8009206:	4629      	mov	r1, r5
 8009208:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800920c:	f7f7 f85c 	bl	80002c8 <__aeabi_dsub>
 8009210:	f806 4b01 	strb.w	r4, [r6], #1
 8009214:	9d07      	ldr	r5, [sp, #28]
 8009216:	eba6 040a 	sub.w	r4, r6, sl
 800921a:	42a5      	cmp	r5, r4
 800921c:	4602      	mov	r2, r0
 800921e:	460b      	mov	r3, r1
 8009220:	f040 8117 	bne.w	8009452 <_dtoa_r+0x6e2>
 8009224:	f7f7 f852 	bl	80002cc <__adddf3>
 8009228:	e9dd 2300 	ldrd	r2, r3, [sp]
 800922c:	4604      	mov	r4, r0
 800922e:	460d      	mov	r5, r1
 8009230:	f7f7 fc92 	bl	8000b58 <__aeabi_dcmpgt>
 8009234:	2800      	cmp	r0, #0
 8009236:	f040 80f9 	bne.w	800942c <_dtoa_r+0x6bc>
 800923a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800923e:	4620      	mov	r0, r4
 8009240:	4629      	mov	r1, r5
 8009242:	f7f7 fc61 	bl	8000b08 <__aeabi_dcmpeq>
 8009246:	b118      	cbz	r0, 8009250 <_dtoa_r+0x4e0>
 8009248:	f018 0f01 	tst.w	r8, #1
 800924c:	f040 80ee 	bne.w	800942c <_dtoa_r+0x6bc>
 8009250:	4649      	mov	r1, r9
 8009252:	4658      	mov	r0, fp
 8009254:	f000 fc90 	bl	8009b78 <_Bfree>
 8009258:	2300      	movs	r3, #0
 800925a:	7033      	strb	r3, [r6, #0]
 800925c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800925e:	3701      	adds	r7, #1
 8009260:	601f      	str	r7, [r3, #0]
 8009262:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009264:	2b00      	cmp	r3, #0
 8009266:	f000 831d 	beq.w	80098a4 <_dtoa_r+0xb34>
 800926a:	601e      	str	r6, [r3, #0]
 800926c:	e31a      	b.n	80098a4 <_dtoa_r+0xb34>
 800926e:	07e2      	lsls	r2, r4, #31
 8009270:	d505      	bpl.n	800927e <_dtoa_r+0x50e>
 8009272:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009276:	f7f7 f9df 	bl	8000638 <__aeabi_dmul>
 800927a:	3601      	adds	r6, #1
 800927c:	2301      	movs	r3, #1
 800927e:	1064      	asrs	r4, r4, #1
 8009280:	3508      	adds	r5, #8
 8009282:	e73f      	b.n	8009104 <_dtoa_r+0x394>
 8009284:	2602      	movs	r6, #2
 8009286:	e742      	b.n	800910e <_dtoa_r+0x39e>
 8009288:	9c07      	ldr	r4, [sp, #28]
 800928a:	9704      	str	r7, [sp, #16]
 800928c:	e761      	b.n	8009152 <_dtoa_r+0x3e2>
 800928e:	4b27      	ldr	r3, [pc, #156]	@ (800932c <_dtoa_r+0x5bc>)
 8009290:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009292:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009296:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800929a:	4454      	add	r4, sl
 800929c:	2900      	cmp	r1, #0
 800929e:	d053      	beq.n	8009348 <_dtoa_r+0x5d8>
 80092a0:	4928      	ldr	r1, [pc, #160]	@ (8009344 <_dtoa_r+0x5d4>)
 80092a2:	2000      	movs	r0, #0
 80092a4:	f7f7 faf2 	bl	800088c <__aeabi_ddiv>
 80092a8:	4633      	mov	r3, r6
 80092aa:	462a      	mov	r2, r5
 80092ac:	f7f7 f80c 	bl	80002c8 <__aeabi_dsub>
 80092b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80092b4:	4656      	mov	r6, sl
 80092b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092ba:	f7f7 fc6d 	bl	8000b98 <__aeabi_d2iz>
 80092be:	4605      	mov	r5, r0
 80092c0:	f7f7 f950 	bl	8000564 <__aeabi_i2d>
 80092c4:	4602      	mov	r2, r0
 80092c6:	460b      	mov	r3, r1
 80092c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092cc:	f7f6 fffc 	bl	80002c8 <__aeabi_dsub>
 80092d0:	3530      	adds	r5, #48	@ 0x30
 80092d2:	4602      	mov	r2, r0
 80092d4:	460b      	mov	r3, r1
 80092d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80092da:	f806 5b01 	strb.w	r5, [r6], #1
 80092de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80092e2:	f7f7 fc1b 	bl	8000b1c <__aeabi_dcmplt>
 80092e6:	2800      	cmp	r0, #0
 80092e8:	d171      	bne.n	80093ce <_dtoa_r+0x65e>
 80092ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092ee:	4911      	ldr	r1, [pc, #68]	@ (8009334 <_dtoa_r+0x5c4>)
 80092f0:	2000      	movs	r0, #0
 80092f2:	f7f6 ffe9 	bl	80002c8 <__aeabi_dsub>
 80092f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80092fa:	f7f7 fc0f 	bl	8000b1c <__aeabi_dcmplt>
 80092fe:	2800      	cmp	r0, #0
 8009300:	f040 8095 	bne.w	800942e <_dtoa_r+0x6be>
 8009304:	42a6      	cmp	r6, r4
 8009306:	f43f af50 	beq.w	80091aa <_dtoa_r+0x43a>
 800930a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800930e:	4b0a      	ldr	r3, [pc, #40]	@ (8009338 <_dtoa_r+0x5c8>)
 8009310:	2200      	movs	r2, #0
 8009312:	f7f7 f991 	bl	8000638 <__aeabi_dmul>
 8009316:	4b08      	ldr	r3, [pc, #32]	@ (8009338 <_dtoa_r+0x5c8>)
 8009318:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800931c:	2200      	movs	r2, #0
 800931e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009322:	f7f7 f989 	bl	8000638 <__aeabi_dmul>
 8009326:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800932a:	e7c4      	b.n	80092b6 <_dtoa_r+0x546>
 800932c:	0800b100 	.word	0x0800b100
 8009330:	0800b0d8 	.word	0x0800b0d8
 8009334:	3ff00000 	.word	0x3ff00000
 8009338:	40240000 	.word	0x40240000
 800933c:	401c0000 	.word	0x401c0000
 8009340:	40140000 	.word	0x40140000
 8009344:	3fe00000 	.word	0x3fe00000
 8009348:	4631      	mov	r1, r6
 800934a:	4628      	mov	r0, r5
 800934c:	f7f7 f974 	bl	8000638 <__aeabi_dmul>
 8009350:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009354:	9415      	str	r4, [sp, #84]	@ 0x54
 8009356:	4656      	mov	r6, sl
 8009358:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800935c:	f7f7 fc1c 	bl	8000b98 <__aeabi_d2iz>
 8009360:	4605      	mov	r5, r0
 8009362:	f7f7 f8ff 	bl	8000564 <__aeabi_i2d>
 8009366:	4602      	mov	r2, r0
 8009368:	460b      	mov	r3, r1
 800936a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800936e:	f7f6 ffab 	bl	80002c8 <__aeabi_dsub>
 8009372:	3530      	adds	r5, #48	@ 0x30
 8009374:	f806 5b01 	strb.w	r5, [r6], #1
 8009378:	4602      	mov	r2, r0
 800937a:	460b      	mov	r3, r1
 800937c:	42a6      	cmp	r6, r4
 800937e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009382:	f04f 0200 	mov.w	r2, #0
 8009386:	d124      	bne.n	80093d2 <_dtoa_r+0x662>
 8009388:	4bac      	ldr	r3, [pc, #688]	@ (800963c <_dtoa_r+0x8cc>)
 800938a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800938e:	f7f6 ff9d 	bl	80002cc <__adddf3>
 8009392:	4602      	mov	r2, r0
 8009394:	460b      	mov	r3, r1
 8009396:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800939a:	f7f7 fbdd 	bl	8000b58 <__aeabi_dcmpgt>
 800939e:	2800      	cmp	r0, #0
 80093a0:	d145      	bne.n	800942e <_dtoa_r+0x6be>
 80093a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80093a6:	49a5      	ldr	r1, [pc, #660]	@ (800963c <_dtoa_r+0x8cc>)
 80093a8:	2000      	movs	r0, #0
 80093aa:	f7f6 ff8d 	bl	80002c8 <__aeabi_dsub>
 80093ae:	4602      	mov	r2, r0
 80093b0:	460b      	mov	r3, r1
 80093b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093b6:	f7f7 fbb1 	bl	8000b1c <__aeabi_dcmplt>
 80093ba:	2800      	cmp	r0, #0
 80093bc:	f43f aef5 	beq.w	80091aa <_dtoa_r+0x43a>
 80093c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80093c2:	1e73      	subs	r3, r6, #1
 80093c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80093c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80093ca:	2b30      	cmp	r3, #48	@ 0x30
 80093cc:	d0f8      	beq.n	80093c0 <_dtoa_r+0x650>
 80093ce:	9f04      	ldr	r7, [sp, #16]
 80093d0:	e73e      	b.n	8009250 <_dtoa_r+0x4e0>
 80093d2:	4b9b      	ldr	r3, [pc, #620]	@ (8009640 <_dtoa_r+0x8d0>)
 80093d4:	f7f7 f930 	bl	8000638 <__aeabi_dmul>
 80093d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093dc:	e7bc      	b.n	8009358 <_dtoa_r+0x5e8>
 80093de:	d10c      	bne.n	80093fa <_dtoa_r+0x68a>
 80093e0:	4b98      	ldr	r3, [pc, #608]	@ (8009644 <_dtoa_r+0x8d4>)
 80093e2:	2200      	movs	r2, #0
 80093e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093e8:	f7f7 f926 	bl	8000638 <__aeabi_dmul>
 80093ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093f0:	f7f7 fba8 	bl	8000b44 <__aeabi_dcmpge>
 80093f4:	2800      	cmp	r0, #0
 80093f6:	f000 8157 	beq.w	80096a8 <_dtoa_r+0x938>
 80093fa:	2400      	movs	r4, #0
 80093fc:	4625      	mov	r5, r4
 80093fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009400:	43db      	mvns	r3, r3
 8009402:	9304      	str	r3, [sp, #16]
 8009404:	4656      	mov	r6, sl
 8009406:	2700      	movs	r7, #0
 8009408:	4621      	mov	r1, r4
 800940a:	4658      	mov	r0, fp
 800940c:	f000 fbb4 	bl	8009b78 <_Bfree>
 8009410:	2d00      	cmp	r5, #0
 8009412:	d0dc      	beq.n	80093ce <_dtoa_r+0x65e>
 8009414:	b12f      	cbz	r7, 8009422 <_dtoa_r+0x6b2>
 8009416:	42af      	cmp	r7, r5
 8009418:	d003      	beq.n	8009422 <_dtoa_r+0x6b2>
 800941a:	4639      	mov	r1, r7
 800941c:	4658      	mov	r0, fp
 800941e:	f000 fbab 	bl	8009b78 <_Bfree>
 8009422:	4629      	mov	r1, r5
 8009424:	4658      	mov	r0, fp
 8009426:	f000 fba7 	bl	8009b78 <_Bfree>
 800942a:	e7d0      	b.n	80093ce <_dtoa_r+0x65e>
 800942c:	9704      	str	r7, [sp, #16]
 800942e:	4633      	mov	r3, r6
 8009430:	461e      	mov	r6, r3
 8009432:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009436:	2a39      	cmp	r2, #57	@ 0x39
 8009438:	d107      	bne.n	800944a <_dtoa_r+0x6da>
 800943a:	459a      	cmp	sl, r3
 800943c:	d1f8      	bne.n	8009430 <_dtoa_r+0x6c0>
 800943e:	9a04      	ldr	r2, [sp, #16]
 8009440:	3201      	adds	r2, #1
 8009442:	9204      	str	r2, [sp, #16]
 8009444:	2230      	movs	r2, #48	@ 0x30
 8009446:	f88a 2000 	strb.w	r2, [sl]
 800944a:	781a      	ldrb	r2, [r3, #0]
 800944c:	3201      	adds	r2, #1
 800944e:	701a      	strb	r2, [r3, #0]
 8009450:	e7bd      	b.n	80093ce <_dtoa_r+0x65e>
 8009452:	4b7b      	ldr	r3, [pc, #492]	@ (8009640 <_dtoa_r+0x8d0>)
 8009454:	2200      	movs	r2, #0
 8009456:	f7f7 f8ef 	bl	8000638 <__aeabi_dmul>
 800945a:	2200      	movs	r2, #0
 800945c:	2300      	movs	r3, #0
 800945e:	4604      	mov	r4, r0
 8009460:	460d      	mov	r5, r1
 8009462:	f7f7 fb51 	bl	8000b08 <__aeabi_dcmpeq>
 8009466:	2800      	cmp	r0, #0
 8009468:	f43f aebb 	beq.w	80091e2 <_dtoa_r+0x472>
 800946c:	e6f0      	b.n	8009250 <_dtoa_r+0x4e0>
 800946e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009470:	2a00      	cmp	r2, #0
 8009472:	f000 80db 	beq.w	800962c <_dtoa_r+0x8bc>
 8009476:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009478:	2a01      	cmp	r2, #1
 800947a:	f300 80bf 	bgt.w	80095fc <_dtoa_r+0x88c>
 800947e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009480:	2a00      	cmp	r2, #0
 8009482:	f000 80b7 	beq.w	80095f4 <_dtoa_r+0x884>
 8009486:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800948a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800948c:	4646      	mov	r6, r8
 800948e:	9a08      	ldr	r2, [sp, #32]
 8009490:	2101      	movs	r1, #1
 8009492:	441a      	add	r2, r3
 8009494:	4658      	mov	r0, fp
 8009496:	4498      	add	r8, r3
 8009498:	9208      	str	r2, [sp, #32]
 800949a:	f000 fc21 	bl	8009ce0 <__i2b>
 800949e:	4605      	mov	r5, r0
 80094a0:	b15e      	cbz	r6, 80094ba <_dtoa_r+0x74a>
 80094a2:	9b08      	ldr	r3, [sp, #32]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	dd08      	ble.n	80094ba <_dtoa_r+0x74a>
 80094a8:	42b3      	cmp	r3, r6
 80094aa:	9a08      	ldr	r2, [sp, #32]
 80094ac:	bfa8      	it	ge
 80094ae:	4633      	movge	r3, r6
 80094b0:	eba8 0803 	sub.w	r8, r8, r3
 80094b4:	1af6      	subs	r6, r6, r3
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	9308      	str	r3, [sp, #32]
 80094ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094bc:	b1f3      	cbz	r3, 80094fc <_dtoa_r+0x78c>
 80094be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	f000 80b7 	beq.w	8009634 <_dtoa_r+0x8c4>
 80094c6:	b18c      	cbz	r4, 80094ec <_dtoa_r+0x77c>
 80094c8:	4629      	mov	r1, r5
 80094ca:	4622      	mov	r2, r4
 80094cc:	4658      	mov	r0, fp
 80094ce:	f000 fcc7 	bl	8009e60 <__pow5mult>
 80094d2:	464a      	mov	r2, r9
 80094d4:	4601      	mov	r1, r0
 80094d6:	4605      	mov	r5, r0
 80094d8:	4658      	mov	r0, fp
 80094da:	f000 fc17 	bl	8009d0c <__multiply>
 80094de:	4649      	mov	r1, r9
 80094e0:	9004      	str	r0, [sp, #16]
 80094e2:	4658      	mov	r0, fp
 80094e4:	f000 fb48 	bl	8009b78 <_Bfree>
 80094e8:	9b04      	ldr	r3, [sp, #16]
 80094ea:	4699      	mov	r9, r3
 80094ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094ee:	1b1a      	subs	r2, r3, r4
 80094f0:	d004      	beq.n	80094fc <_dtoa_r+0x78c>
 80094f2:	4649      	mov	r1, r9
 80094f4:	4658      	mov	r0, fp
 80094f6:	f000 fcb3 	bl	8009e60 <__pow5mult>
 80094fa:	4681      	mov	r9, r0
 80094fc:	2101      	movs	r1, #1
 80094fe:	4658      	mov	r0, fp
 8009500:	f000 fbee 	bl	8009ce0 <__i2b>
 8009504:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009506:	4604      	mov	r4, r0
 8009508:	2b00      	cmp	r3, #0
 800950a:	f000 81cf 	beq.w	80098ac <_dtoa_r+0xb3c>
 800950e:	461a      	mov	r2, r3
 8009510:	4601      	mov	r1, r0
 8009512:	4658      	mov	r0, fp
 8009514:	f000 fca4 	bl	8009e60 <__pow5mult>
 8009518:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800951a:	2b01      	cmp	r3, #1
 800951c:	4604      	mov	r4, r0
 800951e:	f300 8095 	bgt.w	800964c <_dtoa_r+0x8dc>
 8009522:	9b02      	ldr	r3, [sp, #8]
 8009524:	2b00      	cmp	r3, #0
 8009526:	f040 8087 	bne.w	8009638 <_dtoa_r+0x8c8>
 800952a:	9b03      	ldr	r3, [sp, #12]
 800952c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009530:	2b00      	cmp	r3, #0
 8009532:	f040 8089 	bne.w	8009648 <_dtoa_r+0x8d8>
 8009536:	9b03      	ldr	r3, [sp, #12]
 8009538:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800953c:	0d1b      	lsrs	r3, r3, #20
 800953e:	051b      	lsls	r3, r3, #20
 8009540:	b12b      	cbz	r3, 800954e <_dtoa_r+0x7de>
 8009542:	9b08      	ldr	r3, [sp, #32]
 8009544:	3301      	adds	r3, #1
 8009546:	9308      	str	r3, [sp, #32]
 8009548:	f108 0801 	add.w	r8, r8, #1
 800954c:	2301      	movs	r3, #1
 800954e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009550:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009552:	2b00      	cmp	r3, #0
 8009554:	f000 81b0 	beq.w	80098b8 <_dtoa_r+0xb48>
 8009558:	6923      	ldr	r3, [r4, #16]
 800955a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800955e:	6918      	ldr	r0, [r3, #16]
 8009560:	f000 fb72 	bl	8009c48 <__hi0bits>
 8009564:	f1c0 0020 	rsb	r0, r0, #32
 8009568:	9b08      	ldr	r3, [sp, #32]
 800956a:	4418      	add	r0, r3
 800956c:	f010 001f 	ands.w	r0, r0, #31
 8009570:	d077      	beq.n	8009662 <_dtoa_r+0x8f2>
 8009572:	f1c0 0320 	rsb	r3, r0, #32
 8009576:	2b04      	cmp	r3, #4
 8009578:	dd6b      	ble.n	8009652 <_dtoa_r+0x8e2>
 800957a:	9b08      	ldr	r3, [sp, #32]
 800957c:	f1c0 001c 	rsb	r0, r0, #28
 8009580:	4403      	add	r3, r0
 8009582:	4480      	add	r8, r0
 8009584:	4406      	add	r6, r0
 8009586:	9308      	str	r3, [sp, #32]
 8009588:	f1b8 0f00 	cmp.w	r8, #0
 800958c:	dd05      	ble.n	800959a <_dtoa_r+0x82a>
 800958e:	4649      	mov	r1, r9
 8009590:	4642      	mov	r2, r8
 8009592:	4658      	mov	r0, fp
 8009594:	f000 fcbe 	bl	8009f14 <__lshift>
 8009598:	4681      	mov	r9, r0
 800959a:	9b08      	ldr	r3, [sp, #32]
 800959c:	2b00      	cmp	r3, #0
 800959e:	dd05      	ble.n	80095ac <_dtoa_r+0x83c>
 80095a0:	4621      	mov	r1, r4
 80095a2:	461a      	mov	r2, r3
 80095a4:	4658      	mov	r0, fp
 80095a6:	f000 fcb5 	bl	8009f14 <__lshift>
 80095aa:	4604      	mov	r4, r0
 80095ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d059      	beq.n	8009666 <_dtoa_r+0x8f6>
 80095b2:	4621      	mov	r1, r4
 80095b4:	4648      	mov	r0, r9
 80095b6:	f000 fd19 	bl	8009fec <__mcmp>
 80095ba:	2800      	cmp	r0, #0
 80095bc:	da53      	bge.n	8009666 <_dtoa_r+0x8f6>
 80095be:	1e7b      	subs	r3, r7, #1
 80095c0:	9304      	str	r3, [sp, #16]
 80095c2:	4649      	mov	r1, r9
 80095c4:	2300      	movs	r3, #0
 80095c6:	220a      	movs	r2, #10
 80095c8:	4658      	mov	r0, fp
 80095ca:	f000 faf7 	bl	8009bbc <__multadd>
 80095ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095d0:	4681      	mov	r9, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	f000 8172 	beq.w	80098bc <_dtoa_r+0xb4c>
 80095d8:	2300      	movs	r3, #0
 80095da:	4629      	mov	r1, r5
 80095dc:	220a      	movs	r2, #10
 80095de:	4658      	mov	r0, fp
 80095e0:	f000 faec 	bl	8009bbc <__multadd>
 80095e4:	9b00      	ldr	r3, [sp, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	4605      	mov	r5, r0
 80095ea:	dc67      	bgt.n	80096bc <_dtoa_r+0x94c>
 80095ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095ee:	2b02      	cmp	r3, #2
 80095f0:	dc41      	bgt.n	8009676 <_dtoa_r+0x906>
 80095f2:	e063      	b.n	80096bc <_dtoa_r+0x94c>
 80095f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80095f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80095fa:	e746      	b.n	800948a <_dtoa_r+0x71a>
 80095fc:	9b07      	ldr	r3, [sp, #28]
 80095fe:	1e5c      	subs	r4, r3, #1
 8009600:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009602:	42a3      	cmp	r3, r4
 8009604:	bfbf      	itttt	lt
 8009606:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009608:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800960a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800960c:	1ae3      	sublt	r3, r4, r3
 800960e:	bfb4      	ite	lt
 8009610:	18d2      	addlt	r2, r2, r3
 8009612:	1b1c      	subge	r4, r3, r4
 8009614:	9b07      	ldr	r3, [sp, #28]
 8009616:	bfbc      	itt	lt
 8009618:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800961a:	2400      	movlt	r4, #0
 800961c:	2b00      	cmp	r3, #0
 800961e:	bfb5      	itete	lt
 8009620:	eba8 0603 	sublt.w	r6, r8, r3
 8009624:	9b07      	ldrge	r3, [sp, #28]
 8009626:	2300      	movlt	r3, #0
 8009628:	4646      	movge	r6, r8
 800962a:	e730      	b.n	800948e <_dtoa_r+0x71e>
 800962c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800962e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009630:	4646      	mov	r6, r8
 8009632:	e735      	b.n	80094a0 <_dtoa_r+0x730>
 8009634:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009636:	e75c      	b.n	80094f2 <_dtoa_r+0x782>
 8009638:	2300      	movs	r3, #0
 800963a:	e788      	b.n	800954e <_dtoa_r+0x7de>
 800963c:	3fe00000 	.word	0x3fe00000
 8009640:	40240000 	.word	0x40240000
 8009644:	40140000 	.word	0x40140000
 8009648:	9b02      	ldr	r3, [sp, #8]
 800964a:	e780      	b.n	800954e <_dtoa_r+0x7de>
 800964c:	2300      	movs	r3, #0
 800964e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009650:	e782      	b.n	8009558 <_dtoa_r+0x7e8>
 8009652:	d099      	beq.n	8009588 <_dtoa_r+0x818>
 8009654:	9a08      	ldr	r2, [sp, #32]
 8009656:	331c      	adds	r3, #28
 8009658:	441a      	add	r2, r3
 800965a:	4498      	add	r8, r3
 800965c:	441e      	add	r6, r3
 800965e:	9208      	str	r2, [sp, #32]
 8009660:	e792      	b.n	8009588 <_dtoa_r+0x818>
 8009662:	4603      	mov	r3, r0
 8009664:	e7f6      	b.n	8009654 <_dtoa_r+0x8e4>
 8009666:	9b07      	ldr	r3, [sp, #28]
 8009668:	9704      	str	r7, [sp, #16]
 800966a:	2b00      	cmp	r3, #0
 800966c:	dc20      	bgt.n	80096b0 <_dtoa_r+0x940>
 800966e:	9300      	str	r3, [sp, #0]
 8009670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009672:	2b02      	cmp	r3, #2
 8009674:	dd1e      	ble.n	80096b4 <_dtoa_r+0x944>
 8009676:	9b00      	ldr	r3, [sp, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	f47f aec0 	bne.w	80093fe <_dtoa_r+0x68e>
 800967e:	4621      	mov	r1, r4
 8009680:	2205      	movs	r2, #5
 8009682:	4658      	mov	r0, fp
 8009684:	f000 fa9a 	bl	8009bbc <__multadd>
 8009688:	4601      	mov	r1, r0
 800968a:	4604      	mov	r4, r0
 800968c:	4648      	mov	r0, r9
 800968e:	f000 fcad 	bl	8009fec <__mcmp>
 8009692:	2800      	cmp	r0, #0
 8009694:	f77f aeb3 	ble.w	80093fe <_dtoa_r+0x68e>
 8009698:	4656      	mov	r6, sl
 800969a:	2331      	movs	r3, #49	@ 0x31
 800969c:	f806 3b01 	strb.w	r3, [r6], #1
 80096a0:	9b04      	ldr	r3, [sp, #16]
 80096a2:	3301      	adds	r3, #1
 80096a4:	9304      	str	r3, [sp, #16]
 80096a6:	e6ae      	b.n	8009406 <_dtoa_r+0x696>
 80096a8:	9c07      	ldr	r4, [sp, #28]
 80096aa:	9704      	str	r7, [sp, #16]
 80096ac:	4625      	mov	r5, r4
 80096ae:	e7f3      	b.n	8009698 <_dtoa_r+0x928>
 80096b0:	9b07      	ldr	r3, [sp, #28]
 80096b2:	9300      	str	r3, [sp, #0]
 80096b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f000 8104 	beq.w	80098c4 <_dtoa_r+0xb54>
 80096bc:	2e00      	cmp	r6, #0
 80096be:	dd05      	ble.n	80096cc <_dtoa_r+0x95c>
 80096c0:	4629      	mov	r1, r5
 80096c2:	4632      	mov	r2, r6
 80096c4:	4658      	mov	r0, fp
 80096c6:	f000 fc25 	bl	8009f14 <__lshift>
 80096ca:	4605      	mov	r5, r0
 80096cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d05a      	beq.n	8009788 <_dtoa_r+0xa18>
 80096d2:	6869      	ldr	r1, [r5, #4]
 80096d4:	4658      	mov	r0, fp
 80096d6:	f000 fa0f 	bl	8009af8 <_Balloc>
 80096da:	4606      	mov	r6, r0
 80096dc:	b928      	cbnz	r0, 80096ea <_dtoa_r+0x97a>
 80096de:	4b84      	ldr	r3, [pc, #528]	@ (80098f0 <_dtoa_r+0xb80>)
 80096e0:	4602      	mov	r2, r0
 80096e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80096e6:	f7ff bb5a 	b.w	8008d9e <_dtoa_r+0x2e>
 80096ea:	692a      	ldr	r2, [r5, #16]
 80096ec:	3202      	adds	r2, #2
 80096ee:	0092      	lsls	r2, r2, #2
 80096f0:	f105 010c 	add.w	r1, r5, #12
 80096f4:	300c      	adds	r0, #12
 80096f6:	f7ff faa4 	bl	8008c42 <memcpy>
 80096fa:	2201      	movs	r2, #1
 80096fc:	4631      	mov	r1, r6
 80096fe:	4658      	mov	r0, fp
 8009700:	f000 fc08 	bl	8009f14 <__lshift>
 8009704:	f10a 0301 	add.w	r3, sl, #1
 8009708:	9307      	str	r3, [sp, #28]
 800970a:	9b00      	ldr	r3, [sp, #0]
 800970c:	4453      	add	r3, sl
 800970e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009710:	9b02      	ldr	r3, [sp, #8]
 8009712:	f003 0301 	and.w	r3, r3, #1
 8009716:	462f      	mov	r7, r5
 8009718:	930a      	str	r3, [sp, #40]	@ 0x28
 800971a:	4605      	mov	r5, r0
 800971c:	9b07      	ldr	r3, [sp, #28]
 800971e:	4621      	mov	r1, r4
 8009720:	3b01      	subs	r3, #1
 8009722:	4648      	mov	r0, r9
 8009724:	9300      	str	r3, [sp, #0]
 8009726:	f7ff fa9a 	bl	8008c5e <quorem>
 800972a:	4639      	mov	r1, r7
 800972c:	9002      	str	r0, [sp, #8]
 800972e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009732:	4648      	mov	r0, r9
 8009734:	f000 fc5a 	bl	8009fec <__mcmp>
 8009738:	462a      	mov	r2, r5
 800973a:	9008      	str	r0, [sp, #32]
 800973c:	4621      	mov	r1, r4
 800973e:	4658      	mov	r0, fp
 8009740:	f000 fc70 	bl	800a024 <__mdiff>
 8009744:	68c2      	ldr	r2, [r0, #12]
 8009746:	4606      	mov	r6, r0
 8009748:	bb02      	cbnz	r2, 800978c <_dtoa_r+0xa1c>
 800974a:	4601      	mov	r1, r0
 800974c:	4648      	mov	r0, r9
 800974e:	f000 fc4d 	bl	8009fec <__mcmp>
 8009752:	4602      	mov	r2, r0
 8009754:	4631      	mov	r1, r6
 8009756:	4658      	mov	r0, fp
 8009758:	920e      	str	r2, [sp, #56]	@ 0x38
 800975a:	f000 fa0d 	bl	8009b78 <_Bfree>
 800975e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009760:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009762:	9e07      	ldr	r6, [sp, #28]
 8009764:	ea43 0102 	orr.w	r1, r3, r2
 8009768:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800976a:	4319      	orrs	r1, r3
 800976c:	d110      	bne.n	8009790 <_dtoa_r+0xa20>
 800976e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009772:	d029      	beq.n	80097c8 <_dtoa_r+0xa58>
 8009774:	9b08      	ldr	r3, [sp, #32]
 8009776:	2b00      	cmp	r3, #0
 8009778:	dd02      	ble.n	8009780 <_dtoa_r+0xa10>
 800977a:	9b02      	ldr	r3, [sp, #8]
 800977c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009780:	9b00      	ldr	r3, [sp, #0]
 8009782:	f883 8000 	strb.w	r8, [r3]
 8009786:	e63f      	b.n	8009408 <_dtoa_r+0x698>
 8009788:	4628      	mov	r0, r5
 800978a:	e7bb      	b.n	8009704 <_dtoa_r+0x994>
 800978c:	2201      	movs	r2, #1
 800978e:	e7e1      	b.n	8009754 <_dtoa_r+0x9e4>
 8009790:	9b08      	ldr	r3, [sp, #32]
 8009792:	2b00      	cmp	r3, #0
 8009794:	db04      	blt.n	80097a0 <_dtoa_r+0xa30>
 8009796:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009798:	430b      	orrs	r3, r1
 800979a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800979c:	430b      	orrs	r3, r1
 800979e:	d120      	bne.n	80097e2 <_dtoa_r+0xa72>
 80097a0:	2a00      	cmp	r2, #0
 80097a2:	dded      	ble.n	8009780 <_dtoa_r+0xa10>
 80097a4:	4649      	mov	r1, r9
 80097a6:	2201      	movs	r2, #1
 80097a8:	4658      	mov	r0, fp
 80097aa:	f000 fbb3 	bl	8009f14 <__lshift>
 80097ae:	4621      	mov	r1, r4
 80097b0:	4681      	mov	r9, r0
 80097b2:	f000 fc1b 	bl	8009fec <__mcmp>
 80097b6:	2800      	cmp	r0, #0
 80097b8:	dc03      	bgt.n	80097c2 <_dtoa_r+0xa52>
 80097ba:	d1e1      	bne.n	8009780 <_dtoa_r+0xa10>
 80097bc:	f018 0f01 	tst.w	r8, #1
 80097c0:	d0de      	beq.n	8009780 <_dtoa_r+0xa10>
 80097c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80097c6:	d1d8      	bne.n	800977a <_dtoa_r+0xa0a>
 80097c8:	9a00      	ldr	r2, [sp, #0]
 80097ca:	2339      	movs	r3, #57	@ 0x39
 80097cc:	7013      	strb	r3, [r2, #0]
 80097ce:	4633      	mov	r3, r6
 80097d0:	461e      	mov	r6, r3
 80097d2:	3b01      	subs	r3, #1
 80097d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80097d8:	2a39      	cmp	r2, #57	@ 0x39
 80097da:	d052      	beq.n	8009882 <_dtoa_r+0xb12>
 80097dc:	3201      	adds	r2, #1
 80097de:	701a      	strb	r2, [r3, #0]
 80097e0:	e612      	b.n	8009408 <_dtoa_r+0x698>
 80097e2:	2a00      	cmp	r2, #0
 80097e4:	dd07      	ble.n	80097f6 <_dtoa_r+0xa86>
 80097e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80097ea:	d0ed      	beq.n	80097c8 <_dtoa_r+0xa58>
 80097ec:	9a00      	ldr	r2, [sp, #0]
 80097ee:	f108 0301 	add.w	r3, r8, #1
 80097f2:	7013      	strb	r3, [r2, #0]
 80097f4:	e608      	b.n	8009408 <_dtoa_r+0x698>
 80097f6:	9b07      	ldr	r3, [sp, #28]
 80097f8:	9a07      	ldr	r2, [sp, #28]
 80097fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80097fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009800:	4293      	cmp	r3, r2
 8009802:	d028      	beq.n	8009856 <_dtoa_r+0xae6>
 8009804:	4649      	mov	r1, r9
 8009806:	2300      	movs	r3, #0
 8009808:	220a      	movs	r2, #10
 800980a:	4658      	mov	r0, fp
 800980c:	f000 f9d6 	bl	8009bbc <__multadd>
 8009810:	42af      	cmp	r7, r5
 8009812:	4681      	mov	r9, r0
 8009814:	f04f 0300 	mov.w	r3, #0
 8009818:	f04f 020a 	mov.w	r2, #10
 800981c:	4639      	mov	r1, r7
 800981e:	4658      	mov	r0, fp
 8009820:	d107      	bne.n	8009832 <_dtoa_r+0xac2>
 8009822:	f000 f9cb 	bl	8009bbc <__multadd>
 8009826:	4607      	mov	r7, r0
 8009828:	4605      	mov	r5, r0
 800982a:	9b07      	ldr	r3, [sp, #28]
 800982c:	3301      	adds	r3, #1
 800982e:	9307      	str	r3, [sp, #28]
 8009830:	e774      	b.n	800971c <_dtoa_r+0x9ac>
 8009832:	f000 f9c3 	bl	8009bbc <__multadd>
 8009836:	4629      	mov	r1, r5
 8009838:	4607      	mov	r7, r0
 800983a:	2300      	movs	r3, #0
 800983c:	220a      	movs	r2, #10
 800983e:	4658      	mov	r0, fp
 8009840:	f000 f9bc 	bl	8009bbc <__multadd>
 8009844:	4605      	mov	r5, r0
 8009846:	e7f0      	b.n	800982a <_dtoa_r+0xaba>
 8009848:	9b00      	ldr	r3, [sp, #0]
 800984a:	2b00      	cmp	r3, #0
 800984c:	bfcc      	ite	gt
 800984e:	461e      	movgt	r6, r3
 8009850:	2601      	movle	r6, #1
 8009852:	4456      	add	r6, sl
 8009854:	2700      	movs	r7, #0
 8009856:	4649      	mov	r1, r9
 8009858:	2201      	movs	r2, #1
 800985a:	4658      	mov	r0, fp
 800985c:	f000 fb5a 	bl	8009f14 <__lshift>
 8009860:	4621      	mov	r1, r4
 8009862:	4681      	mov	r9, r0
 8009864:	f000 fbc2 	bl	8009fec <__mcmp>
 8009868:	2800      	cmp	r0, #0
 800986a:	dcb0      	bgt.n	80097ce <_dtoa_r+0xa5e>
 800986c:	d102      	bne.n	8009874 <_dtoa_r+0xb04>
 800986e:	f018 0f01 	tst.w	r8, #1
 8009872:	d1ac      	bne.n	80097ce <_dtoa_r+0xa5e>
 8009874:	4633      	mov	r3, r6
 8009876:	461e      	mov	r6, r3
 8009878:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800987c:	2a30      	cmp	r2, #48	@ 0x30
 800987e:	d0fa      	beq.n	8009876 <_dtoa_r+0xb06>
 8009880:	e5c2      	b.n	8009408 <_dtoa_r+0x698>
 8009882:	459a      	cmp	sl, r3
 8009884:	d1a4      	bne.n	80097d0 <_dtoa_r+0xa60>
 8009886:	9b04      	ldr	r3, [sp, #16]
 8009888:	3301      	adds	r3, #1
 800988a:	9304      	str	r3, [sp, #16]
 800988c:	2331      	movs	r3, #49	@ 0x31
 800988e:	f88a 3000 	strb.w	r3, [sl]
 8009892:	e5b9      	b.n	8009408 <_dtoa_r+0x698>
 8009894:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009896:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80098f4 <_dtoa_r+0xb84>
 800989a:	b11b      	cbz	r3, 80098a4 <_dtoa_r+0xb34>
 800989c:	f10a 0308 	add.w	r3, sl, #8
 80098a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80098a2:	6013      	str	r3, [r2, #0]
 80098a4:	4650      	mov	r0, sl
 80098a6:	b019      	add	sp, #100	@ 0x64
 80098a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	f77f ae37 	ble.w	8009522 <_dtoa_r+0x7b2>
 80098b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80098b8:	2001      	movs	r0, #1
 80098ba:	e655      	b.n	8009568 <_dtoa_r+0x7f8>
 80098bc:	9b00      	ldr	r3, [sp, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	f77f aed6 	ble.w	8009670 <_dtoa_r+0x900>
 80098c4:	4656      	mov	r6, sl
 80098c6:	4621      	mov	r1, r4
 80098c8:	4648      	mov	r0, r9
 80098ca:	f7ff f9c8 	bl	8008c5e <quorem>
 80098ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80098d2:	f806 8b01 	strb.w	r8, [r6], #1
 80098d6:	9b00      	ldr	r3, [sp, #0]
 80098d8:	eba6 020a 	sub.w	r2, r6, sl
 80098dc:	4293      	cmp	r3, r2
 80098de:	ddb3      	ble.n	8009848 <_dtoa_r+0xad8>
 80098e0:	4649      	mov	r1, r9
 80098e2:	2300      	movs	r3, #0
 80098e4:	220a      	movs	r2, #10
 80098e6:	4658      	mov	r0, fp
 80098e8:	f000 f968 	bl	8009bbc <__multadd>
 80098ec:	4681      	mov	r9, r0
 80098ee:	e7ea      	b.n	80098c6 <_dtoa_r+0xb56>
 80098f0:	0800b061 	.word	0x0800b061
 80098f4:	0800afe5 	.word	0x0800afe5

080098f8 <_free_r>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	4605      	mov	r5, r0
 80098fc:	2900      	cmp	r1, #0
 80098fe:	d041      	beq.n	8009984 <_free_r+0x8c>
 8009900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009904:	1f0c      	subs	r4, r1, #4
 8009906:	2b00      	cmp	r3, #0
 8009908:	bfb8      	it	lt
 800990a:	18e4      	addlt	r4, r4, r3
 800990c:	f000 f8e8 	bl	8009ae0 <__malloc_lock>
 8009910:	4a1d      	ldr	r2, [pc, #116]	@ (8009988 <_free_r+0x90>)
 8009912:	6813      	ldr	r3, [r2, #0]
 8009914:	b933      	cbnz	r3, 8009924 <_free_r+0x2c>
 8009916:	6063      	str	r3, [r4, #4]
 8009918:	6014      	str	r4, [r2, #0]
 800991a:	4628      	mov	r0, r5
 800991c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009920:	f000 b8e4 	b.w	8009aec <__malloc_unlock>
 8009924:	42a3      	cmp	r3, r4
 8009926:	d908      	bls.n	800993a <_free_r+0x42>
 8009928:	6820      	ldr	r0, [r4, #0]
 800992a:	1821      	adds	r1, r4, r0
 800992c:	428b      	cmp	r3, r1
 800992e:	bf01      	itttt	eq
 8009930:	6819      	ldreq	r1, [r3, #0]
 8009932:	685b      	ldreq	r3, [r3, #4]
 8009934:	1809      	addeq	r1, r1, r0
 8009936:	6021      	streq	r1, [r4, #0]
 8009938:	e7ed      	b.n	8009916 <_free_r+0x1e>
 800993a:	461a      	mov	r2, r3
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	b10b      	cbz	r3, 8009944 <_free_r+0x4c>
 8009940:	42a3      	cmp	r3, r4
 8009942:	d9fa      	bls.n	800993a <_free_r+0x42>
 8009944:	6811      	ldr	r1, [r2, #0]
 8009946:	1850      	adds	r0, r2, r1
 8009948:	42a0      	cmp	r0, r4
 800994a:	d10b      	bne.n	8009964 <_free_r+0x6c>
 800994c:	6820      	ldr	r0, [r4, #0]
 800994e:	4401      	add	r1, r0
 8009950:	1850      	adds	r0, r2, r1
 8009952:	4283      	cmp	r3, r0
 8009954:	6011      	str	r1, [r2, #0]
 8009956:	d1e0      	bne.n	800991a <_free_r+0x22>
 8009958:	6818      	ldr	r0, [r3, #0]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	6053      	str	r3, [r2, #4]
 800995e:	4408      	add	r0, r1
 8009960:	6010      	str	r0, [r2, #0]
 8009962:	e7da      	b.n	800991a <_free_r+0x22>
 8009964:	d902      	bls.n	800996c <_free_r+0x74>
 8009966:	230c      	movs	r3, #12
 8009968:	602b      	str	r3, [r5, #0]
 800996a:	e7d6      	b.n	800991a <_free_r+0x22>
 800996c:	6820      	ldr	r0, [r4, #0]
 800996e:	1821      	adds	r1, r4, r0
 8009970:	428b      	cmp	r3, r1
 8009972:	bf04      	itt	eq
 8009974:	6819      	ldreq	r1, [r3, #0]
 8009976:	685b      	ldreq	r3, [r3, #4]
 8009978:	6063      	str	r3, [r4, #4]
 800997a:	bf04      	itt	eq
 800997c:	1809      	addeq	r1, r1, r0
 800997e:	6021      	streq	r1, [r4, #0]
 8009980:	6054      	str	r4, [r2, #4]
 8009982:	e7ca      	b.n	800991a <_free_r+0x22>
 8009984:	bd38      	pop	{r3, r4, r5, pc}
 8009986:	bf00      	nop
 8009988:	200051d4 	.word	0x200051d4

0800998c <malloc>:
 800998c:	4b02      	ldr	r3, [pc, #8]	@ (8009998 <malloc+0xc>)
 800998e:	4601      	mov	r1, r0
 8009990:	6818      	ldr	r0, [r3, #0]
 8009992:	f000 b825 	b.w	80099e0 <_malloc_r>
 8009996:	bf00      	nop
 8009998:	20000018 	.word	0x20000018

0800999c <sbrk_aligned>:
 800999c:	b570      	push	{r4, r5, r6, lr}
 800999e:	4e0f      	ldr	r6, [pc, #60]	@ (80099dc <sbrk_aligned+0x40>)
 80099a0:	460c      	mov	r4, r1
 80099a2:	6831      	ldr	r1, [r6, #0]
 80099a4:	4605      	mov	r5, r0
 80099a6:	b911      	cbnz	r1, 80099ae <sbrk_aligned+0x12>
 80099a8:	f000 fe46 	bl	800a638 <_sbrk_r>
 80099ac:	6030      	str	r0, [r6, #0]
 80099ae:	4621      	mov	r1, r4
 80099b0:	4628      	mov	r0, r5
 80099b2:	f000 fe41 	bl	800a638 <_sbrk_r>
 80099b6:	1c43      	adds	r3, r0, #1
 80099b8:	d103      	bne.n	80099c2 <sbrk_aligned+0x26>
 80099ba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80099be:	4620      	mov	r0, r4
 80099c0:	bd70      	pop	{r4, r5, r6, pc}
 80099c2:	1cc4      	adds	r4, r0, #3
 80099c4:	f024 0403 	bic.w	r4, r4, #3
 80099c8:	42a0      	cmp	r0, r4
 80099ca:	d0f8      	beq.n	80099be <sbrk_aligned+0x22>
 80099cc:	1a21      	subs	r1, r4, r0
 80099ce:	4628      	mov	r0, r5
 80099d0:	f000 fe32 	bl	800a638 <_sbrk_r>
 80099d4:	3001      	adds	r0, #1
 80099d6:	d1f2      	bne.n	80099be <sbrk_aligned+0x22>
 80099d8:	e7ef      	b.n	80099ba <sbrk_aligned+0x1e>
 80099da:	bf00      	nop
 80099dc:	200051d0 	.word	0x200051d0

080099e0 <_malloc_r>:
 80099e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099e4:	1ccd      	adds	r5, r1, #3
 80099e6:	f025 0503 	bic.w	r5, r5, #3
 80099ea:	3508      	adds	r5, #8
 80099ec:	2d0c      	cmp	r5, #12
 80099ee:	bf38      	it	cc
 80099f0:	250c      	movcc	r5, #12
 80099f2:	2d00      	cmp	r5, #0
 80099f4:	4606      	mov	r6, r0
 80099f6:	db01      	blt.n	80099fc <_malloc_r+0x1c>
 80099f8:	42a9      	cmp	r1, r5
 80099fa:	d904      	bls.n	8009a06 <_malloc_r+0x26>
 80099fc:	230c      	movs	r3, #12
 80099fe:	6033      	str	r3, [r6, #0]
 8009a00:	2000      	movs	r0, #0
 8009a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009adc <_malloc_r+0xfc>
 8009a0a:	f000 f869 	bl	8009ae0 <__malloc_lock>
 8009a0e:	f8d8 3000 	ldr.w	r3, [r8]
 8009a12:	461c      	mov	r4, r3
 8009a14:	bb44      	cbnz	r4, 8009a68 <_malloc_r+0x88>
 8009a16:	4629      	mov	r1, r5
 8009a18:	4630      	mov	r0, r6
 8009a1a:	f7ff ffbf 	bl	800999c <sbrk_aligned>
 8009a1e:	1c43      	adds	r3, r0, #1
 8009a20:	4604      	mov	r4, r0
 8009a22:	d158      	bne.n	8009ad6 <_malloc_r+0xf6>
 8009a24:	f8d8 4000 	ldr.w	r4, [r8]
 8009a28:	4627      	mov	r7, r4
 8009a2a:	2f00      	cmp	r7, #0
 8009a2c:	d143      	bne.n	8009ab6 <_malloc_r+0xd6>
 8009a2e:	2c00      	cmp	r4, #0
 8009a30:	d04b      	beq.n	8009aca <_malloc_r+0xea>
 8009a32:	6823      	ldr	r3, [r4, #0]
 8009a34:	4639      	mov	r1, r7
 8009a36:	4630      	mov	r0, r6
 8009a38:	eb04 0903 	add.w	r9, r4, r3
 8009a3c:	f000 fdfc 	bl	800a638 <_sbrk_r>
 8009a40:	4581      	cmp	r9, r0
 8009a42:	d142      	bne.n	8009aca <_malloc_r+0xea>
 8009a44:	6821      	ldr	r1, [r4, #0]
 8009a46:	1a6d      	subs	r5, r5, r1
 8009a48:	4629      	mov	r1, r5
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	f7ff ffa6 	bl	800999c <sbrk_aligned>
 8009a50:	3001      	adds	r0, #1
 8009a52:	d03a      	beq.n	8009aca <_malloc_r+0xea>
 8009a54:	6823      	ldr	r3, [r4, #0]
 8009a56:	442b      	add	r3, r5
 8009a58:	6023      	str	r3, [r4, #0]
 8009a5a:	f8d8 3000 	ldr.w	r3, [r8]
 8009a5e:	685a      	ldr	r2, [r3, #4]
 8009a60:	bb62      	cbnz	r2, 8009abc <_malloc_r+0xdc>
 8009a62:	f8c8 7000 	str.w	r7, [r8]
 8009a66:	e00f      	b.n	8009a88 <_malloc_r+0xa8>
 8009a68:	6822      	ldr	r2, [r4, #0]
 8009a6a:	1b52      	subs	r2, r2, r5
 8009a6c:	d420      	bmi.n	8009ab0 <_malloc_r+0xd0>
 8009a6e:	2a0b      	cmp	r2, #11
 8009a70:	d917      	bls.n	8009aa2 <_malloc_r+0xc2>
 8009a72:	1961      	adds	r1, r4, r5
 8009a74:	42a3      	cmp	r3, r4
 8009a76:	6025      	str	r5, [r4, #0]
 8009a78:	bf18      	it	ne
 8009a7a:	6059      	strne	r1, [r3, #4]
 8009a7c:	6863      	ldr	r3, [r4, #4]
 8009a7e:	bf08      	it	eq
 8009a80:	f8c8 1000 	streq.w	r1, [r8]
 8009a84:	5162      	str	r2, [r4, r5]
 8009a86:	604b      	str	r3, [r1, #4]
 8009a88:	4630      	mov	r0, r6
 8009a8a:	f000 f82f 	bl	8009aec <__malloc_unlock>
 8009a8e:	f104 000b 	add.w	r0, r4, #11
 8009a92:	1d23      	adds	r3, r4, #4
 8009a94:	f020 0007 	bic.w	r0, r0, #7
 8009a98:	1ac2      	subs	r2, r0, r3
 8009a9a:	bf1c      	itt	ne
 8009a9c:	1a1b      	subne	r3, r3, r0
 8009a9e:	50a3      	strne	r3, [r4, r2]
 8009aa0:	e7af      	b.n	8009a02 <_malloc_r+0x22>
 8009aa2:	6862      	ldr	r2, [r4, #4]
 8009aa4:	42a3      	cmp	r3, r4
 8009aa6:	bf0c      	ite	eq
 8009aa8:	f8c8 2000 	streq.w	r2, [r8]
 8009aac:	605a      	strne	r2, [r3, #4]
 8009aae:	e7eb      	b.n	8009a88 <_malloc_r+0xa8>
 8009ab0:	4623      	mov	r3, r4
 8009ab2:	6864      	ldr	r4, [r4, #4]
 8009ab4:	e7ae      	b.n	8009a14 <_malloc_r+0x34>
 8009ab6:	463c      	mov	r4, r7
 8009ab8:	687f      	ldr	r7, [r7, #4]
 8009aba:	e7b6      	b.n	8009a2a <_malloc_r+0x4a>
 8009abc:	461a      	mov	r2, r3
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	42a3      	cmp	r3, r4
 8009ac2:	d1fb      	bne.n	8009abc <_malloc_r+0xdc>
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	6053      	str	r3, [r2, #4]
 8009ac8:	e7de      	b.n	8009a88 <_malloc_r+0xa8>
 8009aca:	230c      	movs	r3, #12
 8009acc:	6033      	str	r3, [r6, #0]
 8009ace:	4630      	mov	r0, r6
 8009ad0:	f000 f80c 	bl	8009aec <__malloc_unlock>
 8009ad4:	e794      	b.n	8009a00 <_malloc_r+0x20>
 8009ad6:	6005      	str	r5, [r0, #0]
 8009ad8:	e7d6      	b.n	8009a88 <_malloc_r+0xa8>
 8009ada:	bf00      	nop
 8009adc:	200051d4 	.word	0x200051d4

08009ae0 <__malloc_lock>:
 8009ae0:	4801      	ldr	r0, [pc, #4]	@ (8009ae8 <__malloc_lock+0x8>)
 8009ae2:	f7ff b8ac 	b.w	8008c3e <__retarget_lock_acquire_recursive>
 8009ae6:	bf00      	nop
 8009ae8:	200051cc 	.word	0x200051cc

08009aec <__malloc_unlock>:
 8009aec:	4801      	ldr	r0, [pc, #4]	@ (8009af4 <__malloc_unlock+0x8>)
 8009aee:	f7ff b8a7 	b.w	8008c40 <__retarget_lock_release_recursive>
 8009af2:	bf00      	nop
 8009af4:	200051cc 	.word	0x200051cc

08009af8 <_Balloc>:
 8009af8:	b570      	push	{r4, r5, r6, lr}
 8009afa:	69c6      	ldr	r6, [r0, #28]
 8009afc:	4604      	mov	r4, r0
 8009afe:	460d      	mov	r5, r1
 8009b00:	b976      	cbnz	r6, 8009b20 <_Balloc+0x28>
 8009b02:	2010      	movs	r0, #16
 8009b04:	f7ff ff42 	bl	800998c <malloc>
 8009b08:	4602      	mov	r2, r0
 8009b0a:	61e0      	str	r0, [r4, #28]
 8009b0c:	b920      	cbnz	r0, 8009b18 <_Balloc+0x20>
 8009b0e:	4b18      	ldr	r3, [pc, #96]	@ (8009b70 <_Balloc+0x78>)
 8009b10:	4818      	ldr	r0, [pc, #96]	@ (8009b74 <_Balloc+0x7c>)
 8009b12:	216b      	movs	r1, #107	@ 0x6b
 8009b14:	f000 fda0 	bl	800a658 <__assert_func>
 8009b18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b1c:	6006      	str	r6, [r0, #0]
 8009b1e:	60c6      	str	r6, [r0, #12]
 8009b20:	69e6      	ldr	r6, [r4, #28]
 8009b22:	68f3      	ldr	r3, [r6, #12]
 8009b24:	b183      	cbz	r3, 8009b48 <_Balloc+0x50>
 8009b26:	69e3      	ldr	r3, [r4, #28]
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b2e:	b9b8      	cbnz	r0, 8009b60 <_Balloc+0x68>
 8009b30:	2101      	movs	r1, #1
 8009b32:	fa01 f605 	lsl.w	r6, r1, r5
 8009b36:	1d72      	adds	r2, r6, #5
 8009b38:	0092      	lsls	r2, r2, #2
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	f000 fdaa 	bl	800a694 <_calloc_r>
 8009b40:	b160      	cbz	r0, 8009b5c <_Balloc+0x64>
 8009b42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b46:	e00e      	b.n	8009b66 <_Balloc+0x6e>
 8009b48:	2221      	movs	r2, #33	@ 0x21
 8009b4a:	2104      	movs	r1, #4
 8009b4c:	4620      	mov	r0, r4
 8009b4e:	f000 fda1 	bl	800a694 <_calloc_r>
 8009b52:	69e3      	ldr	r3, [r4, #28]
 8009b54:	60f0      	str	r0, [r6, #12]
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1e4      	bne.n	8009b26 <_Balloc+0x2e>
 8009b5c:	2000      	movs	r0, #0
 8009b5e:	bd70      	pop	{r4, r5, r6, pc}
 8009b60:	6802      	ldr	r2, [r0, #0]
 8009b62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b66:	2300      	movs	r3, #0
 8009b68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b6c:	e7f7      	b.n	8009b5e <_Balloc+0x66>
 8009b6e:	bf00      	nop
 8009b70:	0800aff2 	.word	0x0800aff2
 8009b74:	0800b072 	.word	0x0800b072

08009b78 <_Bfree>:
 8009b78:	b570      	push	{r4, r5, r6, lr}
 8009b7a:	69c6      	ldr	r6, [r0, #28]
 8009b7c:	4605      	mov	r5, r0
 8009b7e:	460c      	mov	r4, r1
 8009b80:	b976      	cbnz	r6, 8009ba0 <_Bfree+0x28>
 8009b82:	2010      	movs	r0, #16
 8009b84:	f7ff ff02 	bl	800998c <malloc>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	61e8      	str	r0, [r5, #28]
 8009b8c:	b920      	cbnz	r0, 8009b98 <_Bfree+0x20>
 8009b8e:	4b09      	ldr	r3, [pc, #36]	@ (8009bb4 <_Bfree+0x3c>)
 8009b90:	4809      	ldr	r0, [pc, #36]	@ (8009bb8 <_Bfree+0x40>)
 8009b92:	218f      	movs	r1, #143	@ 0x8f
 8009b94:	f000 fd60 	bl	800a658 <__assert_func>
 8009b98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b9c:	6006      	str	r6, [r0, #0]
 8009b9e:	60c6      	str	r6, [r0, #12]
 8009ba0:	b13c      	cbz	r4, 8009bb2 <_Bfree+0x3a>
 8009ba2:	69eb      	ldr	r3, [r5, #28]
 8009ba4:	6862      	ldr	r2, [r4, #4]
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009bac:	6021      	str	r1, [r4, #0]
 8009bae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009bb2:	bd70      	pop	{r4, r5, r6, pc}
 8009bb4:	0800aff2 	.word	0x0800aff2
 8009bb8:	0800b072 	.word	0x0800b072

08009bbc <__multadd>:
 8009bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc0:	690d      	ldr	r5, [r1, #16]
 8009bc2:	4607      	mov	r7, r0
 8009bc4:	460c      	mov	r4, r1
 8009bc6:	461e      	mov	r6, r3
 8009bc8:	f101 0c14 	add.w	ip, r1, #20
 8009bcc:	2000      	movs	r0, #0
 8009bce:	f8dc 3000 	ldr.w	r3, [ip]
 8009bd2:	b299      	uxth	r1, r3
 8009bd4:	fb02 6101 	mla	r1, r2, r1, r6
 8009bd8:	0c1e      	lsrs	r6, r3, #16
 8009bda:	0c0b      	lsrs	r3, r1, #16
 8009bdc:	fb02 3306 	mla	r3, r2, r6, r3
 8009be0:	b289      	uxth	r1, r1
 8009be2:	3001      	adds	r0, #1
 8009be4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009be8:	4285      	cmp	r5, r0
 8009bea:	f84c 1b04 	str.w	r1, [ip], #4
 8009bee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009bf2:	dcec      	bgt.n	8009bce <__multadd+0x12>
 8009bf4:	b30e      	cbz	r6, 8009c3a <__multadd+0x7e>
 8009bf6:	68a3      	ldr	r3, [r4, #8]
 8009bf8:	42ab      	cmp	r3, r5
 8009bfa:	dc19      	bgt.n	8009c30 <__multadd+0x74>
 8009bfc:	6861      	ldr	r1, [r4, #4]
 8009bfe:	4638      	mov	r0, r7
 8009c00:	3101      	adds	r1, #1
 8009c02:	f7ff ff79 	bl	8009af8 <_Balloc>
 8009c06:	4680      	mov	r8, r0
 8009c08:	b928      	cbnz	r0, 8009c16 <__multadd+0x5a>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8009c40 <__multadd+0x84>)
 8009c0e:	480d      	ldr	r0, [pc, #52]	@ (8009c44 <__multadd+0x88>)
 8009c10:	21ba      	movs	r1, #186	@ 0xba
 8009c12:	f000 fd21 	bl	800a658 <__assert_func>
 8009c16:	6922      	ldr	r2, [r4, #16]
 8009c18:	3202      	adds	r2, #2
 8009c1a:	f104 010c 	add.w	r1, r4, #12
 8009c1e:	0092      	lsls	r2, r2, #2
 8009c20:	300c      	adds	r0, #12
 8009c22:	f7ff f80e 	bl	8008c42 <memcpy>
 8009c26:	4621      	mov	r1, r4
 8009c28:	4638      	mov	r0, r7
 8009c2a:	f7ff ffa5 	bl	8009b78 <_Bfree>
 8009c2e:	4644      	mov	r4, r8
 8009c30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c34:	3501      	adds	r5, #1
 8009c36:	615e      	str	r6, [r3, #20]
 8009c38:	6125      	str	r5, [r4, #16]
 8009c3a:	4620      	mov	r0, r4
 8009c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c40:	0800b061 	.word	0x0800b061
 8009c44:	0800b072 	.word	0x0800b072

08009c48 <__hi0bits>:
 8009c48:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	bf36      	itet	cc
 8009c50:	0403      	lslcc	r3, r0, #16
 8009c52:	2000      	movcs	r0, #0
 8009c54:	2010      	movcc	r0, #16
 8009c56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009c5a:	bf3c      	itt	cc
 8009c5c:	021b      	lslcc	r3, r3, #8
 8009c5e:	3008      	addcc	r0, #8
 8009c60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009c64:	bf3c      	itt	cc
 8009c66:	011b      	lslcc	r3, r3, #4
 8009c68:	3004      	addcc	r0, #4
 8009c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c6e:	bf3c      	itt	cc
 8009c70:	009b      	lslcc	r3, r3, #2
 8009c72:	3002      	addcc	r0, #2
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	db05      	blt.n	8009c84 <__hi0bits+0x3c>
 8009c78:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009c7c:	f100 0001 	add.w	r0, r0, #1
 8009c80:	bf08      	it	eq
 8009c82:	2020      	moveq	r0, #32
 8009c84:	4770      	bx	lr

08009c86 <__lo0bits>:
 8009c86:	6803      	ldr	r3, [r0, #0]
 8009c88:	4602      	mov	r2, r0
 8009c8a:	f013 0007 	ands.w	r0, r3, #7
 8009c8e:	d00b      	beq.n	8009ca8 <__lo0bits+0x22>
 8009c90:	07d9      	lsls	r1, r3, #31
 8009c92:	d421      	bmi.n	8009cd8 <__lo0bits+0x52>
 8009c94:	0798      	lsls	r0, r3, #30
 8009c96:	bf49      	itett	mi
 8009c98:	085b      	lsrmi	r3, r3, #1
 8009c9a:	089b      	lsrpl	r3, r3, #2
 8009c9c:	2001      	movmi	r0, #1
 8009c9e:	6013      	strmi	r3, [r2, #0]
 8009ca0:	bf5c      	itt	pl
 8009ca2:	6013      	strpl	r3, [r2, #0]
 8009ca4:	2002      	movpl	r0, #2
 8009ca6:	4770      	bx	lr
 8009ca8:	b299      	uxth	r1, r3
 8009caa:	b909      	cbnz	r1, 8009cb0 <__lo0bits+0x2a>
 8009cac:	0c1b      	lsrs	r3, r3, #16
 8009cae:	2010      	movs	r0, #16
 8009cb0:	b2d9      	uxtb	r1, r3
 8009cb2:	b909      	cbnz	r1, 8009cb8 <__lo0bits+0x32>
 8009cb4:	3008      	adds	r0, #8
 8009cb6:	0a1b      	lsrs	r3, r3, #8
 8009cb8:	0719      	lsls	r1, r3, #28
 8009cba:	bf04      	itt	eq
 8009cbc:	091b      	lsreq	r3, r3, #4
 8009cbe:	3004      	addeq	r0, #4
 8009cc0:	0799      	lsls	r1, r3, #30
 8009cc2:	bf04      	itt	eq
 8009cc4:	089b      	lsreq	r3, r3, #2
 8009cc6:	3002      	addeq	r0, #2
 8009cc8:	07d9      	lsls	r1, r3, #31
 8009cca:	d403      	bmi.n	8009cd4 <__lo0bits+0x4e>
 8009ccc:	085b      	lsrs	r3, r3, #1
 8009cce:	f100 0001 	add.w	r0, r0, #1
 8009cd2:	d003      	beq.n	8009cdc <__lo0bits+0x56>
 8009cd4:	6013      	str	r3, [r2, #0]
 8009cd6:	4770      	bx	lr
 8009cd8:	2000      	movs	r0, #0
 8009cda:	4770      	bx	lr
 8009cdc:	2020      	movs	r0, #32
 8009cde:	4770      	bx	lr

08009ce0 <__i2b>:
 8009ce0:	b510      	push	{r4, lr}
 8009ce2:	460c      	mov	r4, r1
 8009ce4:	2101      	movs	r1, #1
 8009ce6:	f7ff ff07 	bl	8009af8 <_Balloc>
 8009cea:	4602      	mov	r2, r0
 8009cec:	b928      	cbnz	r0, 8009cfa <__i2b+0x1a>
 8009cee:	4b05      	ldr	r3, [pc, #20]	@ (8009d04 <__i2b+0x24>)
 8009cf0:	4805      	ldr	r0, [pc, #20]	@ (8009d08 <__i2b+0x28>)
 8009cf2:	f240 1145 	movw	r1, #325	@ 0x145
 8009cf6:	f000 fcaf 	bl	800a658 <__assert_func>
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	6144      	str	r4, [r0, #20]
 8009cfe:	6103      	str	r3, [r0, #16]
 8009d00:	bd10      	pop	{r4, pc}
 8009d02:	bf00      	nop
 8009d04:	0800b061 	.word	0x0800b061
 8009d08:	0800b072 	.word	0x0800b072

08009d0c <__multiply>:
 8009d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d10:	4614      	mov	r4, r2
 8009d12:	690a      	ldr	r2, [r1, #16]
 8009d14:	6923      	ldr	r3, [r4, #16]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	bfa8      	it	ge
 8009d1a:	4623      	movge	r3, r4
 8009d1c:	460f      	mov	r7, r1
 8009d1e:	bfa4      	itt	ge
 8009d20:	460c      	movge	r4, r1
 8009d22:	461f      	movge	r7, r3
 8009d24:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009d28:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009d2c:	68a3      	ldr	r3, [r4, #8]
 8009d2e:	6861      	ldr	r1, [r4, #4]
 8009d30:	eb0a 0609 	add.w	r6, sl, r9
 8009d34:	42b3      	cmp	r3, r6
 8009d36:	b085      	sub	sp, #20
 8009d38:	bfb8      	it	lt
 8009d3a:	3101      	addlt	r1, #1
 8009d3c:	f7ff fedc 	bl	8009af8 <_Balloc>
 8009d40:	b930      	cbnz	r0, 8009d50 <__multiply+0x44>
 8009d42:	4602      	mov	r2, r0
 8009d44:	4b44      	ldr	r3, [pc, #272]	@ (8009e58 <__multiply+0x14c>)
 8009d46:	4845      	ldr	r0, [pc, #276]	@ (8009e5c <__multiply+0x150>)
 8009d48:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009d4c:	f000 fc84 	bl	800a658 <__assert_func>
 8009d50:	f100 0514 	add.w	r5, r0, #20
 8009d54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d58:	462b      	mov	r3, r5
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	4543      	cmp	r3, r8
 8009d5e:	d321      	bcc.n	8009da4 <__multiply+0x98>
 8009d60:	f107 0114 	add.w	r1, r7, #20
 8009d64:	f104 0214 	add.w	r2, r4, #20
 8009d68:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009d6c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009d70:	9302      	str	r3, [sp, #8]
 8009d72:	1b13      	subs	r3, r2, r4
 8009d74:	3b15      	subs	r3, #21
 8009d76:	f023 0303 	bic.w	r3, r3, #3
 8009d7a:	3304      	adds	r3, #4
 8009d7c:	f104 0715 	add.w	r7, r4, #21
 8009d80:	42ba      	cmp	r2, r7
 8009d82:	bf38      	it	cc
 8009d84:	2304      	movcc	r3, #4
 8009d86:	9301      	str	r3, [sp, #4]
 8009d88:	9b02      	ldr	r3, [sp, #8]
 8009d8a:	9103      	str	r1, [sp, #12]
 8009d8c:	428b      	cmp	r3, r1
 8009d8e:	d80c      	bhi.n	8009daa <__multiply+0x9e>
 8009d90:	2e00      	cmp	r6, #0
 8009d92:	dd03      	ble.n	8009d9c <__multiply+0x90>
 8009d94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d05b      	beq.n	8009e54 <__multiply+0x148>
 8009d9c:	6106      	str	r6, [r0, #16]
 8009d9e:	b005      	add	sp, #20
 8009da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da4:	f843 2b04 	str.w	r2, [r3], #4
 8009da8:	e7d8      	b.n	8009d5c <__multiply+0x50>
 8009daa:	f8b1 a000 	ldrh.w	sl, [r1]
 8009dae:	f1ba 0f00 	cmp.w	sl, #0
 8009db2:	d024      	beq.n	8009dfe <__multiply+0xf2>
 8009db4:	f104 0e14 	add.w	lr, r4, #20
 8009db8:	46a9      	mov	r9, r5
 8009dba:	f04f 0c00 	mov.w	ip, #0
 8009dbe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009dc2:	f8d9 3000 	ldr.w	r3, [r9]
 8009dc6:	fa1f fb87 	uxth.w	fp, r7
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	fb0a 330b 	mla	r3, sl, fp, r3
 8009dd0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009dd4:	f8d9 7000 	ldr.w	r7, [r9]
 8009dd8:	4463      	add	r3, ip
 8009dda:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009dde:	fb0a c70b 	mla	r7, sl, fp, ip
 8009de2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009dec:	4572      	cmp	r2, lr
 8009dee:	f849 3b04 	str.w	r3, [r9], #4
 8009df2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009df6:	d8e2      	bhi.n	8009dbe <__multiply+0xb2>
 8009df8:	9b01      	ldr	r3, [sp, #4]
 8009dfa:	f845 c003 	str.w	ip, [r5, r3]
 8009dfe:	9b03      	ldr	r3, [sp, #12]
 8009e00:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009e04:	3104      	adds	r1, #4
 8009e06:	f1b9 0f00 	cmp.w	r9, #0
 8009e0a:	d021      	beq.n	8009e50 <__multiply+0x144>
 8009e0c:	682b      	ldr	r3, [r5, #0]
 8009e0e:	f104 0c14 	add.w	ip, r4, #20
 8009e12:	46ae      	mov	lr, r5
 8009e14:	f04f 0a00 	mov.w	sl, #0
 8009e18:	f8bc b000 	ldrh.w	fp, [ip]
 8009e1c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009e20:	fb09 770b 	mla	r7, r9, fp, r7
 8009e24:	4457      	add	r7, sl
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009e2c:	f84e 3b04 	str.w	r3, [lr], #4
 8009e30:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009e34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e38:	f8be 3000 	ldrh.w	r3, [lr]
 8009e3c:	fb09 330a 	mla	r3, r9, sl, r3
 8009e40:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009e44:	4562      	cmp	r2, ip
 8009e46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e4a:	d8e5      	bhi.n	8009e18 <__multiply+0x10c>
 8009e4c:	9f01      	ldr	r7, [sp, #4]
 8009e4e:	51eb      	str	r3, [r5, r7]
 8009e50:	3504      	adds	r5, #4
 8009e52:	e799      	b.n	8009d88 <__multiply+0x7c>
 8009e54:	3e01      	subs	r6, #1
 8009e56:	e79b      	b.n	8009d90 <__multiply+0x84>
 8009e58:	0800b061 	.word	0x0800b061
 8009e5c:	0800b072 	.word	0x0800b072

08009e60 <__pow5mult>:
 8009e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e64:	4615      	mov	r5, r2
 8009e66:	f012 0203 	ands.w	r2, r2, #3
 8009e6a:	4607      	mov	r7, r0
 8009e6c:	460e      	mov	r6, r1
 8009e6e:	d007      	beq.n	8009e80 <__pow5mult+0x20>
 8009e70:	4c25      	ldr	r4, [pc, #148]	@ (8009f08 <__pow5mult+0xa8>)
 8009e72:	3a01      	subs	r2, #1
 8009e74:	2300      	movs	r3, #0
 8009e76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e7a:	f7ff fe9f 	bl	8009bbc <__multadd>
 8009e7e:	4606      	mov	r6, r0
 8009e80:	10ad      	asrs	r5, r5, #2
 8009e82:	d03d      	beq.n	8009f00 <__pow5mult+0xa0>
 8009e84:	69fc      	ldr	r4, [r7, #28]
 8009e86:	b97c      	cbnz	r4, 8009ea8 <__pow5mult+0x48>
 8009e88:	2010      	movs	r0, #16
 8009e8a:	f7ff fd7f 	bl	800998c <malloc>
 8009e8e:	4602      	mov	r2, r0
 8009e90:	61f8      	str	r0, [r7, #28]
 8009e92:	b928      	cbnz	r0, 8009ea0 <__pow5mult+0x40>
 8009e94:	4b1d      	ldr	r3, [pc, #116]	@ (8009f0c <__pow5mult+0xac>)
 8009e96:	481e      	ldr	r0, [pc, #120]	@ (8009f10 <__pow5mult+0xb0>)
 8009e98:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009e9c:	f000 fbdc 	bl	800a658 <__assert_func>
 8009ea0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ea4:	6004      	str	r4, [r0, #0]
 8009ea6:	60c4      	str	r4, [r0, #12]
 8009ea8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009eac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009eb0:	b94c      	cbnz	r4, 8009ec6 <__pow5mult+0x66>
 8009eb2:	f240 2171 	movw	r1, #625	@ 0x271
 8009eb6:	4638      	mov	r0, r7
 8009eb8:	f7ff ff12 	bl	8009ce0 <__i2b>
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ec2:	4604      	mov	r4, r0
 8009ec4:	6003      	str	r3, [r0, #0]
 8009ec6:	f04f 0900 	mov.w	r9, #0
 8009eca:	07eb      	lsls	r3, r5, #31
 8009ecc:	d50a      	bpl.n	8009ee4 <__pow5mult+0x84>
 8009ece:	4631      	mov	r1, r6
 8009ed0:	4622      	mov	r2, r4
 8009ed2:	4638      	mov	r0, r7
 8009ed4:	f7ff ff1a 	bl	8009d0c <__multiply>
 8009ed8:	4631      	mov	r1, r6
 8009eda:	4680      	mov	r8, r0
 8009edc:	4638      	mov	r0, r7
 8009ede:	f7ff fe4b 	bl	8009b78 <_Bfree>
 8009ee2:	4646      	mov	r6, r8
 8009ee4:	106d      	asrs	r5, r5, #1
 8009ee6:	d00b      	beq.n	8009f00 <__pow5mult+0xa0>
 8009ee8:	6820      	ldr	r0, [r4, #0]
 8009eea:	b938      	cbnz	r0, 8009efc <__pow5mult+0x9c>
 8009eec:	4622      	mov	r2, r4
 8009eee:	4621      	mov	r1, r4
 8009ef0:	4638      	mov	r0, r7
 8009ef2:	f7ff ff0b 	bl	8009d0c <__multiply>
 8009ef6:	6020      	str	r0, [r4, #0]
 8009ef8:	f8c0 9000 	str.w	r9, [r0]
 8009efc:	4604      	mov	r4, r0
 8009efe:	e7e4      	b.n	8009eca <__pow5mult+0x6a>
 8009f00:	4630      	mov	r0, r6
 8009f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f06:	bf00      	nop
 8009f08:	0800b0cc 	.word	0x0800b0cc
 8009f0c:	0800aff2 	.word	0x0800aff2
 8009f10:	0800b072 	.word	0x0800b072

08009f14 <__lshift>:
 8009f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f18:	460c      	mov	r4, r1
 8009f1a:	6849      	ldr	r1, [r1, #4]
 8009f1c:	6923      	ldr	r3, [r4, #16]
 8009f1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f22:	68a3      	ldr	r3, [r4, #8]
 8009f24:	4607      	mov	r7, r0
 8009f26:	4691      	mov	r9, r2
 8009f28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f2c:	f108 0601 	add.w	r6, r8, #1
 8009f30:	42b3      	cmp	r3, r6
 8009f32:	db0b      	blt.n	8009f4c <__lshift+0x38>
 8009f34:	4638      	mov	r0, r7
 8009f36:	f7ff fddf 	bl	8009af8 <_Balloc>
 8009f3a:	4605      	mov	r5, r0
 8009f3c:	b948      	cbnz	r0, 8009f52 <__lshift+0x3e>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	4b28      	ldr	r3, [pc, #160]	@ (8009fe4 <__lshift+0xd0>)
 8009f42:	4829      	ldr	r0, [pc, #164]	@ (8009fe8 <__lshift+0xd4>)
 8009f44:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009f48:	f000 fb86 	bl	800a658 <__assert_func>
 8009f4c:	3101      	adds	r1, #1
 8009f4e:	005b      	lsls	r3, r3, #1
 8009f50:	e7ee      	b.n	8009f30 <__lshift+0x1c>
 8009f52:	2300      	movs	r3, #0
 8009f54:	f100 0114 	add.w	r1, r0, #20
 8009f58:	f100 0210 	add.w	r2, r0, #16
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	4553      	cmp	r3, sl
 8009f60:	db33      	blt.n	8009fca <__lshift+0xb6>
 8009f62:	6920      	ldr	r0, [r4, #16]
 8009f64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f68:	f104 0314 	add.w	r3, r4, #20
 8009f6c:	f019 091f 	ands.w	r9, r9, #31
 8009f70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009f78:	d02b      	beq.n	8009fd2 <__lshift+0xbe>
 8009f7a:	f1c9 0e20 	rsb	lr, r9, #32
 8009f7e:	468a      	mov	sl, r1
 8009f80:	2200      	movs	r2, #0
 8009f82:	6818      	ldr	r0, [r3, #0]
 8009f84:	fa00 f009 	lsl.w	r0, r0, r9
 8009f88:	4310      	orrs	r0, r2
 8009f8a:	f84a 0b04 	str.w	r0, [sl], #4
 8009f8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f92:	459c      	cmp	ip, r3
 8009f94:	fa22 f20e 	lsr.w	r2, r2, lr
 8009f98:	d8f3      	bhi.n	8009f82 <__lshift+0x6e>
 8009f9a:	ebac 0304 	sub.w	r3, ip, r4
 8009f9e:	3b15      	subs	r3, #21
 8009fa0:	f023 0303 	bic.w	r3, r3, #3
 8009fa4:	3304      	adds	r3, #4
 8009fa6:	f104 0015 	add.w	r0, r4, #21
 8009faa:	4584      	cmp	ip, r0
 8009fac:	bf38      	it	cc
 8009fae:	2304      	movcc	r3, #4
 8009fb0:	50ca      	str	r2, [r1, r3]
 8009fb2:	b10a      	cbz	r2, 8009fb8 <__lshift+0xa4>
 8009fb4:	f108 0602 	add.w	r6, r8, #2
 8009fb8:	3e01      	subs	r6, #1
 8009fba:	4638      	mov	r0, r7
 8009fbc:	612e      	str	r6, [r5, #16]
 8009fbe:	4621      	mov	r1, r4
 8009fc0:	f7ff fdda 	bl	8009b78 <_Bfree>
 8009fc4:	4628      	mov	r0, r5
 8009fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fca:	f842 0f04 	str.w	r0, [r2, #4]!
 8009fce:	3301      	adds	r3, #1
 8009fd0:	e7c5      	b.n	8009f5e <__lshift+0x4a>
 8009fd2:	3904      	subs	r1, #4
 8009fd4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fd8:	f841 2f04 	str.w	r2, [r1, #4]!
 8009fdc:	459c      	cmp	ip, r3
 8009fde:	d8f9      	bhi.n	8009fd4 <__lshift+0xc0>
 8009fe0:	e7ea      	b.n	8009fb8 <__lshift+0xa4>
 8009fe2:	bf00      	nop
 8009fe4:	0800b061 	.word	0x0800b061
 8009fe8:	0800b072 	.word	0x0800b072

08009fec <__mcmp>:
 8009fec:	690a      	ldr	r2, [r1, #16]
 8009fee:	4603      	mov	r3, r0
 8009ff0:	6900      	ldr	r0, [r0, #16]
 8009ff2:	1a80      	subs	r0, r0, r2
 8009ff4:	b530      	push	{r4, r5, lr}
 8009ff6:	d10e      	bne.n	800a016 <__mcmp+0x2a>
 8009ff8:	3314      	adds	r3, #20
 8009ffa:	3114      	adds	r1, #20
 8009ffc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a000:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a004:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a008:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a00c:	4295      	cmp	r5, r2
 800a00e:	d003      	beq.n	800a018 <__mcmp+0x2c>
 800a010:	d205      	bcs.n	800a01e <__mcmp+0x32>
 800a012:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a016:	bd30      	pop	{r4, r5, pc}
 800a018:	42a3      	cmp	r3, r4
 800a01a:	d3f3      	bcc.n	800a004 <__mcmp+0x18>
 800a01c:	e7fb      	b.n	800a016 <__mcmp+0x2a>
 800a01e:	2001      	movs	r0, #1
 800a020:	e7f9      	b.n	800a016 <__mcmp+0x2a>
	...

0800a024 <__mdiff>:
 800a024:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a028:	4689      	mov	r9, r1
 800a02a:	4606      	mov	r6, r0
 800a02c:	4611      	mov	r1, r2
 800a02e:	4648      	mov	r0, r9
 800a030:	4614      	mov	r4, r2
 800a032:	f7ff ffdb 	bl	8009fec <__mcmp>
 800a036:	1e05      	subs	r5, r0, #0
 800a038:	d112      	bne.n	800a060 <__mdiff+0x3c>
 800a03a:	4629      	mov	r1, r5
 800a03c:	4630      	mov	r0, r6
 800a03e:	f7ff fd5b 	bl	8009af8 <_Balloc>
 800a042:	4602      	mov	r2, r0
 800a044:	b928      	cbnz	r0, 800a052 <__mdiff+0x2e>
 800a046:	4b3f      	ldr	r3, [pc, #252]	@ (800a144 <__mdiff+0x120>)
 800a048:	f240 2137 	movw	r1, #567	@ 0x237
 800a04c:	483e      	ldr	r0, [pc, #248]	@ (800a148 <__mdiff+0x124>)
 800a04e:	f000 fb03 	bl	800a658 <__assert_func>
 800a052:	2301      	movs	r3, #1
 800a054:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a058:	4610      	mov	r0, r2
 800a05a:	b003      	add	sp, #12
 800a05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a060:	bfbc      	itt	lt
 800a062:	464b      	movlt	r3, r9
 800a064:	46a1      	movlt	r9, r4
 800a066:	4630      	mov	r0, r6
 800a068:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a06c:	bfba      	itte	lt
 800a06e:	461c      	movlt	r4, r3
 800a070:	2501      	movlt	r5, #1
 800a072:	2500      	movge	r5, #0
 800a074:	f7ff fd40 	bl	8009af8 <_Balloc>
 800a078:	4602      	mov	r2, r0
 800a07a:	b918      	cbnz	r0, 800a084 <__mdiff+0x60>
 800a07c:	4b31      	ldr	r3, [pc, #196]	@ (800a144 <__mdiff+0x120>)
 800a07e:	f240 2145 	movw	r1, #581	@ 0x245
 800a082:	e7e3      	b.n	800a04c <__mdiff+0x28>
 800a084:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a088:	6926      	ldr	r6, [r4, #16]
 800a08a:	60c5      	str	r5, [r0, #12]
 800a08c:	f109 0310 	add.w	r3, r9, #16
 800a090:	f109 0514 	add.w	r5, r9, #20
 800a094:	f104 0e14 	add.w	lr, r4, #20
 800a098:	f100 0b14 	add.w	fp, r0, #20
 800a09c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a0a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a0a4:	9301      	str	r3, [sp, #4]
 800a0a6:	46d9      	mov	r9, fp
 800a0a8:	f04f 0c00 	mov.w	ip, #0
 800a0ac:	9b01      	ldr	r3, [sp, #4]
 800a0ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a0b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a0b6:	9301      	str	r3, [sp, #4]
 800a0b8:	fa1f f38a 	uxth.w	r3, sl
 800a0bc:	4619      	mov	r1, r3
 800a0be:	b283      	uxth	r3, r0
 800a0c0:	1acb      	subs	r3, r1, r3
 800a0c2:	0c00      	lsrs	r0, r0, #16
 800a0c4:	4463      	add	r3, ip
 800a0c6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a0ca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a0d4:	4576      	cmp	r6, lr
 800a0d6:	f849 3b04 	str.w	r3, [r9], #4
 800a0da:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a0de:	d8e5      	bhi.n	800a0ac <__mdiff+0x88>
 800a0e0:	1b33      	subs	r3, r6, r4
 800a0e2:	3b15      	subs	r3, #21
 800a0e4:	f023 0303 	bic.w	r3, r3, #3
 800a0e8:	3415      	adds	r4, #21
 800a0ea:	3304      	adds	r3, #4
 800a0ec:	42a6      	cmp	r6, r4
 800a0ee:	bf38      	it	cc
 800a0f0:	2304      	movcc	r3, #4
 800a0f2:	441d      	add	r5, r3
 800a0f4:	445b      	add	r3, fp
 800a0f6:	461e      	mov	r6, r3
 800a0f8:	462c      	mov	r4, r5
 800a0fa:	4544      	cmp	r4, r8
 800a0fc:	d30e      	bcc.n	800a11c <__mdiff+0xf8>
 800a0fe:	f108 0103 	add.w	r1, r8, #3
 800a102:	1b49      	subs	r1, r1, r5
 800a104:	f021 0103 	bic.w	r1, r1, #3
 800a108:	3d03      	subs	r5, #3
 800a10a:	45a8      	cmp	r8, r5
 800a10c:	bf38      	it	cc
 800a10e:	2100      	movcc	r1, #0
 800a110:	440b      	add	r3, r1
 800a112:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a116:	b191      	cbz	r1, 800a13e <__mdiff+0x11a>
 800a118:	6117      	str	r7, [r2, #16]
 800a11a:	e79d      	b.n	800a058 <__mdiff+0x34>
 800a11c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a120:	46e6      	mov	lr, ip
 800a122:	0c08      	lsrs	r0, r1, #16
 800a124:	fa1c fc81 	uxtah	ip, ip, r1
 800a128:	4471      	add	r1, lr
 800a12a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a12e:	b289      	uxth	r1, r1
 800a130:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a134:	f846 1b04 	str.w	r1, [r6], #4
 800a138:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a13c:	e7dd      	b.n	800a0fa <__mdiff+0xd6>
 800a13e:	3f01      	subs	r7, #1
 800a140:	e7e7      	b.n	800a112 <__mdiff+0xee>
 800a142:	bf00      	nop
 800a144:	0800b061 	.word	0x0800b061
 800a148:	0800b072 	.word	0x0800b072

0800a14c <__d2b>:
 800a14c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a150:	460f      	mov	r7, r1
 800a152:	2101      	movs	r1, #1
 800a154:	ec59 8b10 	vmov	r8, r9, d0
 800a158:	4616      	mov	r6, r2
 800a15a:	f7ff fccd 	bl	8009af8 <_Balloc>
 800a15e:	4604      	mov	r4, r0
 800a160:	b930      	cbnz	r0, 800a170 <__d2b+0x24>
 800a162:	4602      	mov	r2, r0
 800a164:	4b23      	ldr	r3, [pc, #140]	@ (800a1f4 <__d2b+0xa8>)
 800a166:	4824      	ldr	r0, [pc, #144]	@ (800a1f8 <__d2b+0xac>)
 800a168:	f240 310f 	movw	r1, #783	@ 0x30f
 800a16c:	f000 fa74 	bl	800a658 <__assert_func>
 800a170:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a174:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a178:	b10d      	cbz	r5, 800a17e <__d2b+0x32>
 800a17a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a17e:	9301      	str	r3, [sp, #4]
 800a180:	f1b8 0300 	subs.w	r3, r8, #0
 800a184:	d023      	beq.n	800a1ce <__d2b+0x82>
 800a186:	4668      	mov	r0, sp
 800a188:	9300      	str	r3, [sp, #0]
 800a18a:	f7ff fd7c 	bl	8009c86 <__lo0bits>
 800a18e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a192:	b1d0      	cbz	r0, 800a1ca <__d2b+0x7e>
 800a194:	f1c0 0320 	rsb	r3, r0, #32
 800a198:	fa02 f303 	lsl.w	r3, r2, r3
 800a19c:	430b      	orrs	r3, r1
 800a19e:	40c2      	lsrs	r2, r0
 800a1a0:	6163      	str	r3, [r4, #20]
 800a1a2:	9201      	str	r2, [sp, #4]
 800a1a4:	9b01      	ldr	r3, [sp, #4]
 800a1a6:	61a3      	str	r3, [r4, #24]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	bf0c      	ite	eq
 800a1ac:	2201      	moveq	r2, #1
 800a1ae:	2202      	movne	r2, #2
 800a1b0:	6122      	str	r2, [r4, #16]
 800a1b2:	b1a5      	cbz	r5, 800a1de <__d2b+0x92>
 800a1b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a1b8:	4405      	add	r5, r0
 800a1ba:	603d      	str	r5, [r7, #0]
 800a1bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a1c0:	6030      	str	r0, [r6, #0]
 800a1c2:	4620      	mov	r0, r4
 800a1c4:	b003      	add	sp, #12
 800a1c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1ca:	6161      	str	r1, [r4, #20]
 800a1cc:	e7ea      	b.n	800a1a4 <__d2b+0x58>
 800a1ce:	a801      	add	r0, sp, #4
 800a1d0:	f7ff fd59 	bl	8009c86 <__lo0bits>
 800a1d4:	9b01      	ldr	r3, [sp, #4]
 800a1d6:	6163      	str	r3, [r4, #20]
 800a1d8:	3020      	adds	r0, #32
 800a1da:	2201      	movs	r2, #1
 800a1dc:	e7e8      	b.n	800a1b0 <__d2b+0x64>
 800a1de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a1e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a1e6:	6038      	str	r0, [r7, #0]
 800a1e8:	6918      	ldr	r0, [r3, #16]
 800a1ea:	f7ff fd2d 	bl	8009c48 <__hi0bits>
 800a1ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a1f2:	e7e5      	b.n	800a1c0 <__d2b+0x74>
 800a1f4:	0800b061 	.word	0x0800b061
 800a1f8:	0800b072 	.word	0x0800b072

0800a1fc <__ssputs_r>:
 800a1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a200:	688e      	ldr	r6, [r1, #8]
 800a202:	461f      	mov	r7, r3
 800a204:	42be      	cmp	r6, r7
 800a206:	680b      	ldr	r3, [r1, #0]
 800a208:	4682      	mov	sl, r0
 800a20a:	460c      	mov	r4, r1
 800a20c:	4690      	mov	r8, r2
 800a20e:	d82d      	bhi.n	800a26c <__ssputs_r+0x70>
 800a210:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a214:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a218:	d026      	beq.n	800a268 <__ssputs_r+0x6c>
 800a21a:	6965      	ldr	r5, [r4, #20]
 800a21c:	6909      	ldr	r1, [r1, #16]
 800a21e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a222:	eba3 0901 	sub.w	r9, r3, r1
 800a226:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a22a:	1c7b      	adds	r3, r7, #1
 800a22c:	444b      	add	r3, r9
 800a22e:	106d      	asrs	r5, r5, #1
 800a230:	429d      	cmp	r5, r3
 800a232:	bf38      	it	cc
 800a234:	461d      	movcc	r5, r3
 800a236:	0553      	lsls	r3, r2, #21
 800a238:	d527      	bpl.n	800a28a <__ssputs_r+0x8e>
 800a23a:	4629      	mov	r1, r5
 800a23c:	f7ff fbd0 	bl	80099e0 <_malloc_r>
 800a240:	4606      	mov	r6, r0
 800a242:	b360      	cbz	r0, 800a29e <__ssputs_r+0xa2>
 800a244:	6921      	ldr	r1, [r4, #16]
 800a246:	464a      	mov	r2, r9
 800a248:	f7fe fcfb 	bl	8008c42 <memcpy>
 800a24c:	89a3      	ldrh	r3, [r4, #12]
 800a24e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a256:	81a3      	strh	r3, [r4, #12]
 800a258:	6126      	str	r6, [r4, #16]
 800a25a:	6165      	str	r5, [r4, #20]
 800a25c:	444e      	add	r6, r9
 800a25e:	eba5 0509 	sub.w	r5, r5, r9
 800a262:	6026      	str	r6, [r4, #0]
 800a264:	60a5      	str	r5, [r4, #8]
 800a266:	463e      	mov	r6, r7
 800a268:	42be      	cmp	r6, r7
 800a26a:	d900      	bls.n	800a26e <__ssputs_r+0x72>
 800a26c:	463e      	mov	r6, r7
 800a26e:	6820      	ldr	r0, [r4, #0]
 800a270:	4632      	mov	r2, r6
 800a272:	4641      	mov	r1, r8
 800a274:	f000 f9c6 	bl	800a604 <memmove>
 800a278:	68a3      	ldr	r3, [r4, #8]
 800a27a:	1b9b      	subs	r3, r3, r6
 800a27c:	60a3      	str	r3, [r4, #8]
 800a27e:	6823      	ldr	r3, [r4, #0]
 800a280:	4433      	add	r3, r6
 800a282:	6023      	str	r3, [r4, #0]
 800a284:	2000      	movs	r0, #0
 800a286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a28a:	462a      	mov	r2, r5
 800a28c:	f000 fa28 	bl	800a6e0 <_realloc_r>
 800a290:	4606      	mov	r6, r0
 800a292:	2800      	cmp	r0, #0
 800a294:	d1e0      	bne.n	800a258 <__ssputs_r+0x5c>
 800a296:	6921      	ldr	r1, [r4, #16]
 800a298:	4650      	mov	r0, sl
 800a29a:	f7ff fb2d 	bl	80098f8 <_free_r>
 800a29e:	230c      	movs	r3, #12
 800a2a0:	f8ca 3000 	str.w	r3, [sl]
 800a2a4:	89a3      	ldrh	r3, [r4, #12]
 800a2a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2aa:	81a3      	strh	r3, [r4, #12]
 800a2ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a2b0:	e7e9      	b.n	800a286 <__ssputs_r+0x8a>
	...

0800a2b4 <_svfiprintf_r>:
 800a2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b8:	4698      	mov	r8, r3
 800a2ba:	898b      	ldrh	r3, [r1, #12]
 800a2bc:	061b      	lsls	r3, r3, #24
 800a2be:	b09d      	sub	sp, #116	@ 0x74
 800a2c0:	4607      	mov	r7, r0
 800a2c2:	460d      	mov	r5, r1
 800a2c4:	4614      	mov	r4, r2
 800a2c6:	d510      	bpl.n	800a2ea <_svfiprintf_r+0x36>
 800a2c8:	690b      	ldr	r3, [r1, #16]
 800a2ca:	b973      	cbnz	r3, 800a2ea <_svfiprintf_r+0x36>
 800a2cc:	2140      	movs	r1, #64	@ 0x40
 800a2ce:	f7ff fb87 	bl	80099e0 <_malloc_r>
 800a2d2:	6028      	str	r0, [r5, #0]
 800a2d4:	6128      	str	r0, [r5, #16]
 800a2d6:	b930      	cbnz	r0, 800a2e6 <_svfiprintf_r+0x32>
 800a2d8:	230c      	movs	r3, #12
 800a2da:	603b      	str	r3, [r7, #0]
 800a2dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a2e0:	b01d      	add	sp, #116	@ 0x74
 800a2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2e6:	2340      	movs	r3, #64	@ 0x40
 800a2e8:	616b      	str	r3, [r5, #20]
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2ee:	2320      	movs	r3, #32
 800a2f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a2f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2f8:	2330      	movs	r3, #48	@ 0x30
 800a2fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a498 <_svfiprintf_r+0x1e4>
 800a2fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a302:	f04f 0901 	mov.w	r9, #1
 800a306:	4623      	mov	r3, r4
 800a308:	469a      	mov	sl, r3
 800a30a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a30e:	b10a      	cbz	r2, 800a314 <_svfiprintf_r+0x60>
 800a310:	2a25      	cmp	r2, #37	@ 0x25
 800a312:	d1f9      	bne.n	800a308 <_svfiprintf_r+0x54>
 800a314:	ebba 0b04 	subs.w	fp, sl, r4
 800a318:	d00b      	beq.n	800a332 <_svfiprintf_r+0x7e>
 800a31a:	465b      	mov	r3, fp
 800a31c:	4622      	mov	r2, r4
 800a31e:	4629      	mov	r1, r5
 800a320:	4638      	mov	r0, r7
 800a322:	f7ff ff6b 	bl	800a1fc <__ssputs_r>
 800a326:	3001      	adds	r0, #1
 800a328:	f000 80a7 	beq.w	800a47a <_svfiprintf_r+0x1c6>
 800a32c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a32e:	445a      	add	r2, fp
 800a330:	9209      	str	r2, [sp, #36]	@ 0x24
 800a332:	f89a 3000 	ldrb.w	r3, [sl]
 800a336:	2b00      	cmp	r3, #0
 800a338:	f000 809f 	beq.w	800a47a <_svfiprintf_r+0x1c6>
 800a33c:	2300      	movs	r3, #0
 800a33e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a342:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a346:	f10a 0a01 	add.w	sl, sl, #1
 800a34a:	9304      	str	r3, [sp, #16]
 800a34c:	9307      	str	r3, [sp, #28]
 800a34e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a352:	931a      	str	r3, [sp, #104]	@ 0x68
 800a354:	4654      	mov	r4, sl
 800a356:	2205      	movs	r2, #5
 800a358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a35c:	484e      	ldr	r0, [pc, #312]	@ (800a498 <_svfiprintf_r+0x1e4>)
 800a35e:	f7f5 ff57 	bl	8000210 <memchr>
 800a362:	9a04      	ldr	r2, [sp, #16]
 800a364:	b9d8      	cbnz	r0, 800a39e <_svfiprintf_r+0xea>
 800a366:	06d0      	lsls	r0, r2, #27
 800a368:	bf44      	itt	mi
 800a36a:	2320      	movmi	r3, #32
 800a36c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a370:	0711      	lsls	r1, r2, #28
 800a372:	bf44      	itt	mi
 800a374:	232b      	movmi	r3, #43	@ 0x2b
 800a376:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a37a:	f89a 3000 	ldrb.w	r3, [sl]
 800a37e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a380:	d015      	beq.n	800a3ae <_svfiprintf_r+0xfa>
 800a382:	9a07      	ldr	r2, [sp, #28]
 800a384:	4654      	mov	r4, sl
 800a386:	2000      	movs	r0, #0
 800a388:	f04f 0c0a 	mov.w	ip, #10
 800a38c:	4621      	mov	r1, r4
 800a38e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a392:	3b30      	subs	r3, #48	@ 0x30
 800a394:	2b09      	cmp	r3, #9
 800a396:	d94b      	bls.n	800a430 <_svfiprintf_r+0x17c>
 800a398:	b1b0      	cbz	r0, 800a3c8 <_svfiprintf_r+0x114>
 800a39a:	9207      	str	r2, [sp, #28]
 800a39c:	e014      	b.n	800a3c8 <_svfiprintf_r+0x114>
 800a39e:	eba0 0308 	sub.w	r3, r0, r8
 800a3a2:	fa09 f303 	lsl.w	r3, r9, r3
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	9304      	str	r3, [sp, #16]
 800a3aa:	46a2      	mov	sl, r4
 800a3ac:	e7d2      	b.n	800a354 <_svfiprintf_r+0xa0>
 800a3ae:	9b03      	ldr	r3, [sp, #12]
 800a3b0:	1d19      	adds	r1, r3, #4
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	9103      	str	r1, [sp, #12]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	bfbb      	ittet	lt
 800a3ba:	425b      	neglt	r3, r3
 800a3bc:	f042 0202 	orrlt.w	r2, r2, #2
 800a3c0:	9307      	strge	r3, [sp, #28]
 800a3c2:	9307      	strlt	r3, [sp, #28]
 800a3c4:	bfb8      	it	lt
 800a3c6:	9204      	strlt	r2, [sp, #16]
 800a3c8:	7823      	ldrb	r3, [r4, #0]
 800a3ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800a3cc:	d10a      	bne.n	800a3e4 <_svfiprintf_r+0x130>
 800a3ce:	7863      	ldrb	r3, [r4, #1]
 800a3d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3d2:	d132      	bne.n	800a43a <_svfiprintf_r+0x186>
 800a3d4:	9b03      	ldr	r3, [sp, #12]
 800a3d6:	1d1a      	adds	r2, r3, #4
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	9203      	str	r2, [sp, #12]
 800a3dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a3e0:	3402      	adds	r4, #2
 800a3e2:	9305      	str	r3, [sp, #20]
 800a3e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a4a8 <_svfiprintf_r+0x1f4>
 800a3e8:	7821      	ldrb	r1, [r4, #0]
 800a3ea:	2203      	movs	r2, #3
 800a3ec:	4650      	mov	r0, sl
 800a3ee:	f7f5 ff0f 	bl	8000210 <memchr>
 800a3f2:	b138      	cbz	r0, 800a404 <_svfiprintf_r+0x150>
 800a3f4:	9b04      	ldr	r3, [sp, #16]
 800a3f6:	eba0 000a 	sub.w	r0, r0, sl
 800a3fa:	2240      	movs	r2, #64	@ 0x40
 800a3fc:	4082      	lsls	r2, r0
 800a3fe:	4313      	orrs	r3, r2
 800a400:	3401      	adds	r4, #1
 800a402:	9304      	str	r3, [sp, #16]
 800a404:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a408:	4824      	ldr	r0, [pc, #144]	@ (800a49c <_svfiprintf_r+0x1e8>)
 800a40a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a40e:	2206      	movs	r2, #6
 800a410:	f7f5 fefe 	bl	8000210 <memchr>
 800a414:	2800      	cmp	r0, #0
 800a416:	d036      	beq.n	800a486 <_svfiprintf_r+0x1d2>
 800a418:	4b21      	ldr	r3, [pc, #132]	@ (800a4a0 <_svfiprintf_r+0x1ec>)
 800a41a:	bb1b      	cbnz	r3, 800a464 <_svfiprintf_r+0x1b0>
 800a41c:	9b03      	ldr	r3, [sp, #12]
 800a41e:	3307      	adds	r3, #7
 800a420:	f023 0307 	bic.w	r3, r3, #7
 800a424:	3308      	adds	r3, #8
 800a426:	9303      	str	r3, [sp, #12]
 800a428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a42a:	4433      	add	r3, r6
 800a42c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a42e:	e76a      	b.n	800a306 <_svfiprintf_r+0x52>
 800a430:	fb0c 3202 	mla	r2, ip, r2, r3
 800a434:	460c      	mov	r4, r1
 800a436:	2001      	movs	r0, #1
 800a438:	e7a8      	b.n	800a38c <_svfiprintf_r+0xd8>
 800a43a:	2300      	movs	r3, #0
 800a43c:	3401      	adds	r4, #1
 800a43e:	9305      	str	r3, [sp, #20]
 800a440:	4619      	mov	r1, r3
 800a442:	f04f 0c0a 	mov.w	ip, #10
 800a446:	4620      	mov	r0, r4
 800a448:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a44c:	3a30      	subs	r2, #48	@ 0x30
 800a44e:	2a09      	cmp	r2, #9
 800a450:	d903      	bls.n	800a45a <_svfiprintf_r+0x1a6>
 800a452:	2b00      	cmp	r3, #0
 800a454:	d0c6      	beq.n	800a3e4 <_svfiprintf_r+0x130>
 800a456:	9105      	str	r1, [sp, #20]
 800a458:	e7c4      	b.n	800a3e4 <_svfiprintf_r+0x130>
 800a45a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a45e:	4604      	mov	r4, r0
 800a460:	2301      	movs	r3, #1
 800a462:	e7f0      	b.n	800a446 <_svfiprintf_r+0x192>
 800a464:	ab03      	add	r3, sp, #12
 800a466:	9300      	str	r3, [sp, #0]
 800a468:	462a      	mov	r2, r5
 800a46a:	4b0e      	ldr	r3, [pc, #56]	@ (800a4a4 <_svfiprintf_r+0x1f0>)
 800a46c:	a904      	add	r1, sp, #16
 800a46e:	4638      	mov	r0, r7
 800a470:	f7fd fe66 	bl	8008140 <_printf_float>
 800a474:	1c42      	adds	r2, r0, #1
 800a476:	4606      	mov	r6, r0
 800a478:	d1d6      	bne.n	800a428 <_svfiprintf_r+0x174>
 800a47a:	89ab      	ldrh	r3, [r5, #12]
 800a47c:	065b      	lsls	r3, r3, #25
 800a47e:	f53f af2d 	bmi.w	800a2dc <_svfiprintf_r+0x28>
 800a482:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a484:	e72c      	b.n	800a2e0 <_svfiprintf_r+0x2c>
 800a486:	ab03      	add	r3, sp, #12
 800a488:	9300      	str	r3, [sp, #0]
 800a48a:	462a      	mov	r2, r5
 800a48c:	4b05      	ldr	r3, [pc, #20]	@ (800a4a4 <_svfiprintf_r+0x1f0>)
 800a48e:	a904      	add	r1, sp, #16
 800a490:	4638      	mov	r0, r7
 800a492:	f7fe f8ed 	bl	8008670 <_printf_i>
 800a496:	e7ed      	b.n	800a474 <_svfiprintf_r+0x1c0>
 800a498:	0800b1c8 	.word	0x0800b1c8
 800a49c:	0800b1d2 	.word	0x0800b1d2
 800a4a0:	08008141 	.word	0x08008141
 800a4a4:	0800a1fd 	.word	0x0800a1fd
 800a4a8:	0800b1ce 	.word	0x0800b1ce

0800a4ac <__sflush_r>:
 800a4ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b4:	0716      	lsls	r6, r2, #28
 800a4b6:	4605      	mov	r5, r0
 800a4b8:	460c      	mov	r4, r1
 800a4ba:	d454      	bmi.n	800a566 <__sflush_r+0xba>
 800a4bc:	684b      	ldr	r3, [r1, #4]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	dc02      	bgt.n	800a4c8 <__sflush_r+0x1c>
 800a4c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	dd48      	ble.n	800a55a <__sflush_r+0xae>
 800a4c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a4ca:	2e00      	cmp	r6, #0
 800a4cc:	d045      	beq.n	800a55a <__sflush_r+0xae>
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a4d4:	682f      	ldr	r7, [r5, #0]
 800a4d6:	6a21      	ldr	r1, [r4, #32]
 800a4d8:	602b      	str	r3, [r5, #0]
 800a4da:	d030      	beq.n	800a53e <__sflush_r+0x92>
 800a4dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a4de:	89a3      	ldrh	r3, [r4, #12]
 800a4e0:	0759      	lsls	r1, r3, #29
 800a4e2:	d505      	bpl.n	800a4f0 <__sflush_r+0x44>
 800a4e4:	6863      	ldr	r3, [r4, #4]
 800a4e6:	1ad2      	subs	r2, r2, r3
 800a4e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a4ea:	b10b      	cbz	r3, 800a4f0 <__sflush_r+0x44>
 800a4ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a4ee:	1ad2      	subs	r2, r2, r3
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a4f4:	6a21      	ldr	r1, [r4, #32]
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	47b0      	blx	r6
 800a4fa:	1c43      	adds	r3, r0, #1
 800a4fc:	89a3      	ldrh	r3, [r4, #12]
 800a4fe:	d106      	bne.n	800a50e <__sflush_r+0x62>
 800a500:	6829      	ldr	r1, [r5, #0]
 800a502:	291d      	cmp	r1, #29
 800a504:	d82b      	bhi.n	800a55e <__sflush_r+0xb2>
 800a506:	4a2a      	ldr	r2, [pc, #168]	@ (800a5b0 <__sflush_r+0x104>)
 800a508:	410a      	asrs	r2, r1
 800a50a:	07d6      	lsls	r6, r2, #31
 800a50c:	d427      	bmi.n	800a55e <__sflush_r+0xb2>
 800a50e:	2200      	movs	r2, #0
 800a510:	6062      	str	r2, [r4, #4]
 800a512:	04d9      	lsls	r1, r3, #19
 800a514:	6922      	ldr	r2, [r4, #16]
 800a516:	6022      	str	r2, [r4, #0]
 800a518:	d504      	bpl.n	800a524 <__sflush_r+0x78>
 800a51a:	1c42      	adds	r2, r0, #1
 800a51c:	d101      	bne.n	800a522 <__sflush_r+0x76>
 800a51e:	682b      	ldr	r3, [r5, #0]
 800a520:	b903      	cbnz	r3, 800a524 <__sflush_r+0x78>
 800a522:	6560      	str	r0, [r4, #84]	@ 0x54
 800a524:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a526:	602f      	str	r7, [r5, #0]
 800a528:	b1b9      	cbz	r1, 800a55a <__sflush_r+0xae>
 800a52a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a52e:	4299      	cmp	r1, r3
 800a530:	d002      	beq.n	800a538 <__sflush_r+0x8c>
 800a532:	4628      	mov	r0, r5
 800a534:	f7ff f9e0 	bl	80098f8 <_free_r>
 800a538:	2300      	movs	r3, #0
 800a53a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a53c:	e00d      	b.n	800a55a <__sflush_r+0xae>
 800a53e:	2301      	movs	r3, #1
 800a540:	4628      	mov	r0, r5
 800a542:	47b0      	blx	r6
 800a544:	4602      	mov	r2, r0
 800a546:	1c50      	adds	r0, r2, #1
 800a548:	d1c9      	bne.n	800a4de <__sflush_r+0x32>
 800a54a:	682b      	ldr	r3, [r5, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d0c6      	beq.n	800a4de <__sflush_r+0x32>
 800a550:	2b1d      	cmp	r3, #29
 800a552:	d001      	beq.n	800a558 <__sflush_r+0xac>
 800a554:	2b16      	cmp	r3, #22
 800a556:	d11e      	bne.n	800a596 <__sflush_r+0xea>
 800a558:	602f      	str	r7, [r5, #0]
 800a55a:	2000      	movs	r0, #0
 800a55c:	e022      	b.n	800a5a4 <__sflush_r+0xf8>
 800a55e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a562:	b21b      	sxth	r3, r3
 800a564:	e01b      	b.n	800a59e <__sflush_r+0xf2>
 800a566:	690f      	ldr	r7, [r1, #16]
 800a568:	2f00      	cmp	r7, #0
 800a56a:	d0f6      	beq.n	800a55a <__sflush_r+0xae>
 800a56c:	0793      	lsls	r3, r2, #30
 800a56e:	680e      	ldr	r6, [r1, #0]
 800a570:	bf08      	it	eq
 800a572:	694b      	ldreq	r3, [r1, #20]
 800a574:	600f      	str	r7, [r1, #0]
 800a576:	bf18      	it	ne
 800a578:	2300      	movne	r3, #0
 800a57a:	eba6 0807 	sub.w	r8, r6, r7
 800a57e:	608b      	str	r3, [r1, #8]
 800a580:	f1b8 0f00 	cmp.w	r8, #0
 800a584:	dde9      	ble.n	800a55a <__sflush_r+0xae>
 800a586:	6a21      	ldr	r1, [r4, #32]
 800a588:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a58a:	4643      	mov	r3, r8
 800a58c:	463a      	mov	r2, r7
 800a58e:	4628      	mov	r0, r5
 800a590:	47b0      	blx	r6
 800a592:	2800      	cmp	r0, #0
 800a594:	dc08      	bgt.n	800a5a8 <__sflush_r+0xfc>
 800a596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a59a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a59e:	81a3      	strh	r3, [r4, #12]
 800a5a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5a8:	4407      	add	r7, r0
 800a5aa:	eba8 0800 	sub.w	r8, r8, r0
 800a5ae:	e7e7      	b.n	800a580 <__sflush_r+0xd4>
 800a5b0:	dfbffffe 	.word	0xdfbffffe

0800a5b4 <_fflush_r>:
 800a5b4:	b538      	push	{r3, r4, r5, lr}
 800a5b6:	690b      	ldr	r3, [r1, #16]
 800a5b8:	4605      	mov	r5, r0
 800a5ba:	460c      	mov	r4, r1
 800a5bc:	b913      	cbnz	r3, 800a5c4 <_fflush_r+0x10>
 800a5be:	2500      	movs	r5, #0
 800a5c0:	4628      	mov	r0, r5
 800a5c2:	bd38      	pop	{r3, r4, r5, pc}
 800a5c4:	b118      	cbz	r0, 800a5ce <_fflush_r+0x1a>
 800a5c6:	6a03      	ldr	r3, [r0, #32]
 800a5c8:	b90b      	cbnz	r3, 800a5ce <_fflush_r+0x1a>
 800a5ca:	f7fe f9fd 	bl	80089c8 <__sinit>
 800a5ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d0f3      	beq.n	800a5be <_fflush_r+0xa>
 800a5d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a5d8:	07d0      	lsls	r0, r2, #31
 800a5da:	d404      	bmi.n	800a5e6 <_fflush_r+0x32>
 800a5dc:	0599      	lsls	r1, r3, #22
 800a5de:	d402      	bmi.n	800a5e6 <_fflush_r+0x32>
 800a5e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5e2:	f7fe fb2c 	bl	8008c3e <__retarget_lock_acquire_recursive>
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	4621      	mov	r1, r4
 800a5ea:	f7ff ff5f 	bl	800a4ac <__sflush_r>
 800a5ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a5f0:	07da      	lsls	r2, r3, #31
 800a5f2:	4605      	mov	r5, r0
 800a5f4:	d4e4      	bmi.n	800a5c0 <_fflush_r+0xc>
 800a5f6:	89a3      	ldrh	r3, [r4, #12]
 800a5f8:	059b      	lsls	r3, r3, #22
 800a5fa:	d4e1      	bmi.n	800a5c0 <_fflush_r+0xc>
 800a5fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5fe:	f7fe fb1f 	bl	8008c40 <__retarget_lock_release_recursive>
 800a602:	e7dd      	b.n	800a5c0 <_fflush_r+0xc>

0800a604 <memmove>:
 800a604:	4288      	cmp	r0, r1
 800a606:	b510      	push	{r4, lr}
 800a608:	eb01 0402 	add.w	r4, r1, r2
 800a60c:	d902      	bls.n	800a614 <memmove+0x10>
 800a60e:	4284      	cmp	r4, r0
 800a610:	4623      	mov	r3, r4
 800a612:	d807      	bhi.n	800a624 <memmove+0x20>
 800a614:	1e43      	subs	r3, r0, #1
 800a616:	42a1      	cmp	r1, r4
 800a618:	d008      	beq.n	800a62c <memmove+0x28>
 800a61a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a61e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a622:	e7f8      	b.n	800a616 <memmove+0x12>
 800a624:	4402      	add	r2, r0
 800a626:	4601      	mov	r1, r0
 800a628:	428a      	cmp	r2, r1
 800a62a:	d100      	bne.n	800a62e <memmove+0x2a>
 800a62c:	bd10      	pop	{r4, pc}
 800a62e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a632:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a636:	e7f7      	b.n	800a628 <memmove+0x24>

0800a638 <_sbrk_r>:
 800a638:	b538      	push	{r3, r4, r5, lr}
 800a63a:	4d06      	ldr	r5, [pc, #24]	@ (800a654 <_sbrk_r+0x1c>)
 800a63c:	2300      	movs	r3, #0
 800a63e:	4604      	mov	r4, r0
 800a640:	4608      	mov	r0, r1
 800a642:	602b      	str	r3, [r5, #0]
 800a644:	f7f8 feac 	bl	80033a0 <_sbrk>
 800a648:	1c43      	adds	r3, r0, #1
 800a64a:	d102      	bne.n	800a652 <_sbrk_r+0x1a>
 800a64c:	682b      	ldr	r3, [r5, #0]
 800a64e:	b103      	cbz	r3, 800a652 <_sbrk_r+0x1a>
 800a650:	6023      	str	r3, [r4, #0]
 800a652:	bd38      	pop	{r3, r4, r5, pc}
 800a654:	200051c8 	.word	0x200051c8

0800a658 <__assert_func>:
 800a658:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a65a:	4614      	mov	r4, r2
 800a65c:	461a      	mov	r2, r3
 800a65e:	4b09      	ldr	r3, [pc, #36]	@ (800a684 <__assert_func+0x2c>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4605      	mov	r5, r0
 800a664:	68d8      	ldr	r0, [r3, #12]
 800a666:	b954      	cbnz	r4, 800a67e <__assert_func+0x26>
 800a668:	4b07      	ldr	r3, [pc, #28]	@ (800a688 <__assert_func+0x30>)
 800a66a:	461c      	mov	r4, r3
 800a66c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a670:	9100      	str	r1, [sp, #0]
 800a672:	462b      	mov	r3, r5
 800a674:	4905      	ldr	r1, [pc, #20]	@ (800a68c <__assert_func+0x34>)
 800a676:	f000 f86f 	bl	800a758 <fiprintf>
 800a67a:	f000 f87f 	bl	800a77c <abort>
 800a67e:	4b04      	ldr	r3, [pc, #16]	@ (800a690 <__assert_func+0x38>)
 800a680:	e7f4      	b.n	800a66c <__assert_func+0x14>
 800a682:	bf00      	nop
 800a684:	20000018 	.word	0x20000018
 800a688:	0800b21e 	.word	0x0800b21e
 800a68c:	0800b1f0 	.word	0x0800b1f0
 800a690:	0800b1e3 	.word	0x0800b1e3

0800a694 <_calloc_r>:
 800a694:	b570      	push	{r4, r5, r6, lr}
 800a696:	fba1 5402 	umull	r5, r4, r1, r2
 800a69a:	b93c      	cbnz	r4, 800a6ac <_calloc_r+0x18>
 800a69c:	4629      	mov	r1, r5
 800a69e:	f7ff f99f 	bl	80099e0 <_malloc_r>
 800a6a2:	4606      	mov	r6, r0
 800a6a4:	b928      	cbnz	r0, 800a6b2 <_calloc_r+0x1e>
 800a6a6:	2600      	movs	r6, #0
 800a6a8:	4630      	mov	r0, r6
 800a6aa:	bd70      	pop	{r4, r5, r6, pc}
 800a6ac:	220c      	movs	r2, #12
 800a6ae:	6002      	str	r2, [r0, #0]
 800a6b0:	e7f9      	b.n	800a6a6 <_calloc_r+0x12>
 800a6b2:	462a      	mov	r2, r5
 800a6b4:	4621      	mov	r1, r4
 800a6b6:	f7fe fa44 	bl	8008b42 <memset>
 800a6ba:	e7f5      	b.n	800a6a8 <_calloc_r+0x14>

0800a6bc <__ascii_mbtowc>:
 800a6bc:	b082      	sub	sp, #8
 800a6be:	b901      	cbnz	r1, 800a6c2 <__ascii_mbtowc+0x6>
 800a6c0:	a901      	add	r1, sp, #4
 800a6c2:	b142      	cbz	r2, 800a6d6 <__ascii_mbtowc+0x1a>
 800a6c4:	b14b      	cbz	r3, 800a6da <__ascii_mbtowc+0x1e>
 800a6c6:	7813      	ldrb	r3, [r2, #0]
 800a6c8:	600b      	str	r3, [r1, #0]
 800a6ca:	7812      	ldrb	r2, [r2, #0]
 800a6cc:	1e10      	subs	r0, r2, #0
 800a6ce:	bf18      	it	ne
 800a6d0:	2001      	movne	r0, #1
 800a6d2:	b002      	add	sp, #8
 800a6d4:	4770      	bx	lr
 800a6d6:	4610      	mov	r0, r2
 800a6d8:	e7fb      	b.n	800a6d2 <__ascii_mbtowc+0x16>
 800a6da:	f06f 0001 	mvn.w	r0, #1
 800a6de:	e7f8      	b.n	800a6d2 <__ascii_mbtowc+0x16>

0800a6e0 <_realloc_r>:
 800a6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6e4:	4680      	mov	r8, r0
 800a6e6:	4615      	mov	r5, r2
 800a6e8:	460c      	mov	r4, r1
 800a6ea:	b921      	cbnz	r1, 800a6f6 <_realloc_r+0x16>
 800a6ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6f0:	4611      	mov	r1, r2
 800a6f2:	f7ff b975 	b.w	80099e0 <_malloc_r>
 800a6f6:	b92a      	cbnz	r2, 800a704 <_realloc_r+0x24>
 800a6f8:	f7ff f8fe 	bl	80098f8 <_free_r>
 800a6fc:	2400      	movs	r4, #0
 800a6fe:	4620      	mov	r0, r4
 800a700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a704:	f000 f841 	bl	800a78a <_malloc_usable_size_r>
 800a708:	4285      	cmp	r5, r0
 800a70a:	4606      	mov	r6, r0
 800a70c:	d802      	bhi.n	800a714 <_realloc_r+0x34>
 800a70e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a712:	d8f4      	bhi.n	800a6fe <_realloc_r+0x1e>
 800a714:	4629      	mov	r1, r5
 800a716:	4640      	mov	r0, r8
 800a718:	f7ff f962 	bl	80099e0 <_malloc_r>
 800a71c:	4607      	mov	r7, r0
 800a71e:	2800      	cmp	r0, #0
 800a720:	d0ec      	beq.n	800a6fc <_realloc_r+0x1c>
 800a722:	42b5      	cmp	r5, r6
 800a724:	462a      	mov	r2, r5
 800a726:	4621      	mov	r1, r4
 800a728:	bf28      	it	cs
 800a72a:	4632      	movcs	r2, r6
 800a72c:	f7fe fa89 	bl	8008c42 <memcpy>
 800a730:	4621      	mov	r1, r4
 800a732:	4640      	mov	r0, r8
 800a734:	f7ff f8e0 	bl	80098f8 <_free_r>
 800a738:	463c      	mov	r4, r7
 800a73a:	e7e0      	b.n	800a6fe <_realloc_r+0x1e>

0800a73c <__ascii_wctomb>:
 800a73c:	4603      	mov	r3, r0
 800a73e:	4608      	mov	r0, r1
 800a740:	b141      	cbz	r1, 800a754 <__ascii_wctomb+0x18>
 800a742:	2aff      	cmp	r2, #255	@ 0xff
 800a744:	d904      	bls.n	800a750 <__ascii_wctomb+0x14>
 800a746:	228a      	movs	r2, #138	@ 0x8a
 800a748:	601a      	str	r2, [r3, #0]
 800a74a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a74e:	4770      	bx	lr
 800a750:	700a      	strb	r2, [r1, #0]
 800a752:	2001      	movs	r0, #1
 800a754:	4770      	bx	lr
	...

0800a758 <fiprintf>:
 800a758:	b40e      	push	{r1, r2, r3}
 800a75a:	b503      	push	{r0, r1, lr}
 800a75c:	4601      	mov	r1, r0
 800a75e:	ab03      	add	r3, sp, #12
 800a760:	4805      	ldr	r0, [pc, #20]	@ (800a778 <fiprintf+0x20>)
 800a762:	f853 2b04 	ldr.w	r2, [r3], #4
 800a766:	6800      	ldr	r0, [r0, #0]
 800a768:	9301      	str	r3, [sp, #4]
 800a76a:	f000 f83f 	bl	800a7ec <_vfiprintf_r>
 800a76e:	b002      	add	sp, #8
 800a770:	f85d eb04 	ldr.w	lr, [sp], #4
 800a774:	b003      	add	sp, #12
 800a776:	4770      	bx	lr
 800a778:	20000018 	.word	0x20000018

0800a77c <abort>:
 800a77c:	b508      	push	{r3, lr}
 800a77e:	2006      	movs	r0, #6
 800a780:	f000 fa08 	bl	800ab94 <raise>
 800a784:	2001      	movs	r0, #1
 800a786:	f7f8 fd93 	bl	80032b0 <_exit>

0800a78a <_malloc_usable_size_r>:
 800a78a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a78e:	1f18      	subs	r0, r3, #4
 800a790:	2b00      	cmp	r3, #0
 800a792:	bfbc      	itt	lt
 800a794:	580b      	ldrlt	r3, [r1, r0]
 800a796:	18c0      	addlt	r0, r0, r3
 800a798:	4770      	bx	lr

0800a79a <__sfputc_r>:
 800a79a:	6893      	ldr	r3, [r2, #8]
 800a79c:	3b01      	subs	r3, #1
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	b410      	push	{r4}
 800a7a2:	6093      	str	r3, [r2, #8]
 800a7a4:	da08      	bge.n	800a7b8 <__sfputc_r+0x1e>
 800a7a6:	6994      	ldr	r4, [r2, #24]
 800a7a8:	42a3      	cmp	r3, r4
 800a7aa:	db01      	blt.n	800a7b0 <__sfputc_r+0x16>
 800a7ac:	290a      	cmp	r1, #10
 800a7ae:	d103      	bne.n	800a7b8 <__sfputc_r+0x1e>
 800a7b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7b4:	f000 b932 	b.w	800aa1c <__swbuf_r>
 800a7b8:	6813      	ldr	r3, [r2, #0]
 800a7ba:	1c58      	adds	r0, r3, #1
 800a7bc:	6010      	str	r0, [r2, #0]
 800a7be:	7019      	strb	r1, [r3, #0]
 800a7c0:	4608      	mov	r0, r1
 800a7c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <__sfputs_r>:
 800a7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ca:	4606      	mov	r6, r0
 800a7cc:	460f      	mov	r7, r1
 800a7ce:	4614      	mov	r4, r2
 800a7d0:	18d5      	adds	r5, r2, r3
 800a7d2:	42ac      	cmp	r4, r5
 800a7d4:	d101      	bne.n	800a7da <__sfputs_r+0x12>
 800a7d6:	2000      	movs	r0, #0
 800a7d8:	e007      	b.n	800a7ea <__sfputs_r+0x22>
 800a7da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7de:	463a      	mov	r2, r7
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	f7ff ffda 	bl	800a79a <__sfputc_r>
 800a7e6:	1c43      	adds	r3, r0, #1
 800a7e8:	d1f3      	bne.n	800a7d2 <__sfputs_r+0xa>
 800a7ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a7ec <_vfiprintf_r>:
 800a7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7f0:	460d      	mov	r5, r1
 800a7f2:	b09d      	sub	sp, #116	@ 0x74
 800a7f4:	4614      	mov	r4, r2
 800a7f6:	4698      	mov	r8, r3
 800a7f8:	4606      	mov	r6, r0
 800a7fa:	b118      	cbz	r0, 800a804 <_vfiprintf_r+0x18>
 800a7fc:	6a03      	ldr	r3, [r0, #32]
 800a7fe:	b90b      	cbnz	r3, 800a804 <_vfiprintf_r+0x18>
 800a800:	f7fe f8e2 	bl	80089c8 <__sinit>
 800a804:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a806:	07d9      	lsls	r1, r3, #31
 800a808:	d405      	bmi.n	800a816 <_vfiprintf_r+0x2a>
 800a80a:	89ab      	ldrh	r3, [r5, #12]
 800a80c:	059a      	lsls	r2, r3, #22
 800a80e:	d402      	bmi.n	800a816 <_vfiprintf_r+0x2a>
 800a810:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a812:	f7fe fa14 	bl	8008c3e <__retarget_lock_acquire_recursive>
 800a816:	89ab      	ldrh	r3, [r5, #12]
 800a818:	071b      	lsls	r3, r3, #28
 800a81a:	d501      	bpl.n	800a820 <_vfiprintf_r+0x34>
 800a81c:	692b      	ldr	r3, [r5, #16]
 800a81e:	b99b      	cbnz	r3, 800a848 <_vfiprintf_r+0x5c>
 800a820:	4629      	mov	r1, r5
 800a822:	4630      	mov	r0, r6
 800a824:	f000 f938 	bl	800aa98 <__swsetup_r>
 800a828:	b170      	cbz	r0, 800a848 <_vfiprintf_r+0x5c>
 800a82a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a82c:	07dc      	lsls	r4, r3, #31
 800a82e:	d504      	bpl.n	800a83a <_vfiprintf_r+0x4e>
 800a830:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a834:	b01d      	add	sp, #116	@ 0x74
 800a836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a83a:	89ab      	ldrh	r3, [r5, #12]
 800a83c:	0598      	lsls	r0, r3, #22
 800a83e:	d4f7      	bmi.n	800a830 <_vfiprintf_r+0x44>
 800a840:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a842:	f7fe f9fd 	bl	8008c40 <__retarget_lock_release_recursive>
 800a846:	e7f3      	b.n	800a830 <_vfiprintf_r+0x44>
 800a848:	2300      	movs	r3, #0
 800a84a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a84c:	2320      	movs	r3, #32
 800a84e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a852:	f8cd 800c 	str.w	r8, [sp, #12]
 800a856:	2330      	movs	r3, #48	@ 0x30
 800a858:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aa08 <_vfiprintf_r+0x21c>
 800a85c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a860:	f04f 0901 	mov.w	r9, #1
 800a864:	4623      	mov	r3, r4
 800a866:	469a      	mov	sl, r3
 800a868:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a86c:	b10a      	cbz	r2, 800a872 <_vfiprintf_r+0x86>
 800a86e:	2a25      	cmp	r2, #37	@ 0x25
 800a870:	d1f9      	bne.n	800a866 <_vfiprintf_r+0x7a>
 800a872:	ebba 0b04 	subs.w	fp, sl, r4
 800a876:	d00b      	beq.n	800a890 <_vfiprintf_r+0xa4>
 800a878:	465b      	mov	r3, fp
 800a87a:	4622      	mov	r2, r4
 800a87c:	4629      	mov	r1, r5
 800a87e:	4630      	mov	r0, r6
 800a880:	f7ff ffa2 	bl	800a7c8 <__sfputs_r>
 800a884:	3001      	adds	r0, #1
 800a886:	f000 80a7 	beq.w	800a9d8 <_vfiprintf_r+0x1ec>
 800a88a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a88c:	445a      	add	r2, fp
 800a88e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a890:	f89a 3000 	ldrb.w	r3, [sl]
 800a894:	2b00      	cmp	r3, #0
 800a896:	f000 809f 	beq.w	800a9d8 <_vfiprintf_r+0x1ec>
 800a89a:	2300      	movs	r3, #0
 800a89c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a8a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8a4:	f10a 0a01 	add.w	sl, sl, #1
 800a8a8:	9304      	str	r3, [sp, #16]
 800a8aa:	9307      	str	r3, [sp, #28]
 800a8ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a8b0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a8b2:	4654      	mov	r4, sl
 800a8b4:	2205      	movs	r2, #5
 800a8b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ba:	4853      	ldr	r0, [pc, #332]	@ (800aa08 <_vfiprintf_r+0x21c>)
 800a8bc:	f7f5 fca8 	bl	8000210 <memchr>
 800a8c0:	9a04      	ldr	r2, [sp, #16]
 800a8c2:	b9d8      	cbnz	r0, 800a8fc <_vfiprintf_r+0x110>
 800a8c4:	06d1      	lsls	r1, r2, #27
 800a8c6:	bf44      	itt	mi
 800a8c8:	2320      	movmi	r3, #32
 800a8ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8ce:	0713      	lsls	r3, r2, #28
 800a8d0:	bf44      	itt	mi
 800a8d2:	232b      	movmi	r3, #43	@ 0x2b
 800a8d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8d8:	f89a 3000 	ldrb.w	r3, [sl]
 800a8dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8de:	d015      	beq.n	800a90c <_vfiprintf_r+0x120>
 800a8e0:	9a07      	ldr	r2, [sp, #28]
 800a8e2:	4654      	mov	r4, sl
 800a8e4:	2000      	movs	r0, #0
 800a8e6:	f04f 0c0a 	mov.w	ip, #10
 800a8ea:	4621      	mov	r1, r4
 800a8ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8f0:	3b30      	subs	r3, #48	@ 0x30
 800a8f2:	2b09      	cmp	r3, #9
 800a8f4:	d94b      	bls.n	800a98e <_vfiprintf_r+0x1a2>
 800a8f6:	b1b0      	cbz	r0, 800a926 <_vfiprintf_r+0x13a>
 800a8f8:	9207      	str	r2, [sp, #28]
 800a8fa:	e014      	b.n	800a926 <_vfiprintf_r+0x13a>
 800a8fc:	eba0 0308 	sub.w	r3, r0, r8
 800a900:	fa09 f303 	lsl.w	r3, r9, r3
 800a904:	4313      	orrs	r3, r2
 800a906:	9304      	str	r3, [sp, #16]
 800a908:	46a2      	mov	sl, r4
 800a90a:	e7d2      	b.n	800a8b2 <_vfiprintf_r+0xc6>
 800a90c:	9b03      	ldr	r3, [sp, #12]
 800a90e:	1d19      	adds	r1, r3, #4
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	9103      	str	r1, [sp, #12]
 800a914:	2b00      	cmp	r3, #0
 800a916:	bfbb      	ittet	lt
 800a918:	425b      	neglt	r3, r3
 800a91a:	f042 0202 	orrlt.w	r2, r2, #2
 800a91e:	9307      	strge	r3, [sp, #28]
 800a920:	9307      	strlt	r3, [sp, #28]
 800a922:	bfb8      	it	lt
 800a924:	9204      	strlt	r2, [sp, #16]
 800a926:	7823      	ldrb	r3, [r4, #0]
 800a928:	2b2e      	cmp	r3, #46	@ 0x2e
 800a92a:	d10a      	bne.n	800a942 <_vfiprintf_r+0x156>
 800a92c:	7863      	ldrb	r3, [r4, #1]
 800a92e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a930:	d132      	bne.n	800a998 <_vfiprintf_r+0x1ac>
 800a932:	9b03      	ldr	r3, [sp, #12]
 800a934:	1d1a      	adds	r2, r3, #4
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	9203      	str	r2, [sp, #12]
 800a93a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a93e:	3402      	adds	r4, #2
 800a940:	9305      	str	r3, [sp, #20]
 800a942:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aa18 <_vfiprintf_r+0x22c>
 800a946:	7821      	ldrb	r1, [r4, #0]
 800a948:	2203      	movs	r2, #3
 800a94a:	4650      	mov	r0, sl
 800a94c:	f7f5 fc60 	bl	8000210 <memchr>
 800a950:	b138      	cbz	r0, 800a962 <_vfiprintf_r+0x176>
 800a952:	9b04      	ldr	r3, [sp, #16]
 800a954:	eba0 000a 	sub.w	r0, r0, sl
 800a958:	2240      	movs	r2, #64	@ 0x40
 800a95a:	4082      	lsls	r2, r0
 800a95c:	4313      	orrs	r3, r2
 800a95e:	3401      	adds	r4, #1
 800a960:	9304      	str	r3, [sp, #16]
 800a962:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a966:	4829      	ldr	r0, [pc, #164]	@ (800aa0c <_vfiprintf_r+0x220>)
 800a968:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a96c:	2206      	movs	r2, #6
 800a96e:	f7f5 fc4f 	bl	8000210 <memchr>
 800a972:	2800      	cmp	r0, #0
 800a974:	d03f      	beq.n	800a9f6 <_vfiprintf_r+0x20a>
 800a976:	4b26      	ldr	r3, [pc, #152]	@ (800aa10 <_vfiprintf_r+0x224>)
 800a978:	bb1b      	cbnz	r3, 800a9c2 <_vfiprintf_r+0x1d6>
 800a97a:	9b03      	ldr	r3, [sp, #12]
 800a97c:	3307      	adds	r3, #7
 800a97e:	f023 0307 	bic.w	r3, r3, #7
 800a982:	3308      	adds	r3, #8
 800a984:	9303      	str	r3, [sp, #12]
 800a986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a988:	443b      	add	r3, r7
 800a98a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a98c:	e76a      	b.n	800a864 <_vfiprintf_r+0x78>
 800a98e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a992:	460c      	mov	r4, r1
 800a994:	2001      	movs	r0, #1
 800a996:	e7a8      	b.n	800a8ea <_vfiprintf_r+0xfe>
 800a998:	2300      	movs	r3, #0
 800a99a:	3401      	adds	r4, #1
 800a99c:	9305      	str	r3, [sp, #20]
 800a99e:	4619      	mov	r1, r3
 800a9a0:	f04f 0c0a 	mov.w	ip, #10
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9aa:	3a30      	subs	r2, #48	@ 0x30
 800a9ac:	2a09      	cmp	r2, #9
 800a9ae:	d903      	bls.n	800a9b8 <_vfiprintf_r+0x1cc>
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d0c6      	beq.n	800a942 <_vfiprintf_r+0x156>
 800a9b4:	9105      	str	r1, [sp, #20]
 800a9b6:	e7c4      	b.n	800a942 <_vfiprintf_r+0x156>
 800a9b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9bc:	4604      	mov	r4, r0
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e7f0      	b.n	800a9a4 <_vfiprintf_r+0x1b8>
 800a9c2:	ab03      	add	r3, sp, #12
 800a9c4:	9300      	str	r3, [sp, #0]
 800a9c6:	462a      	mov	r2, r5
 800a9c8:	4b12      	ldr	r3, [pc, #72]	@ (800aa14 <_vfiprintf_r+0x228>)
 800a9ca:	a904      	add	r1, sp, #16
 800a9cc:	4630      	mov	r0, r6
 800a9ce:	f7fd fbb7 	bl	8008140 <_printf_float>
 800a9d2:	4607      	mov	r7, r0
 800a9d4:	1c78      	adds	r0, r7, #1
 800a9d6:	d1d6      	bne.n	800a986 <_vfiprintf_r+0x19a>
 800a9d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9da:	07d9      	lsls	r1, r3, #31
 800a9dc:	d405      	bmi.n	800a9ea <_vfiprintf_r+0x1fe>
 800a9de:	89ab      	ldrh	r3, [r5, #12]
 800a9e0:	059a      	lsls	r2, r3, #22
 800a9e2:	d402      	bmi.n	800a9ea <_vfiprintf_r+0x1fe>
 800a9e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9e6:	f7fe f92b 	bl	8008c40 <__retarget_lock_release_recursive>
 800a9ea:	89ab      	ldrh	r3, [r5, #12]
 800a9ec:	065b      	lsls	r3, r3, #25
 800a9ee:	f53f af1f 	bmi.w	800a830 <_vfiprintf_r+0x44>
 800a9f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a9f4:	e71e      	b.n	800a834 <_vfiprintf_r+0x48>
 800a9f6:	ab03      	add	r3, sp, #12
 800a9f8:	9300      	str	r3, [sp, #0]
 800a9fa:	462a      	mov	r2, r5
 800a9fc:	4b05      	ldr	r3, [pc, #20]	@ (800aa14 <_vfiprintf_r+0x228>)
 800a9fe:	a904      	add	r1, sp, #16
 800aa00:	4630      	mov	r0, r6
 800aa02:	f7fd fe35 	bl	8008670 <_printf_i>
 800aa06:	e7e4      	b.n	800a9d2 <_vfiprintf_r+0x1e6>
 800aa08:	0800b1c8 	.word	0x0800b1c8
 800aa0c:	0800b1d2 	.word	0x0800b1d2
 800aa10:	08008141 	.word	0x08008141
 800aa14:	0800a7c9 	.word	0x0800a7c9
 800aa18:	0800b1ce 	.word	0x0800b1ce

0800aa1c <__swbuf_r>:
 800aa1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa1e:	460e      	mov	r6, r1
 800aa20:	4614      	mov	r4, r2
 800aa22:	4605      	mov	r5, r0
 800aa24:	b118      	cbz	r0, 800aa2e <__swbuf_r+0x12>
 800aa26:	6a03      	ldr	r3, [r0, #32]
 800aa28:	b90b      	cbnz	r3, 800aa2e <__swbuf_r+0x12>
 800aa2a:	f7fd ffcd 	bl	80089c8 <__sinit>
 800aa2e:	69a3      	ldr	r3, [r4, #24]
 800aa30:	60a3      	str	r3, [r4, #8]
 800aa32:	89a3      	ldrh	r3, [r4, #12]
 800aa34:	071a      	lsls	r2, r3, #28
 800aa36:	d501      	bpl.n	800aa3c <__swbuf_r+0x20>
 800aa38:	6923      	ldr	r3, [r4, #16]
 800aa3a:	b943      	cbnz	r3, 800aa4e <__swbuf_r+0x32>
 800aa3c:	4621      	mov	r1, r4
 800aa3e:	4628      	mov	r0, r5
 800aa40:	f000 f82a 	bl	800aa98 <__swsetup_r>
 800aa44:	b118      	cbz	r0, 800aa4e <__swbuf_r+0x32>
 800aa46:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800aa4a:	4638      	mov	r0, r7
 800aa4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa4e:	6823      	ldr	r3, [r4, #0]
 800aa50:	6922      	ldr	r2, [r4, #16]
 800aa52:	1a98      	subs	r0, r3, r2
 800aa54:	6963      	ldr	r3, [r4, #20]
 800aa56:	b2f6      	uxtb	r6, r6
 800aa58:	4283      	cmp	r3, r0
 800aa5a:	4637      	mov	r7, r6
 800aa5c:	dc05      	bgt.n	800aa6a <__swbuf_r+0x4e>
 800aa5e:	4621      	mov	r1, r4
 800aa60:	4628      	mov	r0, r5
 800aa62:	f7ff fda7 	bl	800a5b4 <_fflush_r>
 800aa66:	2800      	cmp	r0, #0
 800aa68:	d1ed      	bne.n	800aa46 <__swbuf_r+0x2a>
 800aa6a:	68a3      	ldr	r3, [r4, #8]
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	60a3      	str	r3, [r4, #8]
 800aa70:	6823      	ldr	r3, [r4, #0]
 800aa72:	1c5a      	adds	r2, r3, #1
 800aa74:	6022      	str	r2, [r4, #0]
 800aa76:	701e      	strb	r6, [r3, #0]
 800aa78:	6962      	ldr	r2, [r4, #20]
 800aa7a:	1c43      	adds	r3, r0, #1
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	d004      	beq.n	800aa8a <__swbuf_r+0x6e>
 800aa80:	89a3      	ldrh	r3, [r4, #12]
 800aa82:	07db      	lsls	r3, r3, #31
 800aa84:	d5e1      	bpl.n	800aa4a <__swbuf_r+0x2e>
 800aa86:	2e0a      	cmp	r6, #10
 800aa88:	d1df      	bne.n	800aa4a <__swbuf_r+0x2e>
 800aa8a:	4621      	mov	r1, r4
 800aa8c:	4628      	mov	r0, r5
 800aa8e:	f7ff fd91 	bl	800a5b4 <_fflush_r>
 800aa92:	2800      	cmp	r0, #0
 800aa94:	d0d9      	beq.n	800aa4a <__swbuf_r+0x2e>
 800aa96:	e7d6      	b.n	800aa46 <__swbuf_r+0x2a>

0800aa98 <__swsetup_r>:
 800aa98:	b538      	push	{r3, r4, r5, lr}
 800aa9a:	4b29      	ldr	r3, [pc, #164]	@ (800ab40 <__swsetup_r+0xa8>)
 800aa9c:	4605      	mov	r5, r0
 800aa9e:	6818      	ldr	r0, [r3, #0]
 800aaa0:	460c      	mov	r4, r1
 800aaa2:	b118      	cbz	r0, 800aaac <__swsetup_r+0x14>
 800aaa4:	6a03      	ldr	r3, [r0, #32]
 800aaa6:	b90b      	cbnz	r3, 800aaac <__swsetup_r+0x14>
 800aaa8:	f7fd ff8e 	bl	80089c8 <__sinit>
 800aaac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aab0:	0719      	lsls	r1, r3, #28
 800aab2:	d422      	bmi.n	800aafa <__swsetup_r+0x62>
 800aab4:	06da      	lsls	r2, r3, #27
 800aab6:	d407      	bmi.n	800aac8 <__swsetup_r+0x30>
 800aab8:	2209      	movs	r2, #9
 800aaba:	602a      	str	r2, [r5, #0]
 800aabc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aac0:	81a3      	strh	r3, [r4, #12]
 800aac2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aac6:	e033      	b.n	800ab30 <__swsetup_r+0x98>
 800aac8:	0758      	lsls	r0, r3, #29
 800aaca:	d512      	bpl.n	800aaf2 <__swsetup_r+0x5a>
 800aacc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aace:	b141      	cbz	r1, 800aae2 <__swsetup_r+0x4a>
 800aad0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aad4:	4299      	cmp	r1, r3
 800aad6:	d002      	beq.n	800aade <__swsetup_r+0x46>
 800aad8:	4628      	mov	r0, r5
 800aada:	f7fe ff0d 	bl	80098f8 <_free_r>
 800aade:	2300      	movs	r3, #0
 800aae0:	6363      	str	r3, [r4, #52]	@ 0x34
 800aae2:	89a3      	ldrh	r3, [r4, #12]
 800aae4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aae8:	81a3      	strh	r3, [r4, #12]
 800aaea:	2300      	movs	r3, #0
 800aaec:	6063      	str	r3, [r4, #4]
 800aaee:	6923      	ldr	r3, [r4, #16]
 800aaf0:	6023      	str	r3, [r4, #0]
 800aaf2:	89a3      	ldrh	r3, [r4, #12]
 800aaf4:	f043 0308 	orr.w	r3, r3, #8
 800aaf8:	81a3      	strh	r3, [r4, #12]
 800aafa:	6923      	ldr	r3, [r4, #16]
 800aafc:	b94b      	cbnz	r3, 800ab12 <__swsetup_r+0x7a>
 800aafe:	89a3      	ldrh	r3, [r4, #12]
 800ab00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ab04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab08:	d003      	beq.n	800ab12 <__swsetup_r+0x7a>
 800ab0a:	4621      	mov	r1, r4
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	f000 f883 	bl	800ac18 <__smakebuf_r>
 800ab12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab16:	f013 0201 	ands.w	r2, r3, #1
 800ab1a:	d00a      	beq.n	800ab32 <__swsetup_r+0x9a>
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	60a2      	str	r2, [r4, #8]
 800ab20:	6962      	ldr	r2, [r4, #20]
 800ab22:	4252      	negs	r2, r2
 800ab24:	61a2      	str	r2, [r4, #24]
 800ab26:	6922      	ldr	r2, [r4, #16]
 800ab28:	b942      	cbnz	r2, 800ab3c <__swsetup_r+0xa4>
 800ab2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ab2e:	d1c5      	bne.n	800aabc <__swsetup_r+0x24>
 800ab30:	bd38      	pop	{r3, r4, r5, pc}
 800ab32:	0799      	lsls	r1, r3, #30
 800ab34:	bf58      	it	pl
 800ab36:	6962      	ldrpl	r2, [r4, #20]
 800ab38:	60a2      	str	r2, [r4, #8]
 800ab3a:	e7f4      	b.n	800ab26 <__swsetup_r+0x8e>
 800ab3c:	2000      	movs	r0, #0
 800ab3e:	e7f7      	b.n	800ab30 <__swsetup_r+0x98>
 800ab40:	20000018 	.word	0x20000018

0800ab44 <_raise_r>:
 800ab44:	291f      	cmp	r1, #31
 800ab46:	b538      	push	{r3, r4, r5, lr}
 800ab48:	4605      	mov	r5, r0
 800ab4a:	460c      	mov	r4, r1
 800ab4c:	d904      	bls.n	800ab58 <_raise_r+0x14>
 800ab4e:	2316      	movs	r3, #22
 800ab50:	6003      	str	r3, [r0, #0]
 800ab52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab56:	bd38      	pop	{r3, r4, r5, pc}
 800ab58:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ab5a:	b112      	cbz	r2, 800ab62 <_raise_r+0x1e>
 800ab5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab60:	b94b      	cbnz	r3, 800ab76 <_raise_r+0x32>
 800ab62:	4628      	mov	r0, r5
 800ab64:	f000 f830 	bl	800abc8 <_getpid_r>
 800ab68:	4622      	mov	r2, r4
 800ab6a:	4601      	mov	r1, r0
 800ab6c:	4628      	mov	r0, r5
 800ab6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab72:	f000 b817 	b.w	800aba4 <_kill_r>
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d00a      	beq.n	800ab90 <_raise_r+0x4c>
 800ab7a:	1c59      	adds	r1, r3, #1
 800ab7c:	d103      	bne.n	800ab86 <_raise_r+0x42>
 800ab7e:	2316      	movs	r3, #22
 800ab80:	6003      	str	r3, [r0, #0]
 800ab82:	2001      	movs	r0, #1
 800ab84:	e7e7      	b.n	800ab56 <_raise_r+0x12>
 800ab86:	2100      	movs	r1, #0
 800ab88:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	4798      	blx	r3
 800ab90:	2000      	movs	r0, #0
 800ab92:	e7e0      	b.n	800ab56 <_raise_r+0x12>

0800ab94 <raise>:
 800ab94:	4b02      	ldr	r3, [pc, #8]	@ (800aba0 <raise+0xc>)
 800ab96:	4601      	mov	r1, r0
 800ab98:	6818      	ldr	r0, [r3, #0]
 800ab9a:	f7ff bfd3 	b.w	800ab44 <_raise_r>
 800ab9e:	bf00      	nop
 800aba0:	20000018 	.word	0x20000018

0800aba4 <_kill_r>:
 800aba4:	b538      	push	{r3, r4, r5, lr}
 800aba6:	4d07      	ldr	r5, [pc, #28]	@ (800abc4 <_kill_r+0x20>)
 800aba8:	2300      	movs	r3, #0
 800abaa:	4604      	mov	r4, r0
 800abac:	4608      	mov	r0, r1
 800abae:	4611      	mov	r1, r2
 800abb0:	602b      	str	r3, [r5, #0]
 800abb2:	f7f8 fb6d 	bl	8003290 <_kill>
 800abb6:	1c43      	adds	r3, r0, #1
 800abb8:	d102      	bne.n	800abc0 <_kill_r+0x1c>
 800abba:	682b      	ldr	r3, [r5, #0]
 800abbc:	b103      	cbz	r3, 800abc0 <_kill_r+0x1c>
 800abbe:	6023      	str	r3, [r4, #0]
 800abc0:	bd38      	pop	{r3, r4, r5, pc}
 800abc2:	bf00      	nop
 800abc4:	200051c8 	.word	0x200051c8

0800abc8 <_getpid_r>:
 800abc8:	f7f8 bb5a 	b.w	8003280 <_getpid>

0800abcc <__swhatbuf_r>:
 800abcc:	b570      	push	{r4, r5, r6, lr}
 800abce:	460c      	mov	r4, r1
 800abd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abd4:	2900      	cmp	r1, #0
 800abd6:	b096      	sub	sp, #88	@ 0x58
 800abd8:	4615      	mov	r5, r2
 800abda:	461e      	mov	r6, r3
 800abdc:	da0d      	bge.n	800abfa <__swhatbuf_r+0x2e>
 800abde:	89a3      	ldrh	r3, [r4, #12]
 800abe0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800abe4:	f04f 0100 	mov.w	r1, #0
 800abe8:	bf14      	ite	ne
 800abea:	2340      	movne	r3, #64	@ 0x40
 800abec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800abf0:	2000      	movs	r0, #0
 800abf2:	6031      	str	r1, [r6, #0]
 800abf4:	602b      	str	r3, [r5, #0]
 800abf6:	b016      	add	sp, #88	@ 0x58
 800abf8:	bd70      	pop	{r4, r5, r6, pc}
 800abfa:	466a      	mov	r2, sp
 800abfc:	f000 f848 	bl	800ac90 <_fstat_r>
 800ac00:	2800      	cmp	r0, #0
 800ac02:	dbec      	blt.n	800abde <__swhatbuf_r+0x12>
 800ac04:	9901      	ldr	r1, [sp, #4]
 800ac06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ac0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ac0e:	4259      	negs	r1, r3
 800ac10:	4159      	adcs	r1, r3
 800ac12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac16:	e7eb      	b.n	800abf0 <__swhatbuf_r+0x24>

0800ac18 <__smakebuf_r>:
 800ac18:	898b      	ldrh	r3, [r1, #12]
 800ac1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac1c:	079d      	lsls	r5, r3, #30
 800ac1e:	4606      	mov	r6, r0
 800ac20:	460c      	mov	r4, r1
 800ac22:	d507      	bpl.n	800ac34 <__smakebuf_r+0x1c>
 800ac24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ac28:	6023      	str	r3, [r4, #0]
 800ac2a:	6123      	str	r3, [r4, #16]
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	6163      	str	r3, [r4, #20]
 800ac30:	b003      	add	sp, #12
 800ac32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac34:	ab01      	add	r3, sp, #4
 800ac36:	466a      	mov	r2, sp
 800ac38:	f7ff ffc8 	bl	800abcc <__swhatbuf_r>
 800ac3c:	9f00      	ldr	r7, [sp, #0]
 800ac3e:	4605      	mov	r5, r0
 800ac40:	4639      	mov	r1, r7
 800ac42:	4630      	mov	r0, r6
 800ac44:	f7fe fecc 	bl	80099e0 <_malloc_r>
 800ac48:	b948      	cbnz	r0, 800ac5e <__smakebuf_r+0x46>
 800ac4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac4e:	059a      	lsls	r2, r3, #22
 800ac50:	d4ee      	bmi.n	800ac30 <__smakebuf_r+0x18>
 800ac52:	f023 0303 	bic.w	r3, r3, #3
 800ac56:	f043 0302 	orr.w	r3, r3, #2
 800ac5a:	81a3      	strh	r3, [r4, #12]
 800ac5c:	e7e2      	b.n	800ac24 <__smakebuf_r+0xc>
 800ac5e:	89a3      	ldrh	r3, [r4, #12]
 800ac60:	6020      	str	r0, [r4, #0]
 800ac62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac66:	81a3      	strh	r3, [r4, #12]
 800ac68:	9b01      	ldr	r3, [sp, #4]
 800ac6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ac6e:	b15b      	cbz	r3, 800ac88 <__smakebuf_r+0x70>
 800ac70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac74:	4630      	mov	r0, r6
 800ac76:	f000 f81d 	bl	800acb4 <_isatty_r>
 800ac7a:	b128      	cbz	r0, 800ac88 <__smakebuf_r+0x70>
 800ac7c:	89a3      	ldrh	r3, [r4, #12]
 800ac7e:	f023 0303 	bic.w	r3, r3, #3
 800ac82:	f043 0301 	orr.w	r3, r3, #1
 800ac86:	81a3      	strh	r3, [r4, #12]
 800ac88:	89a3      	ldrh	r3, [r4, #12]
 800ac8a:	431d      	orrs	r5, r3
 800ac8c:	81a5      	strh	r5, [r4, #12]
 800ac8e:	e7cf      	b.n	800ac30 <__smakebuf_r+0x18>

0800ac90 <_fstat_r>:
 800ac90:	b538      	push	{r3, r4, r5, lr}
 800ac92:	4d07      	ldr	r5, [pc, #28]	@ (800acb0 <_fstat_r+0x20>)
 800ac94:	2300      	movs	r3, #0
 800ac96:	4604      	mov	r4, r0
 800ac98:	4608      	mov	r0, r1
 800ac9a:	4611      	mov	r1, r2
 800ac9c:	602b      	str	r3, [r5, #0]
 800ac9e:	f7f8 fb57 	bl	8003350 <_fstat>
 800aca2:	1c43      	adds	r3, r0, #1
 800aca4:	d102      	bne.n	800acac <_fstat_r+0x1c>
 800aca6:	682b      	ldr	r3, [r5, #0]
 800aca8:	b103      	cbz	r3, 800acac <_fstat_r+0x1c>
 800acaa:	6023      	str	r3, [r4, #0]
 800acac:	bd38      	pop	{r3, r4, r5, pc}
 800acae:	bf00      	nop
 800acb0:	200051c8 	.word	0x200051c8

0800acb4 <_isatty_r>:
 800acb4:	b538      	push	{r3, r4, r5, lr}
 800acb6:	4d06      	ldr	r5, [pc, #24]	@ (800acd0 <_isatty_r+0x1c>)
 800acb8:	2300      	movs	r3, #0
 800acba:	4604      	mov	r4, r0
 800acbc:	4608      	mov	r0, r1
 800acbe:	602b      	str	r3, [r5, #0]
 800acc0:	f7f8 fb56 	bl	8003370 <_isatty>
 800acc4:	1c43      	adds	r3, r0, #1
 800acc6:	d102      	bne.n	800acce <_isatty_r+0x1a>
 800acc8:	682b      	ldr	r3, [r5, #0]
 800acca:	b103      	cbz	r3, 800acce <_isatty_r+0x1a>
 800accc:	6023      	str	r3, [r4, #0]
 800acce:	bd38      	pop	{r3, r4, r5, pc}
 800acd0:	200051c8 	.word	0x200051c8

0800acd4 <roundf>:
 800acd4:	ee10 0a10 	vmov	r0, s0
 800acd8:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800acdc:	3a7f      	subs	r2, #127	@ 0x7f
 800acde:	2a16      	cmp	r2, #22
 800ace0:	dc15      	bgt.n	800ad0e <roundf+0x3a>
 800ace2:	2a00      	cmp	r2, #0
 800ace4:	da08      	bge.n	800acf8 <roundf+0x24>
 800ace6:	3201      	adds	r2, #1
 800ace8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800acec:	d101      	bne.n	800acf2 <roundf+0x1e>
 800acee:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800acf2:	ee00 3a10 	vmov	s0, r3
 800acf6:	4770      	bx	lr
 800acf8:	4907      	ldr	r1, [pc, #28]	@ (800ad18 <roundf+0x44>)
 800acfa:	4111      	asrs	r1, r2
 800acfc:	4201      	tst	r1, r0
 800acfe:	d0fa      	beq.n	800acf6 <roundf+0x22>
 800ad00:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800ad04:	4113      	asrs	r3, r2
 800ad06:	4403      	add	r3, r0
 800ad08:	ea23 0301 	bic.w	r3, r3, r1
 800ad0c:	e7f1      	b.n	800acf2 <roundf+0x1e>
 800ad0e:	2a80      	cmp	r2, #128	@ 0x80
 800ad10:	d1f1      	bne.n	800acf6 <roundf+0x22>
 800ad12:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ad16:	4770      	bx	lr
 800ad18:	007fffff 	.word	0x007fffff

0800ad1c <_init>:
 800ad1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad1e:	bf00      	nop
 800ad20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad22:	bc08      	pop	{r3}
 800ad24:	469e      	mov	lr, r3
 800ad26:	4770      	bx	lr

0800ad28 <_fini>:
 800ad28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad2a:	bf00      	nop
 800ad2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad2e:	bc08      	pop	{r3}
 800ad30:	469e      	mov	lr, r3
 800ad32:	4770      	bx	lr
